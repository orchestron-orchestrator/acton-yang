import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class root(yang.adata.MNode):
    l1: ?int
    l2: ?int
    l3: ?int
    l4: ?int

    mut def __init__(self, l1: ?int, l2: ?int, l3: ?int, l4: ?int):
        self._ns = ""
        self.l1 = l1
        self.l2 = l2
        self.l3 = l3
        self.l4 = l4

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        _l2 = self.l2
        _l3 = self.l3
        _l4 = self.l4
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('union', _l1, ns='http://example.com/foo')
        if _l2 is not None:
            children['l2'] = yang.gdata.Leaf('union', _l2, ns='http://example.com/foo')
        if _l3 is not None:
            children['l3'] = yang.gdata.Leaf('union', _l3, ns='http://example.com/foo')
        if _l4 is not None:
            children['l4'] = yang.gdata.Leaf('union', _l4, ns='http://example.com/foo')
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(l1=n.get_opt_int("l1"), l2=n.get_opt_int("l2"), l3=n.get_opt_int("l3"), l4=n.get_opt_int("l4"))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(l1=yang.gdata.from_xml_opt_int(n, "l1"), l2=yang.gdata.from_xml_opt_int(n, "l2"), l3=yang.gdata.from_xml_opt_int(n, "l3"), l4=yang.gdata.from_xml_opt_int(n, "l4"))
        return root()

