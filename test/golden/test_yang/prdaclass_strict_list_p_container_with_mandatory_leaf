class foo__l1__bar(yang.adata.MNode):
    hi: str

    def __init__(self, hi: str):
        self._ns = "http://example.com/foo"
        self.hi = hi

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('bar', ns=self._ns)
        _hi = self.hi
        if _hi is not None:
            res.children['hi'] = yang.gdata.Leaf('hi', 'string', _hi, ns='http://example.com/foo')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> foo__l1__bar:
        if n != None:
            return foo__l1__bar(hi=n.get_str("hi"))
        raise ValueError("Missing required subtree foo__l1__bar")

    @staticmethod
    def from_xml(n: ?xml.Node) -> foo__l1__bar:
        if n != None:
            return foo__l1__bar(hi=yang.gdata.from_xml_str(n, "hi"))
        raise ValueError("Missing required subtree foo__l1__bar")


class foo__l1_entry(yang.adata.MNode):
    name: str
    bar: ?foo__l1__bar

    def __init__(self, name: str, bar: ?foo__l1__bar=None):
        self._ns = "http://example.com/foo"
        self.name = name
        self.bar = bar
        self_bar = self.bar
        if self_bar is not None:
            self_bar._parent = self

    def create_bar(self, hi):
        res = foo__l1__bar(hi)
        self.bar = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.name)], ns=self._ns)
        _name = self.name
        _bar = self.bar
        if _name is not None:
            res.children['name'] = yang.gdata.Leaf('name', 'string', _name, ns='http://example.com/foo')
        if _bar is not None:
            res.children['bar'] = _bar.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> foo__l1_entry:
        return foo__l1_entry(name=n.get_str("name"), bar=foo__l1__bar.from_gdata(n.get_container("bar")))

    @staticmethod
    def from_xml(n: xml.Node) -> foo__l1_entry:
        return foo__l1_entry(name=yang.gdata.from_xml_str(n, "name"), bar=foo__l1__bar.from_xml(yang.gdata.get_xml_child(n, "bar")))

class foo__l1(yang.adata.MNode):
    elements: list[foo__l1_entry]
    def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'l1'
        self.elements = elements

    def create(self, name, bar):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = foo__l1_entry(name, bar)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('l1', ['name'], ns=self._ns)
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[foo__l1_entry]:
        res = []
        for e in n.elements:
            res.append(foo__l1_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[foo__l1_entry]:
        res = []
        for node in nodes:
            res.append(foo__l1_entry.from_xml(node))
        return res

