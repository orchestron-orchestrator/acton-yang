import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1__things_entry(yang.adata.MNode):
    name: str
    id: ?str

    mut def __init__(self, name: str, id: ?str):
        self._ns = "http://example.com/foo"
        self.name = name
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _id = self.id
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c1__things_entry:
        return foo__c1__things_entry(name=n.get_str("name"), id=n.get_opt_str("id"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__c1__things_entry:
        return foo__c1__things_entry(name=yang.gdata.from_xml_str(n, "name"), id=yang.gdata.from_xml_opt_str(n, "id"))

class foo__c1__things(yang.adata.MNode):
    elements: list[foo__c1__things_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'things'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = foo__c1__things_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__c1__things_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__c1__things_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__c1__things_entry]:
        res = []
        for node in nodes:
            res.append(foo__c1__things_entry.from_xml(node))
        return res


class foo__c1(yang.adata.MNode):
    things: foo__c1__things

    mut def __init__(self, things: list[foo__c1__things_entry]=[]):
        self._ns = "http://example.com/foo"
        self.things = foo__c1__things(elements=things)
        self.things._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _things = self.things
        if _things is not None:
            children['things'] = _things.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(things=foo__c1__things.from_gdata(n.get_opt_list("things")))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(things=foo__c1__things.from_xml(yang.gdata.get_xml_children(n, "things")))
        return foo__c1()


class root(yang.adata.MNode):
    c1: foo__c1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")))
        return root()

