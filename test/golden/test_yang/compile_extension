import base64
import json
import xml
import yang.adata
import yang.gdata
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_json_foo__c1__things__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__things__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__things__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__things__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__c1__things_entry(yang.adata.MNode):
    name: str
    id: ?str

    mut def __init__(self, name: str, id: ?str):
        self._ns = 'http://example.com/foo'
        self.name = name
        self.id = id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c1__things_entry:
        return foo__c1__things_entry(name=n.get_str('name'), id=n.get_opt_str('id'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1/things')
            res.append('{self_name} = foo__c1__things({repr(self.name)})')
        leaves = []
        _id = self.id
        if _id is not None:
            leaves.append('{self_name}.id = {repr(_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1/things'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class foo__c1__things(yang.adata.MNode):
    elements: list[foo__c1__things_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'things'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = foo__c1__things_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__c1__things_entry]:
        if n is not None:
            return [foo__c1__things_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_foo__c1__things_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_foo__c1__things__name, child_name)
    child_id = yang.gdata.from_xml_opt_str(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_foo__c1__things__id, child_id)
    return yang.gdata.Container(children)

mut def from_xml_foo__c1__things(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_foo__c1__things_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_foo__c1__things_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__c1__things_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_foo__c1__things__name(keys[0])
        if point == 'id':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__c1__things(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__c1__things_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_foo__c1__things_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__c1__things_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_foo__c1__things__name, child_name)
    child_id = yang.gdata.take_json_opt_str(jd, 'id')
    yang.gdata.maybe_add(children, 'id', from_json_foo__c1__things__id, child_id)
    return yang.gdata.Container(children)

mut def from_json_foo__c1__things(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_foo__c1__things_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

class foo__c1(yang.adata.MNode):
    things: foo__c1__things

    mut def __init__(self, things: list[foo__c1__things_entry]=[]):
        self._ns = 'http://example.com/foo'
        self.things = foo__c1__things(elements=things)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _things = self.things
        if _things is not None:
            children['things'] = _things.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n is not None:
            return foo__c1(things=foo__c1__things.from_gdata(n.get_opt_list('things')))
        return foo__c1()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1')
            res.append('{self_name} = foo__c1()')
        leaves = []
        _things = self.things
        for _element in _things.elements:
            res.append('')
            res.append("# List /c1/things element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'things_element = {self_name}.things.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('things_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_foo__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_things = yang.gdata.from_xml_opt_list(node, 'things')
    yang.gdata.maybe_add(children, 'things', from_xml_foo__c1__things, child_things)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'things':
            child = {'things': from_json_path_foo__c1__things(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/foo', module='foo')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_things = yang.gdata.take_json_opt_list(jd, 'things')
    yang.gdata.maybe_add(children, 'things', from_json_foo__c1__things, child_things)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    c1: foo__c1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else foo__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(c1=foo__c1.from_gdata(n.get_opt_cnt('c1')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _c1 = self.c1
        if _c1 is not None:
            res.extend(_c1.prsrc('{self_name}.c1', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.from_xml_opt_cnt(node, 'c1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'c1', from_xml_foo__c1, child_c1)
    return yang.gdata.Container(children)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:c1':
            child = {'c1': from_json_path_foo__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.take_json_opt_cnt(jd, 'c1', 'foo')
    yang.gdata.maybe_add(children, 'c1', from_json_foo__c1, child_c1)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
