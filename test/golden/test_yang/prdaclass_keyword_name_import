mut def from_json_foo__c1__as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__for(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__for(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__in(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__in(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__with(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__with(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__c1(yang.adata.MNode):
    as_: ?str
    for_: ?str
    import_: ?str
    in_: ?str
    with_: ?str

    mut def __init__(self, as_: ?str, for_: ?str, import_: ?str, in_: ?str, with_: ?str):
        self._ns = 'http://example.com/foo'
        self.as_ = as_
        self.for_ = for_
        self.import_ = import_
        self.in_ = in_
        self.with_ = with_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        if _as_ is not None:
            children['as'] = yang.gdata.Leaf('string', _as_)
        _for_ = self.for_
        if _for_ is not None:
            children['for'] = yang.gdata.Leaf('string', _for_)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        _in_ = self.in_
        if _in_ is not None:
            children['in'] = yang.gdata.Leaf('string', _in_)
        _with_ = self.with_
        if _with_ is not None:
            children['with'] = yang.gdata.Leaf('string', _with_)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(as_=n.get_opt_str('as'), for_=n.get_opt_str('for'), import_=n.get_opt_str('import'), in_=n.get_opt_str('in'), with_=n.get_opt_str('with'))
        return foo__c1()

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = foo__c1()')
        _as_ = self.as_
        if _as_ is not None:
            res.append(f'{self_name}.as_ = {repr(_as_)}')
        _for_ = self.for_
        if _for_ is not None:
            res.append(f'{self_name}.for_ = {repr(_for_)}')
        _import_ = self.import_
        if _import_ is not None:
            res.append(f'{self_name}.import_ = {repr(_import_)}')
        _in_ = self.in_
        if _in_ is not None:
            res.append(f'{self_name}.in_ = {repr(_in_)}')
        _with_ = self.with_
        if _with_ is not None:
            res.append(f'{self_name}.with_ = {repr(_with_)}')
        return '\n'.join(res)


mut def from_xml_foo__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_ = yang.gdata.from_xml_opt_str(node, 'as')
    yang.gdata.maybe_add(children, 'as', from_xml_foo__c1__as, child_as_)
    child_for_ = yang.gdata.from_xml_opt_str(node, 'for')
    yang.gdata.maybe_add(children, 'for', from_xml_foo__c1__for, child_for_)
    child_import_ = yang.gdata.from_xml_opt_str(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_foo__c1__import, child_import_)
    child_in_ = yang.gdata.from_xml_opt_str(node, 'in')
    yang.gdata.maybe_add(children, 'in', from_xml_foo__c1__in, child_in_)
    child_with_ = yang.gdata.from_xml_opt_str(node, 'with')
    yang.gdata.maybe_add(children, 'with', from_xml_foo__c1__with, child_with_)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'as':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'for':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'import':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'in':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'with':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_as_ = yang.gdata.take_json_opt_str(jd, 'as')
    yang.gdata.maybe_add(children, 'as', from_json_foo__c1__as, child_as_)
    child_for_ = yang.gdata.take_json_opt_str(jd, 'for')
    yang.gdata.maybe_add(children, 'for', from_json_foo__c1__for, child_for_)
    child_import_ = yang.gdata.take_json_opt_str(jd, 'import')
    yang.gdata.maybe_add(children, 'import', from_json_foo__c1__import, child_import_)
    child_in_ = yang.gdata.take_json_opt_str(jd, 'in')
    yang.gdata.maybe_add(children, 'in', from_json_foo__c1__in, child_in_)
    child_with_ = yang.gdata.take_json_opt_str(jd, 'with')
    yang.gdata.maybe_add(children, 'with', from_json_foo__c1__with, child_with_)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')
