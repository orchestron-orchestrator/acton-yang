class foo__c1(yang.adata.MNode):
    as_: ?str
    for_: ?str
    import_: ?str
    in_: ?str
    with_: ?str

    def __init__(self, as_: ?str, for_: ?str, import_: ?str, in_: ?str, with_: ?str):
        self._ns = "http://example.com/foo"
        self.as_ = as_
        self.for_ = for_
        self.import_ = import_
        self.in_ = in_
        self.with_ = with_

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('c1', ns=self._ns)
        _as_ = self.as_
        _for_ = self.for_
        _import_ = self.import_
        _in_ = self.in_
        _with_ = self.with_
        if _as_ is not None:
            res.children['as'] = yang.gdata.Leaf('as', _as_, ns=self._ns)
        if _for_ is not None:
            res.children['for'] = yang.gdata.Leaf('for', _for_, ns=self._ns)
        if _import_ is not None:
            res.children['import'] = yang.gdata.Leaf('import', _import_, ns=self._ns)
        if _in_ is not None:
            res.children['in'] = yang.gdata.Leaf('in', _in_, ns=self._ns)
        if _with_ is not None:
            res.children['with'] = yang.gdata.Leaf('with', _with_, ns=self._ns)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> foo__c1:
        return foo__c1(as_=n.get_opt_str("as"), for_=n.get_opt_str("for"), import_=n.get_opt_str("import"), in_=n.get_opt_str("in"), with_=n.get_opt_str("with"))

    @staticmethod
    def from_xml(n: xml.Node) -> foo__c1:
        return foo__c1(as_=yang.gdata.from_xml_opt_str(n, "as"), for_=yang.gdata.from_xml_opt_str(n, "for"), import_=yang.gdata.from_xml_opt_str(n, "import"), in_=yang.gdata.from_xml_opt_str(n, "in"), with_=yang.gdata.from_xml_opt_str(n, "with"))

