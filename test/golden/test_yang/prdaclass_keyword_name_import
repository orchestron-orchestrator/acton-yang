mut def from_json_foo__c1__as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_foo__c1__for(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_foo__c1__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_foo__c1__in(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_foo__c1__with(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__c1(yang.adata.MNode):
    as_: ?str
    for_: ?str
    import_: ?str
    in_: ?str
    with_: ?str

    mut def __init__(self, as_: ?str, for_: ?str, import_: ?str, in_: ?str, with_: ?str):
        self._ns = "http://example.com/foo"
        self.as_ = as_
        self.for_ = for_
        self.import_ = import_
        self.in_ = in_
        self.with_ = with_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_ = self.as_
        _for_ = self.for_
        _import_ = self.import_
        _in_ = self.in_
        _with_ = self.with_
        if _as_ is not None:
            children['as'] = yang.gdata.Leaf('string', _as_)
        if _for_ is not None:
            children['for'] = yang.gdata.Leaf('string', _for_)
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        if _in_ is not None:
            children['in'] = yang.gdata.Leaf('string', _in_)
        if _with_ is not None:
            children['with'] = yang.gdata.Leaf('string', _with_)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(as_=n.get_opt_str("as"), for_=n.get_opt_str("for"), import_=n.get_opt_str("import"), in_=n.get_opt_str("in"), with_=n.get_opt_str("with"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(as_=yang.gdata.from_xml_opt_str(n, "as"), for_=yang.gdata.from_xml_opt_str(n, "for"), import_=yang.gdata.from_xml_opt_str(n, "import"), in_=yang.gdata.from_xml_opt_str(n, "in"), with_=yang.gdata.from_xml_opt_str(n, "with"))
        return foo__c1()


mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:as' or point == 'as':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:for' or point == 'for':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:import' or point == 'import':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:in' or point == 'in':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:with' or point == 'with':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_as__full = jd.get('foo:as')
    child_as_ = child_as__full if child_as__full is not None else jd.get('as')
    if child_as_ is not None:
        children['as'] = from_json_foo__c1__as(child_as_)
    child_for__full = jd.get('foo:for')
    child_for_ = child_for__full if child_for__full is not None else jd.get('for')
    if child_for_ is not None:
        children['for'] = from_json_foo__c1__for(child_for_)
    child_import__full = jd.get('foo:import')
    child_import_ = child_import__full if child_import__full is not None else jd.get('import')
    if child_import_ is not None:
        children['import'] = from_json_foo__c1__import(child_import_)
    child_in__full = jd.get('foo:in')
    child_in_ = child_in__full if child_in__full is not None else jd.get('in')
    if child_in_ is not None:
        children['in'] = from_json_foo__c1__in(child_in_)
    child_with__full = jd.get('foo:with')
    child_with_ = child_with__full if child_with__full is not None else jd.get('with')
    if child_with_ is not None:
        children['with'] = from_json_foo__c1__with(child_with_)
    return yang.gdata.Container(children)

mut def to_json_foo__c1(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_as_ = n.children.get('as')
    if child_as_ is not None:
        if isinstance(child_as_, yang.gdata.Leaf):
            children['as'] = child_as_.val
    child_for_ = n.children.get('for')
    if child_for_ is not None:
        if isinstance(child_for_, yang.gdata.Leaf):
            children['for'] = child_for_.val
    child_import_ = n.children.get('import')
    if child_import_ is not None:
        if isinstance(child_import_, yang.gdata.Leaf):
            children['import'] = child_import_.val
    child_in_ = n.children.get('in')
    if child_in_ is not None:
        if isinstance(child_in_, yang.gdata.Leaf):
            children['in'] = child_in_.val
    child_with_ = n.children.get('with')
    if child_with_ is not None:
        if isinstance(child_with_, yang.gdata.Leaf):
            children['with'] = child_with_.val
    return children

