import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__foo_bar__foo_bar(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__foo_bar(yang.adata.MNode):
    foo_bar: ?str

    mut def __init__(self, foo_bar: ?str):
        self._ns = "http://example.com/foo"
        self.foo_bar = foo_bar

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo_bar = self.foo_bar
        if _foo_bar is not None:
            children['foo-bar'] = yang.gdata.Leaf('string', _foo_bar)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=n.get_opt_str("foo-bar"))
        return foo__foo_bar()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=yang.gdata.from_xml_opt_str(n, "foo-bar"))
        return foo__foo_bar()


mut def from_json_path_foo__foo_bar(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo-bar' or point == 'foo-bar':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__foo_bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__foo_bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_bar_full = jd.get('foo:foo-bar')
    child_foo_bar = child_foo_bar_full if child_foo_bar_full is not None else jd.get('foo-bar')
    if child_foo_bar is not None:
        children['foo-bar'] = from_json_foo__foo_bar__foo_bar(child_foo_bar)
    return yang.gdata.Container(children)

mut def to_json_foo__foo_bar(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_foo_bar = n.children.get('foo-bar')
    if child_foo_bar is not None:
        if isinstance(child_foo_bar, yang.gdata.Leaf):
            children['foo-bar'] = child_foo_bar.val
    return children


mut def from_json_foo__foo_bar__foo_bar(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__foo_bar(yang.adata.MNode):
    foo_bar: ?str

    mut def __init__(self, foo_bar: ?str):
        self._ns = "http://example.com/foo"
        self.foo_bar = foo_bar

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo_bar = self.foo_bar
        if _foo_bar is not None:
            children['foo_bar'] = yang.gdata.Leaf('string', _foo_bar)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=n.get_opt_str("foo_bar"))
        return foo__foo_bar()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=yang.gdata.from_xml_opt_str(n, "foo_bar"))
        return foo__foo_bar()


mut def from_json_path_foo__foo_bar(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo_bar' or point == 'foo_bar':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__foo_bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__foo_bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_bar_full = jd.get('foo:foo_bar')
    child_foo_bar = child_foo_bar_full if child_foo_bar_full is not None else jd.get('foo_bar')
    if child_foo_bar is not None:
        children['foo_bar'] = from_json_foo__foo_bar__foo_bar(child_foo_bar)
    return yang.gdata.Container(children)

mut def to_json_foo__foo_bar(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_foo_bar = n.children.get('foo_bar')
    if child_foo_bar is not None:
        if isinstance(child_foo_bar, yang.gdata.Leaf):
            children['foo_bar'] = child_foo_bar.val
    return children


mut def from_json_foo__foo_bar__foo_bar(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__foo_bar(yang.adata.MNode):
    foo_bar: ?str

    mut def __init__(self, foo_bar: ?str):
        self._ns = "http://example.com/foo"
        self.foo_bar = foo_bar

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo_bar = self.foo_bar
        if _foo_bar is not None:
            children['foo.bar'] = yang.gdata.Leaf('string', _foo_bar)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=n.get_opt_str("foo.bar"))
        return foo__foo_bar()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__foo_bar:
        if n != None:
            return foo__foo_bar(foo_bar=yang.gdata.from_xml_opt_str(n, "foo.bar"))
        return foo__foo_bar()


mut def from_json_path_foo__foo_bar(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo.bar' or point == 'foo.bar':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__foo_bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__foo_bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_bar_full = jd.get('foo:foo.bar')
    child_foo_bar = child_foo_bar_full if child_foo_bar_full is not None else jd.get('foo.bar')
    if child_foo_bar is not None:
        children['foo.bar'] = from_json_foo__foo_bar__foo_bar(child_foo_bar)
    return yang.gdata.Container(children)

mut def to_json_foo__foo_bar(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_foo_bar = n.children.get('foo.bar')
    if child_foo_bar is not None:
        if isinstance(child_foo_bar, yang.gdata.Leaf):
            children['foo.bar'] = child_foo_bar.val
    return children


class root(yang.adata.MNode):
    foo_bar_0: foo__foo_bar
    foo_bar_1: foo__foo_bar
    foo_bar_2: foo__foo_bar

    mut def __init__(self, foo_bar_0: ?foo__foo_bar=None, foo_bar_1: ?foo__foo_bar=None, foo_bar_2: ?foo__foo_bar=None):
        self._ns = ""
        if foo_bar_0 is not None:
            self.foo_bar_0 = foo_bar_0
        else:
            self.foo_bar_0 = foo__foo_bar()
        self_foo_bar_0 = self.foo_bar_0
        if self_foo_bar_0 is not None:
            self_foo_bar_0._parent = self
        if foo_bar_1 is not None:
            self.foo_bar_1 = foo_bar_1
        else:
            self.foo_bar_1 = foo__foo_bar()
        self_foo_bar_1 = self.foo_bar_1
        if self_foo_bar_1 is not None:
            self_foo_bar_1._parent = self
        if foo_bar_2 is not None:
            self.foo_bar_2 = foo_bar_2
        else:
            self.foo_bar_2 = foo__foo_bar()
        self_foo_bar_2 = self.foo_bar_2
        if self_foo_bar_2 is not None:
            self_foo_bar_2._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo_bar_0 = self.foo_bar_0
        _foo_bar_1 = self.foo_bar_1
        _foo_bar_2 = self.foo_bar_2
        if _foo_bar_0 is not None:
            children['foo-bar'] = _foo_bar_0.to_gdata()
        if _foo_bar_1 is not None:
            children['foo_bar'] = _foo_bar_1.to_gdata()
        if _foo_bar_2 is not None:
            children['foo.bar'] = _foo_bar_2.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(foo_bar_0=foo__foo_bar.from_gdata(n.get_opt_container("foo-bar")), foo_bar_1=foo__foo_bar.from_gdata(n.get_opt_container("foo_bar")), foo_bar_2=foo__foo_bar.from_gdata(n.get_opt_container("foo.bar")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(foo_bar_0=foo__foo_bar.from_xml(yang.gdata.get_xml_opt_child(n, "foo-bar", "http://example.com/foo")), foo_bar_1=foo__foo_bar.from_xml(yang.gdata.get_xml_opt_child(n, "foo_bar", "http://example.com/foo")), foo_bar_2=foo__foo_bar.from_xml(yang.gdata.get_xml_opt_child(n, "foo.bar", "http://example.com/foo")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo-bar':
            child = {'foo-bar': from_json_path_foo__foo_bar(jd, rest_path, op) }
            return yang.gdata.Root(child)
        if point == 'foo:foo_bar':
            child = {'foo_bar': from_json_path_foo__foo_bar(jd, rest_path, op) }
            return yang.gdata.Root(child)
        if point == 'foo:foo.bar':
            child = {'foo.bar': from_json_path_foo__foo_bar(jd, rest_path, op) }
            return yang.gdata.Root(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Root:
    children = {}
    child_foo_bar_0 = jd.get('foo:foo-bar')
    if child_foo_bar_0 is not None and isinstance(child_foo_bar_0, dict):
        children['foo-bar'] = from_json_foo__foo_bar(child_foo_bar_0)
    child_foo_bar_1 = jd.get('foo:foo_bar')
    if child_foo_bar_1 is not None and isinstance(child_foo_bar_1, dict):
        children['foo_bar'] = from_json_foo__foo_bar(child_foo_bar_1)
    child_foo_bar_2 = jd.get('foo:foo.bar')
    if child_foo_bar_2 is not None and isinstance(child_foo_bar_2, dict):
        children['foo.bar'] = from_json_foo__foo_bar(child_foo_bar_2)
    return yang.gdata.Root(children)

mut def to_json(n: yang.gdata.Root) -> dict[str, ?value]:
    children = {}
    child_foo_bar_0 = n.children.get('foo-bar')
    if child_foo_bar_0 is not None:
        if isinstance(child_foo_bar_0, yang.gdata.Container):
            children['foo:foo-bar'] = to_json_foo__foo_bar(child_foo_bar_0)
    child_foo_bar_1 = n.children.get('foo_bar')
    if child_foo_bar_1 is not None:
        if isinstance(child_foo_bar_1, yang.gdata.Container):
            children['foo:foo_bar'] = to_json_foo__foo_bar(child_foo_bar_1)
    child_foo_bar_2 = n.children.get('foo.bar')
    if child_foo_bar_2 is not None:
        if isinstance(child_foo_bar_2, yang.gdata.Container):
            children['foo:foo.bar'] = to_json_foo__foo_bar(child_foo_bar_2)
    return children

