import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1__li1_entry(yang.adata.MNode):
    l1: str

    mut def __init__(self, l1: str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.ListElement([str(self.l1)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c1__li1_entry:
        return foo__c1__li1_entry(l1=n.get_str("l1"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__c1__li1_entry:
        return foo__c1__li1_entry(l1=yang.gdata.from_xml_str(n, "l1"))

class foo__c1__li1(yang.adata.MNode):
    elements: list[foo__c1__li1_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'li1'
        self.elements = elements

    mut def create(self, l1):
        for e in self.elements:
            match = True
            if e.l1 != l1:
                match = False
                break
            if match:
                return e

        res = foo__c1__li1_entry(l1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['l1'], elements)

    @staticmethod
    mut def from_gdata(n: yang.gdata.List) -> list[foo__c1__li1_entry]:
        res = []
        for e in n.elements:
            res.append(foo__c1__li1_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__c1__li1_entry]:
        res = []
        for node in nodes:
            res.append(foo__c1__li1_entry.from_xml(node))
        return res


class foo__c1(yang.adata.MNode):
    li1: foo__c1__li1

    mut def __init__(self, li1: list[foo__c1__li1_entry]=[]):
        self._ns = "http://example.com/foo"
        self.li1 = foo__c1__li1(elements=li1)
        self.li1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _li1 = self.li1
        if _li1 is not None:
            children['li1'] = _li1.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(li1=foo__c1__li1.from_gdata(n.get_list("li1")))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(li1=foo__c1__li1.from_xml(yang.gdata.get_xml_children(n, "li1")))
        return foo__c1()


class root(yang.adata.MNode):
    c1: foo__c1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1")))
        return root()

