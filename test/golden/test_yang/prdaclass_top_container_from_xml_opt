import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_str("l1"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__c1()


class foo__pc1__foo(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=n.get_opt_str("l1"))
        return foo__pc1__foo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__pc1__foo()


class foo__pc1(yang.adata.MNode):
    foo: foo__pc1__foo

    mut def __init__(self, foo: ?foo__pc1__foo=None):
        self._ns = "http://example.com/foo"
        if foo is not None:
            self.foo = foo
        else:
            self.foo = foo__pc1__foo()
        self_foo = self.foo
        if self_foo is not None:
            self_foo._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = _foo.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_gdata(n.get_opt_container("foo")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_xml(yang.gdata.get_xml_opt_child(n, "foo")))
        return None


class root(yang.adata.MNode):
    c1: foo__c1
    pc1: ?foo__pc1

    mut def __init__(self, c1: ?foo__c1=None, pc1: ?foo__pc1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self
        self.pc1 = pc1
        self_pc1 = self.pc1
        if self_pc1 is not None:
            self_pc1._parent = self

    mut def create_pc1(self):
        res = foo__pc1()
        self.pc1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        _pc1 = self.pc1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        if _pc1 is not None:
            children['pc1'] = _pc1.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")), pc1=foo__pc1.from_gdata(n.get_opt_container("pc1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")), pc1=foo__pc1.from_xml(yang.gdata.get_xml_opt_child(n, "pc1", "http://example.com/foo")))
        return root()

