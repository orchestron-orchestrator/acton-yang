import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__c1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_str("l1"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__c1()


mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:l1' or point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1_full = jd.get('foo:l1')
    child_l1 = child_l1_full if child_l1_full is not None else jd.get('l1')
    if child_l1 is not None:
        children['l1'] = from_json_foo__c1__l1(child_l1)
    return yang.gdata.Container(children)

mut def to_json_foo__c1(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_l1 = n.children.get('l1')
    if child_l1 is not None:
        if isinstance(child_l1, yang.gdata.Leaf):
            children['l1'] = child_l1.val
    return children

mut def from_json_foo__pc1__foo__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__pc1__foo(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=n.get_opt_str("l1"))
        return foo__pc1__foo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__pc1__foo()


mut def from_json_path_foo__pc1__foo(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:l1' or point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__pc1__foo(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__pc1__foo(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1_full = jd.get('foo:l1')
    child_l1 = child_l1_full if child_l1_full is not None else jd.get('l1')
    if child_l1 is not None:
        children['l1'] = from_json_foo__pc1__foo__l1(child_l1)
    return yang.gdata.Container(children)

mut def to_json_foo__pc1__foo(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_l1 = n.children.get('l1')
    if child_l1 is not None:
        if isinstance(child_l1, yang.gdata.Leaf):
            children['l1'] = child_l1.val
    return children

class foo__pc1(yang.adata.MNode):
    foo: foo__pc1__foo

    mut def __init__(self, foo: ?foo__pc1__foo=None):
        self._ns = "http://example.com/foo"
        if foo is not None:
            self.foo = foo
        else:
            self.foo = foo__pc1__foo()
        self_foo = self.foo
        if self_foo is not None:
            self_foo._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = _foo.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_gdata(n.get_opt_container("foo")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_xml(yang.gdata.get_xml_opt_child(n, "foo")))
        return None


mut def from_json_path_foo__pc1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo' or point == 'foo':
            child = {'foo': from_json_path_foo__pc1__foo(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__pc1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__pc1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_full = jd.get('foo:foo')
    child_foo = child_foo_full if child_foo_full is not None else jd.get('foo')
    if child_foo is not None and isinstance(child_foo, dict):
        children['foo'] = from_json_foo__pc1__foo(child_foo)
    return yang.gdata.Container(children)

mut def to_json_foo__pc1(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_foo = n.children.get('foo')
    if child_foo is not None:
        if isinstance(child_foo, yang.gdata.Container):
            children['foo'] = to_json_foo__pc1__foo(child_foo)
    return children

class root(yang.adata.MNode):
    c1: foo__c1
    pc1: ?foo__pc1

    mut def __init__(self, c1: ?foo__c1=None, pc1: ?foo__pc1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self
        self.pc1 = pc1
        self_pc1 = self.pc1
        if self_pc1 is not None:
            self_pc1._parent = self

    mut def create_pc1(self):
        res = foo__pc1()
        self.pc1 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        _pc1 = self.pc1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        if _pc1 is not None:
            children['pc1'] = _pc1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")), pc1=foo__pc1.from_gdata(n.get_opt_container("pc1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")), pc1=foo__pc1.from_xml(yang.gdata.get_xml_opt_child(n, "pc1", "http://example.com/foo")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:c1':
            child = {'c1': from_json_path_foo__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'foo:pc1':
            child = {'pc1': from_json_path_foo__pc1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = jd.get('foo:c1')
    if child_c1 is not None and isinstance(child_c1, dict):
        children['c1'] = from_json_foo__c1(child_c1)
    child_pc1 = jd.get('foo:pc1')
    if child_pc1 is not None and isinstance(child_pc1, dict):
        children['pc1'] = from_json_foo__pc1(child_pc1)
    return yang.gdata.Container(children)

mut def to_json(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_c1 = n.children.get('c1')
    if child_c1 is not None:
        if isinstance(child_c1, yang.gdata.Container):
            children['foo:c1'] = to_json_foo__c1(child_c1)
    child_pc1 = n.children.get('pc1')
    if child_pc1 is not None:
        if isinstance(child_pc1, yang.gdata.Container):
            children['foo:pc1'] = to_json_foo__pc1(child_pc1)
    return children

schema_namespaces: set[str] = {
    "http://example.com/foo",
}
