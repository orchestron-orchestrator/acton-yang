mut def from_json_foo__foo__bar__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__foo__bar__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__foo__bar(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = 'http://example.com/foo'
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__foo__bar:
        if n is not None:
            return foo__foo__bar(l1=n.get_opt_str('l1'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /foo/bar')
            res.append('{self_name} = foo__foo__bar()')
        leaves = []
        _l1 = self.l1
        if _l1 is not None:
            leaves.append('{self_name}.l1 = {repr(_l1)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /foo/bar'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_foo__foo__bar(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.from_xml_opt_str(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__foo__bar__l1, child_l1)
    return yang.gdata.Container(children, presence=True)

mut def from_json_path_foo__foo__bar(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__foo__bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__foo__bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.take_json_opt_str(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__foo__bar__l1, child_l1)
    return yang.gdata.Container(children, presence=True)

class foo__foo(yang.adata.MNode):
    bar: ?foo__foo__bar

    mut def __init__(self, bar: ?foo__foo__bar=None):
        self._ns = 'http://example.com/foo'
        self.bar = bar

    mut def create_bar(self, l1):
        res = foo__foo__bar(l1)
        self.bar = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bar = self.bar
        if _bar is not None:
            children['bar'] = _bar.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__foo:
        if n is not None:
            return foo__foo(bar=foo__foo__bar.from_gdata(n.get_opt_cnt('bar')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /foo')
            res.append('{self_name} = foo__foo()')
        leaves = []
        _bar = self.bar
        if _bar is not None:
            res.append('')
            res.append('# P-container: /foo/bar')
            res.append('bar = {self_name}.create_bar()')
            res.extend(_bar.prsrc('bar', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /foo'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_foo__foo(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bar = yang.gdata.from_xml_opt_cnt(node, 'bar')
    yang.gdata.maybe_add(children, 'bar', from_xml_foo__foo__bar, child_bar)
    return yang.gdata.Container(children, presence=True, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__foo(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'bar':
            child = {'bar': from_json_path_foo__foo__bar(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/foo', module='foo')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__foo(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__foo(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_bar = yang.gdata.take_json_opt_cnt(jd, 'bar')
    yang.gdata.maybe_add(children, 'bar', from_json_foo__foo__bar, child_bar)
    return yang.gdata.Container(children, presence=True, ns='http://example.com/foo', module='foo')
