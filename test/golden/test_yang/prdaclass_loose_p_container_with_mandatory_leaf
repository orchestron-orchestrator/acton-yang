class foo__foo__bar(yang.adata.MNode):
    l1: ?str

    def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('bar', ns=self._ns)
        _l1 = self.l1
        if _l1 is not None:
            res.children['l1'] = yang.gdata.Leaf('l1', _l1, ns='http://example.com/foo')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> foo__foo__bar:
        if n != None:
            return foo__foo__bar(l1=n.get_str("l1"))
        raise ValueError("Missing required subtree foo__foo__bar")

    @staticmethod
    def from_xml(n: ?xml.Node) -> foo__foo__bar:
        if n != None:
            return foo__foo__bar(l1=yang.gdata.from_xml_str(n, "l1"))
        raise ValueError("Missing required subtree foo__foo__bar")


class foo__foo(yang.adata.MNode):
    bar: ?foo__foo__bar

    def __init__(self, bar: ?foo__foo__bar=None):
        self._ns = "http://example.com/foo"
        if bar is not None:
            self.bar = bar
        else:
            self.bar = foo__foo__bar()
        self_bar = self.bar
        if self_bar is not None:
            self_bar._parent = self

    def create_bar(self, l1):
        res = foo__foo__bar(l1)
        self.bar = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('foo', ns=self._ns)
        _bar = self.bar
        if _bar is not None:
            res.children['bar'] = _bar.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: ?yang.gdata.Node) -> foo__foo:
        if n != None:
            return foo__foo(bar=foo__foo__bar.from_gdata(n.get_opt_container("bar")))
        return foo__foo()

    @staticmethod
    def from_xml(n: ?xml.Node) -> foo__foo:
        if n != None:
            return foo__foo(bar=foo__foo__bar.from_xml(yang.gdata.get_xml_opt_child(n, "bar")))
        return foo__foo()

