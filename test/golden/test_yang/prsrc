Module('test_yang', namespace='http://example.com/test_yang', prefix='test_yang', yang_version=1.1, description='test yang module', extension_=[
        Extension('ext1', argument='arg1', description='extension 1')
    ], feature=[
        Feature('fe1', description='feature 1'),
        Feature('fe2', description='feature 2')
    ], import_=[
        Import('ietf-inet-types', prefix='inet', revision_date='2013-07-15')
    ], include=[
        Include('example-types')
    ], revision=[
        Revision('2019-01-01', description='test revision', reference='ref1')
    ], children=[
    Typedef('t1', type_=Type('string')),
    Identity('i1', description='identity 1'),
    Identity('i1c', base=['i1'], description='identity 1'),
    Grouping('g1', description='grouping 1', children=[
        Leaf('gl1', type_=Type('string'), description='grouping leaf 1')
    ]),
    Grouping('g2', description='grouping 2', children=[
        Container('gc1', description='empty container')
    ]),
    Container('c1', description='container 1', children=[
        Leaf('l1', type_=Type('string'), description='leaf 1', if_feature=['fe1 or fe2']),
        Container('c2', config=False, description='container 2', children=[
            Leaf('l2', type_=Type('string'), description='leaf 2'),
            Uses('g1'),
            Uses('g2', augment=[
                    Augment('gl2', children=[
                        Leaf('al1', type_=Type('string'))
                    ])
                ], refine=[
                    Refine('gl2', description='refined description for gl2', if_feature=['foo'])
                ])
        ])
    ]),
    Container('c3', exts=[
            Ext('ext1', 'bob', arg='Robert Johansson')
        ], children=[
        Action('a1', description='action 1'),
        List('li1', description='list 1'),
        LeafList('lli1', type_=Type('int32'), description='leaf-list 1'),
        Choice('ch1', description='choice 1')
    ]),
    Container('c4', presence='single-unquoted-word', children=[
        Container('c5', presence='And you can quote me on that!'),
        Leaf('ql1', type_=Type('string'), description="some 'quotes'"),
        Leaf('ql2', type_=Type('string'), description='contains "quotes"', must=[
                Must('have "quotes"')
            ], when='does it "work"?'),
        Leaf('ql3', type_=Type('string', length=Length('1..10'), pattern=[
        Pattern('foo.*')
    ]), default='/tmp/foo'),
        List('li1', key='k1', children=[
            Leaf('k1', type_=Type('string'))
        ]),
        List('li2', key='k1 k2', children=[
            Leaf('k1', type_=Type('string')),
            Leaf('k2', type_=Type('string'))
        ])
    ]),
    Rpc('rpc1', description='rpc 1', input=Input(children=[
    Leaf('rli1', type_=Type('string'), description='rpc input leaf 1')
]), output=Output(children=[
    Leaf('rlo1', type_=Type('string'), description='rpc output leaf 1')
])),
    Notification('n1', description='notification 1', children=[
        Anydata('n1ad', description='notification anydata 1'),
        Anyxml('n1ax', description='notification anyxml 1')
    ])
])