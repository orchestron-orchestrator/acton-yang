class base__c1(yang.adata.MNode):
    foo: ?str
    foo: ?str

    mut def __init__(self, foo: ?str, foo: ?str):
        self._ns = "http://example.com/base"
        self.foo = foo
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo, ns='http://example.com/bar')
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo, ns='http://example.com/foo')
        return yang.gdata.Container(children, ns='http://example.com/base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n != None:
            return base__c1(foo=n.get_opt_str("foo"), foo=n.get_opt_str("foo"))
        return base__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> base__c1:
        if n != None:
            return base__c1(foo=yang.gdata.from_xml_opt_str(n, "foo"), foo=yang.gdata.from_xml_opt_str(n, "foo"))
        return base__c1()

