mut def from_json_base__c1__bar_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/bar', module='bar')

mut def from_xml_base__c1__bar_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/bar', module='bar')

mut def from_json_base__c1__foo_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/foo', module='foo')

mut def from_xml_base__c1__foo_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/foo', module='foo')

class base__c1(yang.adata.MNode):
    bar_foo: ?str
    foo_foo: ?str

    mut def __init__(self, bar_foo: ?str, foo_foo: ?str):
        self._ns = 'http://example.com/base'
        self.bar_foo = bar_foo
        self.foo_foo = foo_foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bar_foo = self.bar_foo
        if _bar_foo is not None:
            children['bar:foo'] = yang.gdata.Leaf('string', _bar_foo, ns='http://example.com/bar', module='bar')
        _foo_foo = self.foo_foo
        if _foo_foo is not None:
            children['foo:foo'] = yang.gdata.Leaf('string', _foo_foo, ns='http://example.com/foo', module='foo')
        return yang.gdata.Container(children, ns='http://example.com/base', module='base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n is not None:
            return base__c1(bar_foo=n.get_opt_str('bar:foo'), foo_foo=n.get_opt_str('foo:foo'))
        return base__c1()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1')
            res.append('{self_name} = base__c1()')
        leaves = []
        _bar_foo = self.bar_foo
        if _bar_foo is not None:
            leaves.append('{self_name}.bar_foo = {repr(_bar_foo)}')
        _foo_foo = self.foo_foo
        if _foo_foo is not None:
            leaves.append('{self_name}.foo_foo = {repr(_foo_foo)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_base__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bar_foo = yang.gdata.from_xml_opt_str(node, 'foo', 'http://example.com/bar')
    yang.gdata.maybe_add(children, 'bar:foo', from_xml_base__c1__bar_foo, child_bar_foo)
    child_foo_foo = yang.gdata.from_xml_opt_str(node, 'foo', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'foo:foo', from_xml_base__c1__foo_foo, child_foo_foo)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')

mut def from_json_path_base__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'bar:foo':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_bar_foo = yang.gdata.take_json_opt_str(jd, 'foo', 'bar')
    yang.gdata.maybe_add(children, 'bar:foo', from_json_base__c1__bar_foo, child_bar_foo)
    child_foo_foo = yang.gdata.take_json_opt_str(jd, 'foo', 'foo')
    yang.gdata.maybe_add(children, 'foo:foo', from_json_base__c1__foo_foo, child_foo_foo)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')
