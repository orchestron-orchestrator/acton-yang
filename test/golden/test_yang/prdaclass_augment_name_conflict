mut def from_json_base__c1__bar_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_base__c1__foo_foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1(yang.adata.MNode):
    bar_foo: ?str
    foo_foo: ?str

    mut def __init__(self, bar_foo: ?str, foo_foo: ?str):
        self._ns = 'http://example.com/base'
        self.bar_foo = bar_foo
        self.foo_foo = foo_foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bar_foo = self.bar_foo
        if _bar_foo is not None:
            children['bar:foo'] = yang.gdata.Leaf('string', _bar_foo, ns='http://example.com/bar')
        _foo_foo = self.foo_foo
        if _foo_foo is not None:
            children['foo:foo'] = yang.gdata.Leaf('string', _foo_foo, ns='http://example.com/foo')
        return yang.gdata.Container(children, ns='http://example.com/base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n != None:
            return base__c1(bar_foo=n.get_opt_str('bar:foo'), foo_foo=n.get_opt_str('foo:foo'))
        return base__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> base__c1:
        if n != None:
            return base__c1(bar_foo=yang.gdata.from_xml_opt_str(n, 'foo', 'http://example.com/bar'), foo_foo=yang.gdata.from_xml_opt_str(n, 'foo', 'http://example.com/foo'))
        return base__c1()


mut def from_json_path_base__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'bar:foo':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'foo:foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_bar_foo = jd.get('bar:foo')
    if child_bar_foo is not None:
        children['bar:foo'] = from_json_base__c1__bar_foo(child_bar_foo)
    child_foo_foo = jd.get('foo:foo')
    if child_foo_foo is not None:
        children['foo:foo'] = from_json_base__c1__foo_foo(child_foo_foo)
    return yang.gdata.Container(children)

mut def to_json_base__c1(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_bar_foo = n.children.get('bar:foo')
    if child_bar_foo is not None:
        if isinstance(child_bar_foo, yang.gdata.Leaf):
            children['bar:foo'] = child_bar_foo.val
    child_foo_foo = n.children.get('foo:foo')
    if child_foo_foo is not None:
        if isinstance(child_foo_foo, yang.gdata.Leaf):
            children['foo:foo'] = child_foo_foo.val
    return children
