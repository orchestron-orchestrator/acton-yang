import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1__a1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://example.com/foo"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Action(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1__a1:
        if n != None:
            return foo__c1__a1()
        return foo__c1__a1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1__a1:
        if n != None:
            return foo__c1__a1()
        return foo__c1__a1()


mut def from_json_path_foo__c1__a1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1__a1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1__a1(jd: dict[str, ?value]) -> yang.gdata.Action:
    children = {}
    return yang.gdata.Action(children)

    children = {}


class foo__c1(yang.adata.MNode):
    a1: foo__c1__a1

    mut def __init__(self):
        self._ns = "http://example.com/foo"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _a1 = self.a1
        if _a1 is not None:
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1()
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1()
        return foo__c1()


mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:a1' or point == 'a1':
            child = {'a1': from_json_path_foo__c1__a1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_a1_full = jd.get('foo:a1')
    child_a1 = child_a1_full if child_a1_full is not None else jd.get('a1')
    if child_a1 is not None:
        children['a1'] = from_json_foo__c1__a1(child_a1)
    return yang.gdata.Container(children)

mut def to_json_foo__c1(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_a1 = n.children.get('a1')
    if child_a1 is not None:
        pass
    return children


class foo__r1(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://example.com/foo"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Rpc(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__r1:
        if n != None:
            return foo__r1()
        return foo__r1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__r1:
        if n != None:
            return foo__r1()
        return foo__r1()


mut def from_json_path_foo__r1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__r1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__r1(jd: dict[str, ?value]) -> yang.gdata.Rpc:
    children = {}
    return yang.gdata.Rpc(children)

    children = {}


class root(yang.adata.MNode):
    c1: foo__c1
    r1: foo__r1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        _r1 = self.r1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        if _r1 is not None:
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:c1':
            child = {'c1': from_json_path_foo__c1(jd, rest_path, op) }
            return yang.gdata.Root(child)
        if point == 'foo:r1':
            child = {'r1': from_json_path_foo__r1(jd, rest_path, op) }
            return yang.gdata.Root(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Root:
    children = {}
    child_c1 = jd.get('foo:c1')
    if child_c1 is not None and isinstance(child_c1, dict):
        children['c1'] = from_json_foo__c1(child_c1)
    child_r1 = jd.get('foo:r1')
    if child_r1 is not None:
        children['r1'] = from_json_foo__r1(child_r1)
    return yang.gdata.Root(children)

mut def to_json(n: yang.gdata.Root) -> dict[str, ?value]:
    children = {}
    child_c1 = n.children.get('c1')
    if child_c1 is not None:
        if isinstance(child_c1, yang.gdata.Container):
            children['foo:c1'] = to_json_foo__c1(child_c1)
    child_r1 = n.children.get('r1')
    if child_r1 is not None:
        pass
    return children

