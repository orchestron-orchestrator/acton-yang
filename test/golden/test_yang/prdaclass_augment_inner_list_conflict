mut def from_json_base__c1__base_l1__base_k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_base__c1__base_l1__base_k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_base__c1__base_l1__foo_k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/foo', module='foo')

mut def from_xml_base__c1__base_l1__foo_k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val, ns='http://example.com/foo', module='foo')

class base__c1__base_l1_entry(yang.adata.MNode):
    base_k1: str
    foo_k1: str

    mut def __init__(self, base_k1: str, foo_k1: str):
        self._ns = 'http://example.com/base'
        self.base_k1 = base_k1
        self.foo_k1 = foo_k1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _base_k1 = self.base_k1
        if _base_k1 is not None:
            children['base:k1'] = yang.gdata.Leaf('string', _base_k1)
        _foo_k1 = self.foo_k1
        if _foo_k1 is not None:
            children['foo:k1'] = yang.gdata.Leaf('string', _foo_k1, ns='http://example.com/foo', module='foo')
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> base__c1__base_l1_entry:
        return base__c1__base_l1_entry(base_k1=n.get_str('base:k1'), foo_k1=n.get_str('foo:k1'))

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = base__c1__base_l1({repr(self.base_k1)}, {repr(self.foo_k1)})')
        return '\n'.join(res)

class base__c1__base_l1(yang.adata.MNode):
    elements: list[base__c1__base_l1_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/base'
        self._name = 'l1'
        self.elements = elements

    mut def create(self, base_k1, foo_k1):
        for e in self.elements:
            match = True
            if e.base_k1 != base_k1:
                match = False
                continue
            if match:
                return e

        res = base__c1__base_l1_entry(base_k1, foo_k1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['k1'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[base__c1__base_l1_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(base__c1__base_l1_entry.from_gdata(e))
        return res


mut def from_xml_base__c1__base_l1_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_base_k1 = yang.gdata.from_xml_str(node, 'k1')
    yang.gdata.maybe_add(children, 'base:k1', from_xml_base__c1__base_l1__base_k1, child_base_k1)
    child_foo_k1 = yang.gdata.from_xml_str(node, 'k1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'foo:k1', from_xml_base__c1__base_l1__foo_k1, child_foo_k1)
    return yang.gdata.Container(children)

mut def from_xml_base__c1__base_l1(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_base__c1__base_l1_element(e))
    return yang.gdata.List(keys=['k1'], elements=elements)

mut def from_json_path_base__c1__base_l1_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_base__c1__base_l1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['k1']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['base:k1'] = from_json_base__c1__base_l1__base_k1(keys[0])
        children['foo:k1'] = from_json_base__c1__base_l1__foo_k1(keys[0])
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_base__c1__base_l1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['k1']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_base__c1__base_l1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['k1'])))
        return yang.gdata.List(['k1'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['k1'], [from_json_path_base__c1__base_l1_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_base__c1__base_l1_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_base_k1 = yang.gdata.take_json_str(jd, 'k1')
    yang.gdata.maybe_add(children, 'base:k1', from_json_base__c1__base_l1__base_k1, child_base_k1)
    child_foo_k1 = yang.gdata.take_json_str(jd, 'k1', 'foo')
    yang.gdata.maybe_add(children, 'foo:k1', from_json_base__c1__base_l1__foo_k1, child_foo_k1)
    return yang.gdata.Container(children)

mut def from_json_base__c1__base_l1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_base__c1__base_l1_element(e))
    return yang.gdata.List(keys=['k1'], elements=elements)

mut def from_json_base__c1__foo_l1__k2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_base__c1__foo_l1__k2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1__foo_l1_entry(yang.adata.MNode):
    k2: str

    mut def __init__(self, k2: str):
        self._ns = 'http://example.com/foo'
        self.k2 = k2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _k2 = self.k2
        if _k2 is not None:
            children['k2'] = yang.gdata.Leaf('string', _k2)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> base__c1__foo_l1_entry:
        return base__c1__foo_l1_entry(k2=n.get_str('k2'))

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = base__c1__foo_l1({repr(self.k2)})')
        return '\n'.join(res)

class base__c1__foo_l1(yang.adata.MNode):
    elements: list[base__c1__foo_l1_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'l1'
        self.elements = elements

    mut def create(self, k2):
        for e in self.elements:
            match = True
            if e.k2 != k2:
                match = False
                continue
            if match:
                return e

        res = base__c1__foo_l1_entry(k2)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['k2'], elements, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[base__c1__foo_l1_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(base__c1__foo_l1_entry.from_gdata(e))
        return res


mut def from_xml_base__c1__foo_l1_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_k2 = yang.gdata.from_xml_str(node, 'k2')
    yang.gdata.maybe_add(children, 'k2', from_xml_base__c1__foo_l1__k2, child_k2)
    return yang.gdata.Container(children)

mut def from_xml_base__c1__foo_l1(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_base__c1__foo_l1_element(e))
    return yang.gdata.List(keys=['k2'], elements=elements, ns='http://example.com/foo', module='foo')

mut def from_json_path_base__c1__foo_l1_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_base__c1__foo_l1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['k2']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['k2'] = from_json_base__c1__foo_l1__k2(keys[0])
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_base__c1__foo_l1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['k2']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_base__c1__foo_l1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['k2'])))
        return yang.gdata.List(['k2'], elements, ns='http://example.com/foo', module='foo')
    elif len(path) > 1:
        return yang.gdata.List(['k2'], [from_json_path_base__c1__foo_l1_element(jd, path, op)], ns='http://example.com/foo', module='foo')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_base__c1__foo_l1_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_k2 = yang.gdata.take_json_str(jd, 'k2')
    yang.gdata.maybe_add(children, 'k2', from_json_base__c1__foo_l1__k2, child_k2)
    return yang.gdata.Container(children)

mut def from_json_base__c1__foo_l1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_base__c1__foo_l1_element(e))
    return yang.gdata.List(keys=['k2'], elements=elements, ns='http://example.com/foo', module='foo')

class base__c1(yang.adata.MNode):
    base_l1: base__c1__base_l1
    foo_l1: base__c1__foo_l1

    mut def __init__(self, base_l1: list[base__c1__base_l1_entry]=[], foo_l1: list[base__c1__foo_l1_entry]=[]):
        self._ns = 'http://example.com/base'
        self.base_l1 = base__c1__base_l1(elements=base_l1)
        self.foo_l1 = base__c1__foo_l1(elements=foo_l1)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _base_l1 = self.base_l1
        if _base_l1 is not None:
            children['base:l1'] = _base_l1.to_gdata()
        _foo_l1 = self.foo_l1
        if _foo_l1 is not None:
            children['foo:l1'] = _foo_l1.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/base', module='base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n != None:
            return base__c1(base_l1=base__c1__base_l1.from_gdata(n.get_opt_list('base:l1')), foo_l1=base__c1__foo_l1.from_gdata(n.get_opt_list('foo:l1')))
        return base__c1()

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = base__c1()')
        _base_l1 = self.base_l1
        for _element in _base_l1.elements:
            list_elem = f'base_l1_element = {self_name}.base_l1.create({repr(_element.base_k1)}, {repr(_element.foo_k1)})'
            res.append(list_elem)
            res.extend(_element.prsrc(f'base_l1_element', False).splitlines())
        _foo_l1 = self.foo_l1
        for _element in _foo_l1.elements:
            list_elem = f'foo_l1_element = {self_name}.foo_l1.create({repr(_element.k2)})'
            res.append(list_elem)
            res.extend(_element.prsrc(f'foo_l1_element', False).splitlines())
        return '\n'.join(res)


mut def from_xml_base__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_base_l1 = yang.gdata.from_xml_opt_list(node, 'l1')
    yang.gdata.maybe_add(children, 'base:l1', from_xml_base__c1__base_l1, child_base_l1)
    child_foo_l1 = yang.gdata.from_xml_opt_list(node, 'l1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'foo:l1', from_xml_base__c1__foo_l1, child_foo_l1)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')

mut def from_json_path_base__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            child = {'base:l1': from_json_path_base__c1__base_l1(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/base', module='base')
        if point == 'foo:l1':
            child = {'foo:l1': from_json_path_base__c1__foo_l1(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/base', module='base')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_base_l1 = yang.gdata.take_json_opt_list(jd, 'l1')
    yang.gdata.maybe_add(children, 'base:l1', from_json_base__c1__base_l1, child_base_l1)
    child_foo_l1 = yang.gdata.take_json_opt_list(jd, 'l1', 'foo')
    yang.gdata.maybe_add(children, 'foo:l1', from_json_base__c1__foo_l1, child_foo_l1)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')

class root(yang.adata.MNode):
    c1: base__c1

    mut def __init__(self, c1: ?base__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else base__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=base__c1.from_gdata(n.get_opt_container('c1')))
        return root()

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = root()')
        _c1 = self.c1
        if _c1 is not None:
            res.extend(_c1.prsrc(f'{self_name}.c1', False).splitlines())
        return '\n'.join(res)


mut def from_xml_root(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.from_xml_opt_cnt(node, 'c1', 'http://example.com/base')
    yang.gdata.maybe_add(children, 'c1', from_xml_base__c1, child_c1)
    return yang.gdata.Container(children)

mut def from_json_path_root(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'base:c1':
            child = {'c1': from_json_path_base__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_root(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_root(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.take_json_opt_cnt(jd, 'c1', 'base')
    yang.gdata.maybe_add(children, 'c1', from_json_base__c1, child_c1)
    return yang.gdata.Container(children)
