import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_acme_foo_bar__c1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class acme_foo_bar__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = 'http://example.com/foo'
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='acme_foo-bar')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> acme_foo_bar__c1:
        if n != None:
            return acme_foo_bar__c1(l1=n.get_opt_str('l1'))
        return acme_foo_bar__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> acme_foo_bar__c1:
        if n != None:
            return acme_foo_bar__c1(l1=yang.gdata.from_xml_opt_str(n, 'l1'))
        return acme_foo_bar__c1()


mut def from_json_path_acme_foo_bar__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_acme_foo_bar__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_acme_foo_bar__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = jd.get('l1')
    if child_l1 is not None:
        children['l1'] = from_json_acme_foo_bar__c1__l1(child_l1)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='acme_foo-bar')

class root(yang.adata.MNode):
    c1: acme_foo_bar__c1

    mut def __init__(self, c1: ?acme_foo_bar__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else acme_foo_bar__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=acme_foo_bar__c1.from_gdata(n.get_opt_container('c1')))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=acme_foo_bar__c1.from_xml(yang.gdata.get_xml_opt_child(n, 'c1', 'http://example.com/foo')))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'acme_foo-bar:c1':
            child = {'c1': from_json_path_acme_foo_bar__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = jd.get('acme_foo-bar:c1')
    if child_c1 is not None and isinstance(child_c1, dict):
        children['c1'] = from_json_acme_foo_bar__c1(child_c1)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
