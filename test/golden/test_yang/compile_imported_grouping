import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_bar__c1__li1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_bar__c1__li1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class bar__c1__li1_entry(yang.adata.MNode):
    l1: str

    mut def __init__(self, l1: str):
        self._ns = 'http://example.com/bar'
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.l1)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> bar__c1__li1_entry:
        return bar__c1__li1_entry(l1=n.get_str('l1'))

    @staticmethod
    mut def from_xml(n: xml.Node) -> bar__c1__li1_entry:
        return bar__c1__li1_entry(l1=yang.gdata.from_xml_str(n, 'l1'))

class bar__c1__li1(yang.adata.MNode):
    elements: list[bar__c1__li1_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/bar'
        self._name = 'li1'
        self.elements = elements

    mut def create(self, l1):
        for e in self.elements:
            match = True
            if e.l1 != l1:
                match = False
                continue
            if match:
                return e

        res = bar__c1__li1_entry(l1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['l1'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[bar__c1__li1_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(bar__c1__li1_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[bar__c1__li1_entry]:
        res = []
        for node in nodes:
            res.append(bar__c1__li1_entry.from_xml(node))
        return res


mut def from_xml_bar__c1__li1_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_l1 = yang.gdata.from_xml_str(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_bar__c1__li1__l1, child_l1)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_l1)])

mut def from_xml_bar__c1__li1(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_bar__c1__li1_element(e))
    return yang.gdata.List(keys=['l1'], elements=elements)

mut def from_json_path_bar__c1__li1_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_bar__c1__li1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['l1'] = from_json_bar__c1__li1__l1(keys[0])
        return yang.gdata.Container(children, keys)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_bar__c1__li1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['l1']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_bar__c1__li1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key))
        return yang.gdata.List(['l1'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['l1'], [from_json_path_bar__c1__li1_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_bar__c1__li1_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_l1 = yang.gdata.take_json_str(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_bar__c1__li1__l1, child_l1)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_l1)])

mut def from_json_bar__c1__li1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_bar__c1__li1_element(e))
    return yang.gdata.List(keys=['l1'], elements=elements)

class bar__c1(yang.adata.MNode):
    li1: bar__c1__li1

    mut def __init__(self, li1: list[bar__c1__li1_entry]=[]):
        self._ns = 'http://example.com/bar'
        self.li1 = bar__c1__li1(elements=li1)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _li1 = self.li1
        if _li1 is not None:
            children['li1'] = _li1.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/bar', module='bar')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> bar__c1:
        if n != None:
            return bar__c1(li1=bar__c1__li1.from_gdata(n.get_opt_list('li1')))
        return bar__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> bar__c1:
        if n != None:
            return bar__c1(li1=bar__c1__li1.from_xml(yang.gdata.get_xml_children(n, 'li1')))
        return bar__c1()


mut def from_xml_bar__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_li1 = yang.gdata.from_xml_opt_list(node, 'li1')
    yang.gdata.maybe_add(children, 'li1', from_xml_bar__c1__li1, child_li1)
    return yang.gdata.Container(children, ns='http://example.com/bar', module='bar')

mut def from_json_path_bar__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'li1':
            child = {'li1': from_json_path_bar__c1__li1(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/bar', module='bar')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_bar__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_bar__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_li1 = yang.gdata.take_json_opt_list(jd, 'li1')
    yang.gdata.maybe_add(children, 'li1', from_json_bar__c1__li1, child_li1)
    return yang.gdata.Container(children, ns='http://example.com/bar', module='bar')

class root(yang.adata.MNode):
    c1: bar__c1

    mut def __init__(self, c1: ?bar__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else bar__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=bar__c1.from_gdata(n.get_opt_container('c1')))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=bar__c1.from_xml(yang.gdata.get_xml_opt_child(n, 'c1', 'http://example.com/bar')))
        return root()


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.from_xml_opt_cnt(node, 'c1', 'http://example.com/bar')
    yang.gdata.maybe_add(children, 'c1', from_xml_bar__c1, child_c1)
    return yang.gdata.Container(children)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'bar:c1':
            child = {'c1': from_json_path_bar__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.take_json_opt_cnt(jd, 'c1', 'bar')
    yang.gdata.maybe_add(children, 'c1', from_json_bar__c1, child_c1)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/bar',
}
