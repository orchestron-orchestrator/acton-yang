import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1(yang.adata.MNode):
    l1: list[str]

    mut def __init__(self, l1: ?list[str]=None):
        self._ns = "http://example.com/foo"
        if l1 is not None:
            self.l1 = l1
        else:
            self.l1 = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['l1'] = yang.gdata.LeafList(self.l1)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_strs("l1"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_strs(n, "l1"))
        return foo__c1()


class root(yang.adata.MNode):
    c1: foo__c1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")))
        return root()

