import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__li1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

class foo__li1_entry(yang.adata.MNode):
    l1: str

    mut def __init__(self, l1: str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.l1)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__li1_entry:
        return foo__li1_entry(l1=n.get_str("l1"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__li1_entry:
        return foo__li1_entry(l1=yang.gdata.from_xml_str(n, "l1"))

class foo__li1(yang.adata.MNode):
    elements: list[foo__li1_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'li1'
        self.elements = elements

    mut def create(self, l1):
        for e in self.elements:
            match = True
            if e.l1 != l1:
                match = False
                continue
            if match:
                return e

        res = foo__li1_entry(l1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['l1'], elements, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__li1_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__li1_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__li1_entry]:
        res = []
        for node in nodes:
            res.append(foo__li1_entry.from_xml(node))
        return res


mut def from_json_path_foo__li1_element(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.ListElement:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__li1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.AbsentListElement(val.key_vals)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        for idx, key in enumerate(['l1']):
            children[key] = yang.gdata.Leaf("str", keys[idx])
        return yang.gdata.ListElement(keys, children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__li1(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['l1']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__li1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.AbsentListElement(element.key_vals))
        return yang.gdata.List(['l1'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['l1'], [from_json_path_foo__li1_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__li1_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:
    children = {}
    child_l1_full = jd.get('foo:l1')
    child_l1 = child_l1_full if child_l1_full is not None else jd.get('l1')
    if child_l1 is not None:
        children['l1'] = from_json_foo__li1__l1(child_l1)
    return yang.gdata.ListElement([str(child_l1 if child_l1 is not None else "")], children)

mut def from_json_foo__li1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_foo__li1_element(e))
    return yang.gdata.List(keys=['l1'], elements=elements, user_order=False, ns=None, prefix=None)

mut def to_json_foo__li1_element(n: yang.gdata.ListElement) -> dict[str, ?value]:
    children = {}
    child_l1 = n.children.get('l1')
    if child_l1 is not None:
        if isinstance(child_l1, yang.gdata.Leaf):
            children['l1'] = child_l1.val
    return children

mut def to_json_foo__li1(n: yang.gdata.List) -> list[dict[str, ?value]]:
    elements = []
    for e in n.elements:
        elements.append(to_json_foo__li1_element(e))
    return elements

mut def from_json_foo__ll1(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList(val)

class root(yang.adata.MNode):
    li1: foo__li1
    ll1: list[str]

    mut def __init__(self, li1: list[foo__li1_entry]=[], ll1: ?list[str]=None):
        self._ns = ""
        self.li1 = foo__li1(elements=li1)
        self.li1._parent = self
        if ll1 is not None:
            self.ll1 = ll1
        else:
            self.ll1 = []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _li1 = self.li1
        if _li1 is not None:
            children['li1'] = _li1.to_gdata()
        children['ll1'] = yang.gdata.LeafList(self.ll1, ns='http://example.com/foo')
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(li1=foo__li1.from_gdata(n.get_opt_list("li1")), ll1=n.get_opt_strs("ll1"))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(li1=foo__li1.from_xml(yang.gdata.get_xml_children(n, "li1", "http://example.com/foo")), ll1=yang.gdata.from_xml_opt_strs(n, "ll1", "http://example.com/foo"))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:li1':
            child = {'li1': from_json_path_foo__li1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'foo:ll1':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_li1 = jd.get('foo:li1')
    if child_li1 is not None and isinstance(child_li1, list):
        children['li1'] = from_json_foo__li1(child_li1)
    child_ll1 = jd.get('foo:ll1')
    if child_ll1 is not None and isinstance(child_ll1, list):
        children['ll1'] = from_json_foo__ll1(child_ll1)
    return yang.gdata.Container(children)

mut def to_json(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_li1 = n.children.get('li1')
    if child_li1 is not None:
        if isinstance(child_li1, yang.gdata.List):
            children['foo:li1'] = to_json_foo__li1(child_li1)
    child_ll1 = n.children.get('ll1')
    if child_ll1 is not None:
        if isinstance(child_ll1, yang.gdata.LeafList):
            children['foo:ll1'] = child_ll1.vals
    return children

schema_namespaces: set[str] = {
    "http://example.com/foo",
}
