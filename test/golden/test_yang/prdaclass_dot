import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_json_foo__ieee_802_3__ieee_802_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__ieee_802_3__ieee_802_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__ieee_802_3(yang.adata.MNode):
    ieee_802_3: ?str

    mut def __init__(self, ieee_802_3: ?str):
        self._ns = 'http://example.com/foo'
        self.ieee_802_3 = ieee_802_3

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            children['ieee-802.3'] = yang.gdata.Leaf('string', _ieee_802_3)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__ieee_802_3:
        if n is not None:
            return foo__ieee_802_3(ieee_802_3=n.get_opt_str('ieee-802.3'))
        return foo__ieee_802_3()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /ieee-802.3')
            res.append('{self_name} = foo__ieee_802_3()')
        leaves = []
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            leaves.append('{self_name}.ieee_802_3 = {repr(_ieee_802_3)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /ieee-802.3'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_foo__ieee_802_3(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.from_xml_opt_str(node, 'ieee-802.3')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_xml_foo__ieee_802_3__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__ieee_802_3(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'ieee-802.3':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__ieee_802_3(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__ieee_802_3(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.take_json_opt_str(jd, 'ieee-802.3')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_json_foo__ieee_802_3__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    ieee_802_3: foo__ieee_802_3

    mut def __init__(self, ieee_802_3: ?foo__ieee_802_3=None):
        self._ns = ''
        self.ieee_802_3 = ieee_802_3 if ieee_802_3 is not None else foo__ieee_802_3()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            children['ieee-802.3'] = _ieee_802_3.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(ieee_802_3=foo__ieee_802_3.from_gdata(n.get_opt_cnt('ieee-802.3')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            res.extend(_ieee_802_3.prsrc('{self_name}.ieee_802_3', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.from_xml_opt_cnt(node, 'ieee-802.3', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_xml_foo__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:ieee-802.3':
            child = {'ieee-802.3': from_json_path_foo__ieee_802_3(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.take_json_opt_cnt(jd, 'ieee-802.3', 'foo')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_json_foo__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
