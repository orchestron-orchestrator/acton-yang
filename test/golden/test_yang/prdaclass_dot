import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__ieee_802_3__ieee_802_3(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__ieee_802_3(yang.adata.MNode):
    ieee_802_3: ?str

    mut def __init__(self, ieee_802_3: ?str):
        self._ns = 'http://example.com/foo'
        self.ieee_802_3 = ieee_802_3

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            children['ieee-802.3'] = yang.gdata.Leaf('string', _ieee_802_3)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__ieee_802_3:
        if n != None:
            return foo__ieee_802_3(ieee_802_3=n.get_opt_str('ieee-802.3'))
        return foo__ieee_802_3()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__ieee_802_3:
        if n != None:
            return foo__ieee_802_3(ieee_802_3=yang.gdata.from_xml_opt_str(n, 'ieee-802.3'))
        return foo__ieee_802_3()


mut def from_json_path_foo__ieee_802_3(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'ieee-802.3':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__ieee_802_3(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__ieee_802_3(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.take_json_opt_str(jd, 'ieee-802.3')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_json_foo__ieee_802_3__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    ieee_802_3: foo__ieee_802_3

    mut def __init__(self, ieee_802_3: ?foo__ieee_802_3=None):
        self._ns = ''
        self.ieee_802_3 = ieee_802_3 if ieee_802_3 is not None else foo__ieee_802_3()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ieee_802_3 = self.ieee_802_3
        if _ieee_802_3 is not None:
            children['ieee-802.3'] = _ieee_802_3.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(ieee_802_3=foo__ieee_802_3.from_gdata(n.get_opt_container('ieee-802.3')))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(ieee_802_3=foo__ieee_802_3.from_xml(yang.gdata.get_xml_opt_child(n, 'ieee-802.3', 'http://example.com/foo')))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:ieee-802.3':
            child = {'ieee-802.3': from_json_path_foo__ieee_802_3(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_ieee_802_3 = yang.gdata.take_json_opt_cnt(jd, 'ieee-802.3', 'foo')
    yang.gdata.maybe_add(children, 'ieee-802.3', from_json_foo__ieee_802_3, child_ieee_802_3)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
