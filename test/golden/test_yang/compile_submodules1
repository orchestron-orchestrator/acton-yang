import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_str("l1"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__c1()


class foo__c2(yang.adata.MNode):
    l2: ?str

    mut def __init__(self, l2: ?str):
        self._ns = "http://example.com/foo"
        self.l2 = l2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2 = self.l2
        if _l2 is not None:
            children['l2'] = yang.gdata.Leaf('string', _l2)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c2:
        if n != None:
            return foo__c2(l2=n.get_opt_str("l2"))
        return foo__c2()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c2:
        if n != None:
            return foo__c2(l2=yang.gdata.from_xml_opt_str(n, "l2"))
        return foo__c2()


class root(yang.adata.MNode):
    c1: foo__c1
    c2: foo__c2

    mut def __init__(self, c1: ?foo__c1=None, c2: ?foo__c2=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self
        if c2 is not None:
            self.c2 = c2
        else:
            self.c2 = foo__c2()
        self_c2 = self.c2
        if self_c2 is not None:
            self_c2._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        _c2 = self.c2
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        if _c2 is not None:
            children['c2'] = _c2.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")), c2=foo__c2.from_gdata(n.get_opt_container("c2")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1")), c2=foo__c2.from_xml(yang.gdata.get_xml_opt_child(n, "c2")))
        return root()

