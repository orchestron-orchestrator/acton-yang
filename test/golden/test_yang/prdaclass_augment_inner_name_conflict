mut def from_json_base__c1__base_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_base__c1__base_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1__base_c2(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = 'http://example.com/base'
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1__base_c2:
        if n is not None:
            return base__c1__base_c2(foo=n.get_opt_str('foo'))
        return base__c1__base_c2()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1/base:c2')
            res.append('{self_name} = base__c1__base_c2()')
        leaves = []
        _foo = self.foo
        if _foo is not None:
            leaves.append('{self_name}.foo = {repr(_foo)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1/base:c2'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_base__c1__base_c2(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_foo = yang.gdata.from_xml_opt_str(node, 'foo')
    yang.gdata.maybe_add(children, 'foo', from_xml_base__c1__base_c2__foo, child_foo)
    return yang.gdata.Container(children)

mut def from_json_path_base__c1__base_c2(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1__base_c2(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1__base_c2(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo = yang.gdata.take_json_opt_str(jd, 'foo')
    yang.gdata.maybe_add(children, 'foo', from_json_base__c1__base_c2__foo, child_foo)
    return yang.gdata.Container(children)

mut def from_json_base__c1__foo_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_base__c1__foo_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1__foo_c2(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = 'http://example.com/foo'
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1__foo_c2:
        if n is not None:
            return base__c1__foo_c2(foo=n.get_opt_str('foo'))
        return base__c1__foo_c2()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1/foo:c2')
            res.append('{self_name} = base__c1__foo_c2()')
        leaves = []
        _foo = self.foo
        if _foo is not None:
            leaves.append('{self_name}.foo = {repr(_foo)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1/foo:c2'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_base__c1__foo_c2(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_foo = yang.gdata.from_xml_opt_str(node, 'foo')
    yang.gdata.maybe_add(children, 'foo', from_xml_base__c1__foo_c2__foo, child_foo)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_base__c1__foo_c2(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1__foo_c2(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1__foo_c2(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo = yang.gdata.take_json_opt_str(jd, 'foo')
    yang.gdata.maybe_add(children, 'foo', from_json_base__c1__foo_c2__foo, child_foo)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

class base__c1(yang.adata.MNode):
    base_c2: base__c1__base_c2
    foo_c2: base__c1__foo_c2

    mut def __init__(self, base_c2: ?base__c1__base_c2=None, foo_c2: ?base__c1__foo_c2=None):
        self._ns = 'http://example.com/base'
        self.base_c2 = base_c2 if base_c2 is not None else base__c1__base_c2()
        self.foo_c2 = foo_c2 if foo_c2 is not None else base__c1__foo_c2()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _base_c2 = self.base_c2
        if _base_c2 is not None:
            children['base:c2'] = _base_c2.to_gdata()
        _foo_c2 = self.foo_c2
        if _foo_c2 is not None:
            children['foo:c2'] = _foo_c2.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/base', module='base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n is not None:
            return base__c1(base_c2=base__c1__base_c2.from_gdata(n.get_opt_cnt('base:c2')), foo_c2=base__c1__foo_c2.from_gdata(n.get_opt_cnt('foo:c2')))
        return base__c1()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1')
            res.append('{self_name} = base__c1()')
        leaves = []
        _base_c2 = self.base_c2
        if _base_c2 is not None:
            res.extend(_base_c2.prsrc('{self_name}.base_c2', False).splitlines())
        _foo_c2 = self.foo_c2
        if _foo_c2 is not None:
            res.extend(_foo_c2.prsrc('{self_name}.foo_c2', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_base__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_base_c2 = yang.gdata.from_xml_opt_cnt(node, 'c2')
    yang.gdata.maybe_add(children, 'base:c2', from_xml_base__c1__base_c2, child_base_c2)
    child_foo_c2 = yang.gdata.from_xml_opt_cnt(node, 'c2', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'foo:c2', from_xml_base__c1__foo_c2, child_foo_c2)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')

mut def from_json_path_base__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'c2':
            child = {'base:c2': from_json_path_base__c1__base_c2(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/base', module='base')
        if point == 'foo:c2':
            child = {'foo:c2': from_json_path_base__c1__foo_c2(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/base', module='base')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_base_c2 = yang.gdata.take_json_opt_cnt(jd, 'c2')
    yang.gdata.maybe_add(children, 'base:c2', from_json_base__c1__base_c2, child_base_c2)
    child_foo_c2 = yang.gdata.take_json_opt_cnt(jd, 'c2', 'foo')
    yang.gdata.maybe_add(children, 'foo:c2', from_json_base__c1__foo_c2, child_foo_c2)
    return yang.gdata.Container(children, ns='http://example.com/base', module='base')

class root(yang.adata.MNode):
    c1: base__c1

    mut def __init__(self, c1: ?base__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else base__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(c1=base__c1.from_gdata(n.get_opt_cnt('c1')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _c1 = self.c1
        if _c1 is not None:
            res.extend(_c1.prsrc('{self_name}.c1', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_root(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.from_xml_opt_cnt(node, 'c1', 'http://example.com/base')
    yang.gdata.maybe_add(children, 'c1', from_xml_base__c1, child_c1)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path_root(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'base:c1':
            child = {'c1': from_json_path_base__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_root(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_root(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.take_json_opt_cnt(jd, 'c1', 'base')
    yang.gdata.maybe_add(children, 'c1', from_json_base__c1, child_c1)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)
