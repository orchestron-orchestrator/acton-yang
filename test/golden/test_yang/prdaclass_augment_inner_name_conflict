mut def from_json_base__c1__base_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1__base_c2(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = 'http://example.com/base'
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1__base_c2:
        if n != None:
            return base__c1__base_c2(foo=n.get_opt_str('foo'))
        return base__c1__base_c2()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> base__c1__base_c2:
        if n != None:
            return base__c1__base_c2(foo=yang.gdata.from_xml_opt_str(n, 'foo'))
        return base__c1__base_c2()


mut def from_json_path_base__c1__base_c2(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'base:foo' or point == 'foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1__base_c2(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1__base_c2(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_full = jd.get('base:foo')
    child_foo = child_foo_full if child_foo_full is not None else jd.get('foo')
    if child_foo is not None:
        children['foo'] = from_json_base__c1__base_c2__foo(child_foo)
    return yang.gdata.Container(children)

mut def to_json_base__c1__base_c2(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_foo = n.children.get('foo')
    if child_foo is not None:
        if isinstance(child_foo, yang.gdata.Leaf):
            children['foo'] = child_foo.val
    return children

mut def from_json_base__c1__foo_c2__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class base__c1__foo_c2(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = 'http://example.com/foo'
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1__foo_c2:
        if n != None:
            return base__c1__foo_c2(foo=n.get_opt_str('foo'))
        return base__c1__foo_c2()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> base__c1__foo_c2:
        if n != None:
            return base__c1__foo_c2(foo=yang.gdata.from_xml_opt_str(n, 'foo'))
        return base__c1__foo_c2()


mut def from_json_path_base__c1__foo_c2(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:foo' or point == 'foo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1__foo_c2(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1__foo_c2(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_foo_full = jd.get('foo:foo')
    child_foo = child_foo_full if child_foo_full is not None else jd.get('foo')
    if child_foo is not None:
        children['foo'] = from_json_base__c1__foo_c2__foo(child_foo)
    return yang.gdata.Container(children)

mut def to_json_base__c1__foo_c2(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_foo = n.children.get('foo')
    if child_foo is not None:
        if isinstance(child_foo, yang.gdata.Leaf):
            children['foo'] = child_foo.val
    return children

class base__c1(yang.adata.MNode):
    base_c2: base__c1__base_c2
    foo_c2: base__c1__foo_c2

    mut def __init__(self, base_c2: ?base__c1__base_c2=None, foo_c2: ?base__c1__foo_c2=None):
        self._ns = 'http://example.com/base'
        self.base_c2 = base_c2 if base_c2 is not None else base__c1__base_c2()
        self.foo_c2 = foo_c2 if foo_c2 is not None else base__c1__foo_c2()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _base_c2 = self.base_c2
        if _base_c2 is not None:
            children['base:c2'] = _base_c2.to_gdata()
        _foo_c2 = self.foo_c2
        if _foo_c2 is not None:
            children['foo:c2'] = _foo_c2.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/base')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> base__c1:
        if n != None:
            return base__c1(base_c2=base__c1__base_c2.from_gdata(n.get_opt_container('base:c2')), foo_c2=base__c1__foo_c2.from_gdata(n.get_opt_container('foo:c2')))
        return base__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> base__c1:
        if n != None:
            return base__c1(base_c2=base__c1__base_c2.from_xml(yang.gdata.get_xml_opt_child(n, 'c2')), foo_c2=base__c1__foo_c2.from_xml(yang.gdata.get_xml_opt_child(n, 'c2', 'http://example.com/foo')))
        return base__c1()


mut def from_json_path_base__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'base:c2' or point == 'c2':
            child = {'c2': from_json_path_base__c1__base_c2(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'foo:c2':
            child = {'c2': from_json_path_base__c1__foo_c2(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_base__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_base__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_base_c2_full = jd.get('base:c2')
    child_base_c2 = child_base_c2_full if child_base_c2_full is not None else jd.get('c2')
    if child_base_c2 is not None and isinstance(child_base_c2, dict):
        children['base:c2'] = from_json_base__c1__base_c2(child_base_c2)
    child_foo_c2 = jd.get('foo:c2')
    if child_foo_c2 is not None and isinstance(child_foo_c2, dict):
        children['foo:c2'] = from_json_base__c1__foo_c2(child_foo_c2)
    return yang.gdata.Container(children)

mut def to_json_base__c1(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_base_c2 = n.children.get('base:c2')
    if child_base_c2 is not None:
        if isinstance(child_base_c2, yang.gdata.Container):
            children['c2'] = to_json_base__c1__base_c2(child_base_c2)
    child_foo_c2 = n.children.get('foo:c2')
    if child_foo_c2 is not None:
        if isinstance(child_foo_c2, yang.gdata.Container):
            children['foo:c2'] = to_json_base__c1__foo_c2(child_foo_c2)
    return children

class root(yang.adata.MNode):
    c1: base__c1

    mut def __init__(self, c1: ?base__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else base__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=base__c1.from_gdata(n.get_opt_container('c1')))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=base__c1.from_xml(yang.gdata.get_xml_opt_child(n, 'c1', 'http://example.com/base')))
        return root()


mut def from_json_path_root(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'base:c1':
            child = {'c1': from_json_path_base__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_root(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_root(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = jd.get('base:c1')
    if child_c1 is not None and isinstance(child_c1, dict):
        children['c1'] = from_json_base__c1(child_c1)
    return yang.gdata.Container(children)

mut def to_json_root(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_c1 = n.children.get('c1')
    if child_c1 is not None:
        if isinstance(child_c1, yang.gdata.Container):
            children['base:c1'] = to_json_base__c1(child_c1)
    return children
