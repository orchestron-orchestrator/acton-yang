import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__l1__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__l1__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__l1__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__l1__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__l1__bar__hi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__l1__bar__hi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__l1__bar(yang.adata.MNode):
    hi: ?str

    mut def __init__(self, hi: ?str):
        self._ns = 'http://example.com/foo'
        self.hi = hi

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hi = self.hi
        if _hi is not None:
            children['hi'] = yang.gdata.Leaf('string', _hi)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__l1__bar:
        if n != None:
            return foo__l1__bar(hi=n.get_opt_str('hi'))
        raise ValueError('Missing required subtree foo__l1__bar')

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = foo__l1__bar()')
        _hi = self.hi
        if _hi is not None:
            res.append(f'{self_name}.hi = {repr(_hi)}')
        return '\n'.join(res)


mut def from_xml_foo__l1__bar(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hi = yang.gdata.from_xml_opt_str(node, 'hi')
    yang.gdata.maybe_add(children, 'hi', from_xml_foo__l1__bar__hi, child_hi)
    return yang.gdata.Container(children)

mut def from_json_path_foo__l1__bar(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'hi':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__l1__bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__l1__bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_hi = yang.gdata.take_json_opt_str(jd, 'hi')
    yang.gdata.maybe_add(children, 'hi', from_json_foo__l1__bar__hi, child_hi)
    return yang.gdata.Container(children)

class foo__l1_entry(yang.adata.MNode):
    name: str
    id: ?str
    bar: foo__l1__bar

    mut def __init__(self, name: str, id: ?str, bar: ?foo__l1__bar=None):
        self._ns = 'http://example.com/foo'
        self.name = name
        self.id = id
        self.bar = bar if bar is not None else foo__l1__bar()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('string', _id)
        _bar = self.bar
        if _bar is not None:
            children['bar'] = _bar.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__l1_entry:
        return foo__l1_entry(name=n.get_str('name'), id=n.get_opt_str('id'), bar=foo__l1__bar.from_gdata(n.get_opt_container('bar')))

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = foo__l1({repr(self.name)})')
        _id = self.id
        if _id is not None:
            res.append(f'{self_name}.id = {repr(_id)}')
        _bar = self.bar
        if _bar is not None:
            res.extend(_bar.prsrc(f'{self_name}.bar', False).splitlines())
        return '\n'.join(res)

class foo__l1(yang.adata.MNode):
    elements: list[foo__l1_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'l1'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = foo__l1_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__l1_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__l1_entry.from_gdata(e))
        return res


mut def from_xml_foo__l1_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_foo__l1__name, child_name)
    child_id = yang.gdata.from_xml_opt_str(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_foo__l1__id, child_id)
    child_bar = yang.gdata.from_xml_opt_cnt(node, 'bar')
    yang.gdata.maybe_add(children, 'bar', from_xml_foo__l1__bar, child_bar)
    return yang.gdata.Container(children)

mut def from_xml_foo__l1(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_foo__l1_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__l1_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__l1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_foo__l1__name(keys[0])
        if point == 'id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'bar':
            children['bar'] = from_json_path_foo__l1__bar(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__l1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__l1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_foo__l1_element(jd, path, op)], ns='http://example.com/foo', module='foo')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__l1_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_foo__l1__name, child_name)
    child_id = yang.gdata.take_json_opt_str(jd, 'id')
    yang.gdata.maybe_add(children, 'id', from_json_foo__l1__id, child_id)
    child_bar = yang.gdata.take_json_opt_cnt(jd, 'bar')
    yang.gdata.maybe_add(children, 'bar', from_json_foo__l1__bar, child_bar)
    return yang.gdata.Container(children)

mut def from_json_foo__l1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_foo__l1_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    l1: foo__l1

    mut def __init__(self, l1: list[foo__l1_entry]=[]):
        self._ns = ''
        self.l1 = foo__l1(elements=l1)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = _l1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(l1=foo__l1.from_gdata(n.get_opt_list('l1')))
        return root()

    def prsrc(self, self_name='ad', top=True):
        res = []
        if top:
            res.append(f'{self_name} = root()')
        _l1 = self.l1
        for _element in _l1.elements:
            list_elem = f'l1_element = {self_name}.l1.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc(f'l1_element', False).splitlines())
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.from_xml_opt_list(node, 'l1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__l1, child_l1)
    return yang.gdata.Container(children)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:l1':
            child = {'l1': from_json_path_foo__l1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.take_json_opt_list(jd, 'l1', 'foo')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__l1, child_l1)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
