import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_json_foo__c1__l1__k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__l1__k1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c1__l1__k2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_foo__c1__l1__k2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_foo__c1__l1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__c1__l1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__c1__l1_entry(yang.adata.MNode):
    k1: str
    k2: value
    l1: str

    mut def __init__(self, k1: str, k2: value, l1: str):
        self._ns = 'http://example.com/foo'
        self.k1 = k1
        self.k2 = k2
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _k1 = self.k1
        if _k1 is not None:
            children['k1'] = yang.gdata.Leaf('string', _k1)
        _k2 = self.k2
        if _k2 is not None:
            children['k2'] = yang.gdata.Leaf('union', _k2)
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c1__l1_entry:
        return foo__c1__l1_entry(k1=n.get_str('k1'), k2=n.get_value('k2'), l1=n.get_str('l1'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1/l1')
            res.append('{self_name} = foo__c1__l1({repr(self.k1)}, {repr(self.k2)}, {repr(self.l1)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1/l1'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)

class foo__c1__l1(yang.adata.MNode):
    elements: list[foo__c1__l1_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'l1'
        self.elements = elements

    mut def create(self, k1, k2, l1):
        for e in self.elements:
            match = True
            if e.k1 != k1:
                match = False
                continue
            e_k2 = e.k2
            if isinstance(e_k2, int) and isinstance(k2, int):
                if e_k2 != k2:
                    match = False
                    continue
            e_k2 = e.k2
            if isinstance(e_k2, str) and isinstance(k2, str):
                if e_k2 != k2:
                    match = False
                    continue
            if match:
                return e

        res = foo__c1__l1_entry(k1, k2, l1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['k1', 'k2'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__c1__l1_entry]:
        if n is not None:
            return [foo__c1__l1_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_foo__c1__l1_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_k1 = yang.gdata.from_xml_str(node, 'k1')
    yang.gdata.maybe_add(children, 'k1', from_xml_foo__c1__l1__k1, child_k1)
    child_k2 = yang.gdata.from_xml_value(node, 'k2')
    yang.gdata.maybe_add(children, 'k2', from_xml_foo__c1__l1__k2, child_k2)
    child_l1 = yang.gdata.from_xml_str(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__c1__l1__l1, child_l1)
    return yang.gdata.Container(children)

mut def from_xml_foo__c1__l1(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_foo__c1__l1_element(e) for e in nodes]
    return yang.gdata.List(keys=['k1', 'k2'], elements=elements)

mut def from_json_path_foo__c1__l1_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__c1__l1_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['k1', 'k2']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['k1'] = from_json_foo__c1__l1__k1(keys[0])
        children['k2'] = from_json_foo__c1__l1__k2(keys[1])
        if point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__c1__l1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['k1', 'k2']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__c1__l1_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['k1', 'k2'])))
        return yang.gdata.List(['k1', 'k2'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['k1', 'k2'], [from_json_path_foo__c1__l1_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__c1__l1_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_k1 = yang.gdata.take_json_str(jd, 'k1')
    yang.gdata.maybe_add(children, 'k1', from_json_foo__c1__l1__k1, child_k1)
    child_k2 = yang.gdata.take_json_value(jd, 'k2')
    yang.gdata.maybe_add(children, 'k2', from_json_foo__c1__l1__k2, child_k2)
    child_l1 = yang.gdata.take_json_str(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__c1__l1__l1, child_l1)
    return yang.gdata.Container(children)

mut def from_json_foo__c1__l1(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_foo__c1__l1_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['k1', 'k2'], elements=elements)

class foo__c1(yang.adata.MNode):
    l1: foo__c1__l1

    mut def __init__(self, l1: list[foo__c1__l1_entry]=[]):
        self._ns = 'http://example.com/foo'
        self.l1 = foo__c1__l1(elements=l1)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = _l1.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n is not None:
            return foo__c1(l1=foo__c1__l1.from_gdata(n.get_opt_list('l1')))
        return foo__c1()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /c1')
            res.append('{self_name} = foo__c1()')
        leaves = []
        _l1 = self.l1
        for _element in _l1.elements:
            res.append('')
            res.append("# List /c1/l1 element: {_element.to_gdata().key_str(['k1', 'k2'])}")
            list_elem = 'l1_element = {self_name}.l1.create({repr(_element.k1)}, {repr(_element.k2)}, {repr(_element.l1)})'
            res.append(list_elem)
            res.extend(_element.prsrc('l1_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /c1'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_foo__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.from_xml_opt_list(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__c1__l1, child_l1)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            child = {'l1': from_json_path_foo__c1__l1(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/foo', module='foo')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.take_json_opt_list(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__c1__l1, child_l1)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    c1: foo__c1

    mut def __init__(self, c1: ?foo__c1=None):
        self._ns = ''
        self.c1 = c1 if c1 is not None else foo__c1()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(c1=foo__c1.from_gdata(n.get_opt_cnt('c1')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _c1 = self.c1
        if _c1 is not None:
            res.extend(_c1.prsrc('{self_name}.c1', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.from_xml_opt_cnt(node, 'c1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'c1', from_xml_foo__c1, child_c1)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:c1':
            child = {'c1': from_json_path_foo__c1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c1 = yang.gdata.take_json_opt_cnt(jd, 'c1', 'foo')
    yang.gdata.maybe_add(children, 'c1', from_json_foo__c1, child_c1)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
