mut def from_json_foo__c__li__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c__li__foo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__c__li__bar__man(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__c__li__bar(yang.adata.MNode):
    man: str

    mut def __init__(self, man: str):
        self._ns = 'http://example.com/foo'
        self.man = man

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _man = self.man
        if _man is not None:
            children['man'] = yang.gdata.Leaf('string', _man)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c__li__bar:
        if n != None:
            return foo__c__li__bar(man=n.get_str('man'))
        raise ValueError('Missing required subtree foo__c__li__bar')

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c__li__bar:
        if n != None:
            return foo__c__li__bar(man=yang.gdata.from_xml_str(n, 'man'))
        raise ValueError('Missing required subtree foo__c__li__bar')


mut def from_json_path_foo__c__li__bar(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'man':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__c__li__bar(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__c__li__bar(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_man = yang.gdata.take_json_str(jd, 'man')
    yang.gdata.maybe_add(children, 'man', from_json_foo__c__li__bar__man, child_man)
    return yang.gdata.Container(children)

class foo__c__li_entry(yang.adata.MNode):
    name: str
    foo: str
    bar: foo__c__li__bar

    mut def __init__(self, name: str, bar: foo__c__li__bar, foo: ?str=None):
        self._ns = 'http://example.com/foo'
        self.name = name
        self.foo = foo if foo is not None else "banana"
        self.bar = bar

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        _bar = self.bar
        if _bar is not None:
            children['bar'] = _bar.to_gdata()
        return yang.gdata.Container(children, [yang.gdata.yang_str(self.name)])

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c__li_entry:
        return foo__c__li_entry(name=n.get_str('name'), foo=n.get_opt_str('foo'), bar=foo__c__li__bar.from_gdata(n.get_container('bar')))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__c__li_entry:
        return foo__c__li_entry(name=yang.gdata.from_xml_str(n, 'name'), foo=yang.gdata.from_xml_opt_str(n, 'foo'), bar=foo__c__li__bar.from_xml(yang.gdata.get_xml_child(n, 'bar')))

class foo__c__li(yang.adata.MNode):
    elements: list[foo__c__li_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'li'
        self.elements = elements

    mut def create(self, name, bar):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = foo__c__li_entry(name, bar)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__c__li_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__c__li_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__c__li_entry]:
        res = []
        for node in nodes:
            res.append(foo__c__li_entry.from_xml(node))
        return res


mut def from_json_path_foo__c__li_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__c__li_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key)
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_foo__c__li__name(keys[0])
        if point == 'foo':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'bar':
            children['bar'] = from_json_path_foo__c__li__bar(jd, rest_path, op)
        return yang.gdata.Container(children, keys)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__c__li(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__c__li_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key))
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_foo__c__li_element(jd, path, op)], ns='http://example.com/foo', module='foo')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__c__li_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_foo__c__li__name, child_name)
    child_foo = yang.gdata.take_json_str(jd, 'foo')
    yang.gdata.maybe_add(children, 'foo', from_json_foo__c__li__foo, child_foo)
    child_bar = yang.gdata.take_json_cnt(jd, 'bar')
    yang.gdata.maybe_add(children, 'bar', from_json_foo__c__li__bar, child_bar)
    return yang.gdata.Container(children, [yang.gdata.yang_str(child_name)])

mut def from_json_foo__c__li(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_foo__c__li_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/foo', module='foo')
