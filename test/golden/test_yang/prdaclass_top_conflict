import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class bar__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/bar"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/bar')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> bar__c1:
        if n != None:
            return bar__c1(l1=n.get_opt_str("l1"))
        return bar__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> bar__c1:
        if n != None:
            return bar__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return bar__c1()


class foo__c1(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_str("l1"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__c1()


class root(yang.adata.MNode):
    bar_c1: bar__c1
    foo_c1: foo__c1

    mut def __init__(self, bar_c1: ?bar__c1=None, foo_c1: ?foo__c1=None):
        self._ns = ""
        if bar_c1 is not None:
            self.bar_c1 = bar_c1
        else:
            self.bar_c1 = bar__c1()
        self_bar_c1 = self.bar_c1
        if self_bar_c1 is not None:
            self_bar_c1._parent = self
        if foo_c1 is not None:
            self.foo_c1 = foo_c1
        else:
            self.foo_c1 = foo__c1()
        self_foo_c1 = self.foo_c1
        if self_foo_c1 is not None:
            self_foo_c1._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bar_c1 = self.bar_c1
        _foo_c1 = self.foo_c1
        if _bar_c1 is not None:
            children['bar:c1'] = _bar_c1.to_gdata()
        if _foo_c1 is not None:
            children['foo:c1'] = _foo_c1.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(bar_c1=bar__c1.from_gdata(n.get_opt_container("bar:c1")), foo_c1=foo__c1.from_gdata(n.get_opt_container("foo:c1")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(bar_c1=bar__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/bar")), foo_c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")))
        return root()

