import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_json_main_module__main_container__main_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__main_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_main_module__main_container__sub_group_container__sub_group_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__sub_group_container__sub_group_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class main_module__main_container__sub_group_container(yang.adata.MNode):
    sub_group_leaf: str

    mut def __init__(self, sub_group_leaf: ?str=None):
        self._ns = 'http://example.com/main'
        self.sub_group_leaf = sub_group_leaf if sub_group_leaf is not None else "from-submodule"

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _sub_group_leaf = self.sub_group_leaf
        if _sub_group_leaf is not None:
            children['sub-group-leaf'] = yang.gdata.Leaf('string', _sub_group_leaf)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> main_module__main_container__sub_group_container:
        if n is not None:
            return main_module__main_container__sub_group_container(sub_group_leaf=n.get_opt_str('sub-group-leaf'))
        return main_module__main_container__sub_group_container()

    def copy(self):
        """Create a deep copy of this adata object"""
        return main_module__main_container__sub_group_container.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /main-container/sub-group-container')
            res.append('{self_name} = main_module__main_container__sub_group_container()')
        leaves = []
        _sub_group_leaf = self.sub_group_leaf
        if _sub_group_leaf is not None:
            leaves.append('{self_name}.sub_group_leaf = {repr(_sub_group_leaf)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /main-container/sub-group-container'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False, root_path=['main-module:main-container', 'sub-group-container'])


mut def from_xml_main_module__main_container__sub_group_container(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_sub_group_leaf = yang.gdata.from_xml_opt_str(node, 'sub-group-leaf')
    yang.gdata.maybe_add(children, 'sub-group-leaf', from_xml_main_module__main_container__sub_group_container__sub_group_leaf, child_sub_group_leaf)
    return yang.gdata.Container(children)

mut def from_json_path_main_module__main_container__sub_group_container(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'sub-group-leaf':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_main_module__main_container__sub_group_container(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_main_module__main_container__sub_group_container(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_sub_group_leaf = yang.gdata.take_json_opt_str(jd, 'sub-group-leaf')
    yang.gdata.maybe_add(children, 'sub-group-leaf', from_json_main_module__main_container__sub_group_container__sub_group_leaf, child_sub_group_leaf)
    return yang.gdata.Container(children)

mut def from_json_main_module__main_container__sub_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__sub_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_main_module__main_container__sub_list__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__sub_list__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_main_module__main_container__sub_list__sub_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__sub_list__sub_value(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_main_module__main_container__sub_list__ref_to_main(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_main_module__main_container__sub_list__ref_to_main(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class main_module__main_container__sub_list_entry(yang.adata.MNode):
    name: str
    sub_value: ?str
    ref_to_main: ?str

    mut def __init__(self, name: str, sub_value: ?str, ref_to_main: ?str):
        self._ns = 'http://example.com/main'
        self.name = name
        self.sub_value = sub_value
        self.ref_to_main = ref_to_main

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _sub_value = self.sub_value
        if _sub_value is not None:
            children['sub-value'] = yang.gdata.Leaf('string', _sub_value)
        _ref_to_main = self.ref_to_main
        if _ref_to_main is not None:
            children['ref-to-main'] = yang.gdata.Leaf('leafref', _ref_to_main)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> main_module__main_container__sub_list_entry:
        return main_module__main_container__sub_list_entry(name=n.get_str('name'), sub_value=n.get_opt_str('sub-value'), ref_to_main=n.get_opt_str('ref-to-main'))

    def copy(self):
        """Create a deep copy of this adata object"""
        return main_module__main_container__sub_list_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /main-container/sub-list')
            res.append('{self_name} = main_module__main_container__sub_list({repr(self.name)})')
        leaves = []
        _sub_value = self.sub_value
        if _sub_value is not None:
            leaves.append('{self_name}.sub_value = {repr(_sub_value)}')
        _ref_to_main = self.ref_to_main
        if _ref_to_main is not None:
            leaves.append('{self_name}.ref_to_main = {repr(_ref_to_main)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /main-container/sub-list'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False, root_path=['main-module:main-container', 'sub-list'])

class main_module__main_container__sub_list(yang.adata.MNode):
    elements: list[main_module__main_container__sub_list_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/main'
        self._name = 'sub-list'
        self.elements = elements

    mut def create(self, name):
        for e in self:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = main_module__main_container__sub_list_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[main_module__main_container__sub_list_entry]:
        if n is not None:
            return [main_module__main_container__sub_list_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return main_module__main_container__sub_list(elements=copied_elements)

extension main_module__main_container__sub_list(Iterable[main_module__main_container__sub_list_entry]):
    def __iter__(self) -> Iterator[main_module__main_container__sub_list_entry]:
        return self.elements.__iter__()

mut def from_xml_main_module__main_container__sub_list_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_main_module__main_container__sub_list__name, child_name)
    child_sub_value = yang.gdata.from_xml_opt_str(node, 'sub-value')
    yang.gdata.maybe_add(children, 'sub-value', from_xml_main_module__main_container__sub_list__sub_value, child_sub_value)
    child_ref_to_main = yang.gdata.from_xml_opt_str(node, 'ref-to-main')
    yang.gdata.maybe_add(children, 'ref-to-main', from_xml_main_module__main_container__sub_list__ref_to_main, child_ref_to_main)
    return yang.gdata.Container(children)

mut def from_xml_main_module__main_container__sub_list(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_main_module__main_container__sub_list_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_main_module__main_container__sub_list_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_main_module__main_container__sub_list_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_main_module__main_container__sub_list__name(keys[0])
        if point == 'sub-value':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ref-to-main':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_main_module__main_container__sub_list(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_main_module__main_container__sub_list_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_main_module__main_container__sub_list_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_main_module__main_container__sub_list_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_main_module__main_container__sub_list__name, child_name)
    child_sub_value = yang.gdata.take_json_opt_str(jd, 'sub-value')
    yang.gdata.maybe_add(children, 'sub-value', from_json_main_module__main_container__sub_list__sub_value, child_sub_value)
    child_ref_to_main = yang.gdata.take_json_opt_str(jd, 'ref-to-main')
    yang.gdata.maybe_add(children, 'ref-to-main', from_json_main_module__main_container__sub_list__ref_to_main, child_ref_to_main)
    return yang.gdata.Container(children)

mut def from_json_main_module__main_container__sub_list(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_main_module__main_container__sub_list_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_main_module__main_container__group_container__group_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__group_container__group_leaf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_main_module__main_container__group_container__augmented_in_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_main_module__main_container__group_container__augmented_in_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class main_module__main_container__group_container(yang.adata.MNode):
    group_leaf: str
    augmented_in_group: ?str

    mut def __init__(self, group_leaf: ?str=None, augmented_in_group: ?str):
        self._ns = 'http://example.com/main'
        self.group_leaf = group_leaf if group_leaf is not None else "refined-default"
        self.augmented_in_group = augmented_in_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_leaf = self.group_leaf
        if _group_leaf is not None:
            children['group-leaf'] = yang.gdata.Leaf('string', _group_leaf)
        _augmented_in_group = self.augmented_in_group
        if _augmented_in_group is not None:
            children['augmented-in-group'] = yang.gdata.Leaf('string', _augmented_in_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> main_module__main_container__group_container:
        if n is not None:
            return main_module__main_container__group_container(group_leaf=n.get_opt_str('group-leaf'), augmented_in_group=n.get_opt_str('augmented-in-group'))
        return main_module__main_container__group_container()

    def copy(self):
        """Create a deep copy of this adata object"""
        return main_module__main_container__group_container.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /main-container/group-container')
            res.append('{self_name} = main_module__main_container__group_container()')
        leaves = []
        _group_leaf = self.group_leaf
        if _group_leaf is not None:
            leaves.append('{self_name}.group_leaf = {repr(_group_leaf)}')
        _augmented_in_group = self.augmented_in_group
        if _augmented_in_group is not None:
            leaves.append('{self_name}.augmented_in_group = {repr(_augmented_in_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /main-container/group-container'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False, root_path=['main-module:main-container', 'group-container'])


mut def from_xml_main_module__main_container__group_container(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group_leaf = yang.gdata.from_xml_opt_str(node, 'group-leaf')
    yang.gdata.maybe_add(children, 'group-leaf', from_xml_main_module__main_container__group_container__group_leaf, child_group_leaf)
    child_augmented_in_group = yang.gdata.from_xml_opt_str(node, 'augmented-in-group')
    yang.gdata.maybe_add(children, 'augmented-in-group', from_xml_main_module__main_container__group_container__augmented_in_group, child_augmented_in_group)
    return yang.gdata.Container(children)

mut def from_json_path_main_module__main_container__group_container(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'group-leaf':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'augmented-in-group':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_main_module__main_container__group_container(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_main_module__main_container__group_container(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_group_leaf = yang.gdata.take_json_opt_str(jd, 'group-leaf')
    yang.gdata.maybe_add(children, 'group-leaf', from_json_main_module__main_container__group_container__group_leaf, child_group_leaf)
    child_augmented_in_group = yang.gdata.take_json_opt_str(jd, 'augmented-in-group')
    yang.gdata.maybe_add(children, 'augmented-in-group', from_json_main_module__main_container__group_container__augmented_in_group, child_augmented_in_group)
    return yang.gdata.Container(children)

class main_module__main_container(yang.adata.MNode):
    main_leaf: ?str
    sub_group_container: main_module__main_container__sub_group_container
    sub_leaf: ?str
    sub_list: main_module__main_container__sub_list
    group_container: main_module__main_container__group_container

    mut def __init__(self, main_leaf: ?str, sub_group_container: ?main_module__main_container__sub_group_container=None, sub_leaf: ?str, sub_list: list[main_module__main_container__sub_list_entry]=[], group_container: ?main_module__main_container__group_container=None):
        self._ns = 'http://example.com/main'
        self.main_leaf = main_leaf
        self.sub_group_container = sub_group_container if sub_group_container is not None else main_module__main_container__sub_group_container()
        self.sub_leaf = sub_leaf
        self.sub_list = main_module__main_container__sub_list(elements=sub_list)
        self.group_container = group_container if group_container is not None else main_module__main_container__group_container()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _main_leaf = self.main_leaf
        if _main_leaf is not None:
            children['main-leaf'] = yang.gdata.Leaf('string', _main_leaf)
        _sub_group_container = self.sub_group_container
        if _sub_group_container is not None:
            children['sub-group-container'] = _sub_group_container.to_gdata()
        _sub_leaf = self.sub_leaf
        if _sub_leaf is not None:
            children['sub-leaf'] = yang.gdata.Leaf('string', _sub_leaf)
        _sub_list = self.sub_list
        if _sub_list is not None:
            children['sub-list'] = _sub_list.to_gdata()
        _group_container = self.group_container
        if _group_container is not None:
            children['group-container'] = _group_container.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/main', module='main-module')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> main_module__main_container:
        if n is not None:
            return main_module__main_container(main_leaf=n.get_opt_str('main-leaf'), sub_group_container=main_module__main_container__sub_group_container.from_gdata(n.get_opt_cnt('sub-group-container')), sub_leaf=n.get_opt_str('sub-leaf'), sub_list=main_module__main_container__sub_list.from_gdata(n.get_opt_list('sub-list')), group_container=main_module__main_container__group_container.from_gdata(n.get_opt_cnt('group-container')))
        return main_module__main_container()

    def copy(self):
        """Create a deep copy of this adata object"""
        return main_module__main_container.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /main-container')
            res.append('{self_name} = main_module__main_container()')
        leaves = []
        _main_leaf = self.main_leaf
        if _main_leaf is not None:
            leaves.append('{self_name}.main_leaf = {repr(_main_leaf)}')
        _sub_group_container = self.sub_group_container
        if _sub_group_container is not None:
            res.extend(_sub_group_container.prsrc('{self_name}.sub_group_container', False).splitlines())
        _sub_leaf = self.sub_leaf
        if _sub_leaf is not None:
            leaves.append('{self_name}.sub_leaf = {repr(_sub_leaf)}')
        _sub_list = self.sub_list
        for _element in _sub_list:
            res.append('')
            res.append("# List /main-container/sub-list element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'sub_list_element = {self_name}.sub_list.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('sub_list_element', False, list_element=True).splitlines())
        _group_container = self.group_container
        if _group_container is not None:
            res.extend(_group_container.prsrc('{self_name}.group_container', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /main-container'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False, root_path=['main-module:main-container'])


mut def from_xml_main_module__main_container(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_main_leaf = yang.gdata.from_xml_opt_str(node, 'main-leaf')
    yang.gdata.maybe_add(children, 'main-leaf', from_xml_main_module__main_container__main_leaf, child_main_leaf)
    child_sub_group_container = yang.gdata.from_xml_opt_cnt(node, 'sub-group-container')
    yang.gdata.maybe_add(children, 'sub-group-container', from_xml_main_module__main_container__sub_group_container, child_sub_group_container)
    child_sub_leaf = yang.gdata.from_xml_opt_str(node, 'sub-leaf')
    yang.gdata.maybe_add(children, 'sub-leaf', from_xml_main_module__main_container__sub_leaf, child_sub_leaf)
    child_sub_list = yang.gdata.from_xml_opt_list(node, 'sub-list')
    yang.gdata.maybe_add(children, 'sub-list', from_xml_main_module__main_container__sub_list, child_sub_list)
    child_group_container = yang.gdata.from_xml_opt_cnt(node, 'group-container')
    yang.gdata.maybe_add(children, 'group-container', from_xml_main_module__main_container__group_container, child_group_container)
    return yang.gdata.Container(children, ns='http://example.com/main', module='main-module')

mut def from_json_path_main_module__main_container(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'main-leaf':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'sub-group-container':
            child = {'sub-group-container': from_json_path_main_module__main_container__sub_group_container(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/main', module='main-module')
        if point == 'sub-leaf':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'sub-list':
            child = {'sub-list': from_json_path_main_module__main_container__sub_list(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/main', module='main-module')
        if point == 'group-container':
            child = {'group-container': from_json_path_main_module__main_container__group_container(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/main', module='main-module')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_main_module__main_container(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_main_module__main_container(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_main_leaf = yang.gdata.take_json_opt_str(jd, 'main-leaf')
    yang.gdata.maybe_add(children, 'main-leaf', from_json_main_module__main_container__main_leaf, child_main_leaf)
    child_sub_group_container = yang.gdata.take_json_opt_cnt(jd, 'sub-group-container')
    yang.gdata.maybe_add(children, 'sub-group-container', from_json_main_module__main_container__sub_group_container, child_sub_group_container)
    child_sub_leaf = yang.gdata.take_json_opt_str(jd, 'sub-leaf')
    yang.gdata.maybe_add(children, 'sub-leaf', from_json_main_module__main_container__sub_leaf, child_sub_leaf)
    child_sub_list = yang.gdata.take_json_opt_list(jd, 'sub-list')
    yang.gdata.maybe_add(children, 'sub-list', from_json_main_module__main_container__sub_list, child_sub_list)
    child_group_container = yang.gdata.take_json_opt_cnt(jd, 'group-container')
    yang.gdata.maybe_add(children, 'group-container', from_json_main_module__main_container__group_container, child_group_container)
    return yang.gdata.Container(children, ns='http://example.com/main', module='main-module')

class root(yang.adata.MNode):
    main_container: main_module__main_container

    mut def __init__(self, main_container: ?main_module__main_container=None):
        self._ns = ''
        self.main_container = main_container if main_container is not None else main_module__main_container()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _main_container = self.main_container
        if _main_container is not None:
            children['main-container'] = _main_container.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(main_container=main_module__main_container.from_gdata(n.get_opt_cnt('main-container')))
        return root()

    def copy(self):
        """Create a deep copy of this adata object"""
        return root.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _main_container = self.main_container
        if _main_container is not None:
            res.extend(_main_container.prsrc('{self_name}.main_container', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_main_container = yang.gdata.from_xml_opt_cnt(node, 'main-container', 'http://example.com/main')
    yang.gdata.maybe_add(children, 'main-container', from_xml_main_module__main_container, child_main_container)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'main-module:main-container':
            child = {'main-container': from_json_path_main_module__main_container(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_main_container = yang.gdata.take_json_opt_cnt(jd, 'main-container', 'main-module')
    yang.gdata.maybe_add(children, 'main-container', from_json_main_module__main_container, child_main_container)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)

schema_namespaces: set[str] = {
    'http://example.com/main',
}

def prsrc_gen3(data, self_name='ad'):
    # WARNING: this wrapper for the gen3.prsrc schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.pradata(s, data, self_name, loose=False)
