module test_yang {
  yang-version "1.1";
  namespace "http://example.com/test_yang";
  prefix "test_yang";
  import ietf-inet-types {
    prefix "inet";
    revision-date 2013-07-15;
  }
  include example-types;
  description "test yang module";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }
  extension ext1 {
    argument "arg1";
    description "extension 1";
  }
  feature fe1 {
    description "feature 1";
  }
  feature fe2 {
    description "feature 2";
  }
  typedef t1 {
    type string;
  }
  identity i1 {
    description "identity 1";
  }
  identity i1c {
    base i1;
    description "identity 1";
  }
  grouping g1 {
    description "grouping 1";
    leaf gl1 {
      type string;
      description "grouping leaf 1";
    }
  }
  grouping g2 {
    description "grouping 2";
    container gc1 {
      description "empty container";
    }
  }
  container c1 {
    description "container 1";
    leaf l1 {
      type string;
      description "leaf 1";
      if-feature "fe1 or fe2";
    }
    container c2 {
      config false;
      description "container 2";
      leaf l2 {
        type string;
        description "leaf 2";
      }
      uses g1;
      uses g2 {
        augment "gl2" {
          leaf al1 {
            type string;
          }
        }
        refine "gl2" {
          description "refined description for gl2";
          if-feature "foo";
        }
      }
    }
  }
  container c3 {
    config false;
    ext1:bob "Robert Johansson";
    action a1 {
      description "action 1";
    }
    list li1 {
      description "list 1";
    }
    leaf-list lli1 {
      type int32;
      description "leaf-list 1";
    }
    choice ch1 {
      description "choice 1";
    }
  }
  container c4 {
    presence single-unquoted-word;
    container c5 {
      presence "And you can quote me on that!";
    }
    leaf ql1 {
      type inet:ipv4-address;
      description "some 'quotes'";
    }
    leaf ql2 {
      type string;
      description "contains \"quotes\"";
      must "have \"quotes\"";
      when "does it \"work\"?";
    }
    leaf ql3 {
      type string {
        length "1..10";
        pattern "foo.*";
      }
      default "/tmp/foo";
    }
    list li1 {
      key k1;
      leaf k1 {
        type string;
      }
    }
    list li2 {
      key "k1 k2";
      leaf k1 {
        type string;
      }
      leaf k2 {
        type string;
      }
    }
  }
  rpc rpc1 {
    description "rpc 1";
    input {
      leaf rli1 {
        type string;
        description "rpc input leaf 1";
      }
    }
    output {
      leaf rlo1 {
        type string;
        description "rpc output leaf 1";
      }
    }
  }
  notification n1 {
    description "notification 1";
    anydata n1ad {
      description "notification anydata 1";
    }
    anyxml n1ax {
      description "notification anyxml 1";
    }
  }
}
