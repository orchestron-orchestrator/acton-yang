import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class foo__c1__li_entry(yang.adata.MNode):
    name: str
    val: ?str

    mut def __init__(self, name: str, val: ?str):
        self._ns = "http://example.com/foo"
        self.name = name
        self.val = val

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        _val = self.val
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        if _val is not None:
            children['val'] = yang.gdata.Leaf('string', _val)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__c1__li_entry:
        return foo__c1__li_entry(name=n.get_str("name"), val=n.get_opt_str("val"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__c1__li_entry:
        return foo__c1__li_entry(name=yang.gdata.from_xml_str(n, "name"), val=yang.gdata.from_xml_opt_str(n, "val"))

class foo__c1__li(yang.adata.MNode):
    elements: list[foo__c1__li_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'li'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = foo__c1__li_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__c1__li_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__c1__li_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__c1__li_entry]:
        res = []
        for node in nodes:
            res.append(foo__c1__li_entry.from_xml(node))
        return res


class foo__c1(yang.adata.MNode):
    l1: ?str
    l3: ?int
    l_empty: ?bool
    li: foo__c1__li
    ll_uint64: list[int]
    ll_str: list[str]
    l2: ?str

    mut def __init__(self, l1: ?str, l3: ?int, l_empty: ?bool, li: list[foo__c1__li_entry]=[], ll_uint64: ?list[int]=None, ll_str: ?list[str]=None, l2: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1
        self.l3 = l3
        self.l_empty = l_empty
        self.li = foo__c1__li(elements=li)
        self.li._parent = self
        if ll_uint64 is not None:
            self.ll_uint64 = ll_uint64
        else:
            self.ll_uint64 = []
        if ll_str is not None:
            self.ll_str = ll_str
        else:
            self.ll_str = []
        self.l2 = l2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        _l3 = self.l3
        _l_empty = self.l_empty
        _li = self.li
        _l2 = self.l2
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        if _l3 is not None:
            children['l3'] = yang.gdata.Leaf('uint64', _l3)
        if _l_empty is not None:
            children['l_empty'] = yang.gdata.Leaf('empty', _l_empty)
        if _li is not None:
            children['li'] = _li.to_gdata()
        children['ll_uint64'] = yang.gdata.LeafList(self.ll_uint64)
        children['ll_str'] = yang.gdata.LeafList(self.ll_str)
        if _l2 is not None:
            children['l2'] = yang.gdata.Leaf('string', _l2, ns='http://example.com/bar')
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=n.get_opt_str("l1"), l3=n.get_opt_int("l3"), l_empty=n.get_opt_bool("l_empty"), li=foo__c1__li.from_gdata(n.get_opt_list("li")), ll_uint64=n.get_opt_ints("ll_uint64"), ll_str=n.get_opt_strs("ll_str"), l2=n.get_opt_str("l2"))
        return foo__c1()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c1:
        if n != None:
            return foo__c1(l1=yang.gdata.from_xml_opt_str(n, "l1"), l3=yang.gdata.from_xml_opt_int(n, "l3"), l_empty=yang.gdata.from_xml_opt_bool(n, "l_empty"), li=foo__c1__li.from_xml(yang.gdata.get_xml_children(n, "li")), ll_uint64=yang.gdata.from_xml_opt_ints(n, "ll_uint64"), ll_str=yang.gdata.from_xml_opt_strs(n, "ll_str"), l2=yang.gdata.from_xml_opt_str(n, "l2", "http://example.com/bar"))
        return foo__c1()


class foo__pc1__foo(yang.adata.MNode):
    l1: ?str

    mut def __init__(self, l1: ?str):
        self._ns = "http://example.com/foo"
        self.l1 = l1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=n.get_opt_str("l1"))
        return foo__pc1__foo()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__pc1__foo:
        if n != None:
            return foo__pc1__foo(l1=yang.gdata.from_xml_opt_str(n, "l1"))
        return foo__pc1__foo()


class foo__pc1(yang.adata.MNode):
    foo: foo__pc1__foo

    mut def __init__(self, foo: ?foo__pc1__foo=None):
        self._ns = "http://example.com/foo"
        if foo is not None:
            self.foo = foo
        else:
            self.foo = foo__pc1__foo()
        self_foo = self.foo
        if self_foo is not None:
            self_foo._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = _foo.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_gdata(n.get_opt_container("foo")))
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?foo__pc1:
        if n != None:
            return foo__pc1(foo=foo__pc1__foo.from_xml(yang.gdata.get_xml_opt_child(n, "foo")))
        return None


class foo__empty_presence(yang.adata.MNode):

    mut def __init__(self):
        self._ns = "http://example.com/foo"
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?foo__empty_presence:
        if n != None:
            return foo__empty_presence()
        return None

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> ?foo__empty_presence:
        if n != None:
            return foo__empty_presence()
        return None


class foo__c_dot(yang.adata.MNode):
    l_dot1: ?str
    l_dot2: ?str

    mut def __init__(self, l_dot1: ?str, l_dot2: ?str):
        self._ns = "http://example.com/foo"
        self.l_dot1 = l_dot1
        self.l_dot2 = l_dot2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l_dot1 = self.l_dot1
        _l_dot2 = self.l_dot2
        if _l_dot1 is not None:
            children['l.dot1'] = yang.gdata.Leaf('string', _l_dot1)
        if _l_dot2 is not None:
            children['l.dot2'] = yang.gdata.Leaf('string', _l_dot2, ns='http://example.com/bar')
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__c_dot:
        if n != None:
            return foo__c_dot(l_dot1=n.get_opt_str("l.dot1"), l_dot2=n.get_opt_str("l.dot2"))
        return foo__c_dot()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__c_dot:
        if n != None:
            return foo__c_dot(l_dot1=yang.gdata.from_xml_opt_str(n, "l.dot1"), l_dot2=yang.gdata.from_xml_opt_str(n, "l.dot2", "http://example.com/bar"))
        return foo__c_dot()


class foo__cc__death_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = "http://example.com/foo"
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.name)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__cc__death_entry:
        return foo__cc__death_entry(name=n.get_str("name"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__cc__death_entry:
        return foo__cc__death_entry(name=yang.gdata.from_xml_str(n, "name"))

class foo__cc__death(yang.adata.MNode):
    elements: list[foo__cc__death_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'death'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                break
            if match:
                return e

        res = foo__cc__death_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__cc__death_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__cc__death_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__cc__death_entry]:
        res = []
        for node in nodes:
            res.append(foo__cc__death_entry.from_xml(node))
        return res


class foo__cc(yang.adata.MNode):
    cake: ?str
    death: foo__cc__death

    mut def __init__(self, cake: ?str, death: list[foo__cc__death_entry]=[]):
        self._ns = "http://example.com/foo"
        self.cake = cake
        self.death = foo__cc__death(elements=death)
        self.death._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _cake = self.cake
        _death = self.death
        if _cake is not None:
            children['cake'] = yang.gdata.Leaf('string', _cake)
        if _death is not None:
            children['death'] = _death.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__cc:
        if n != None:
            return foo__cc(cake=n.get_opt_str("cake"), death=foo__cc__death.from_gdata(n.get_opt_list("death")))
        return foo__cc()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__cc:
        if n != None:
            return foo__cc(cake=yang.gdata.from_xml_opt_str(n, "cake"), death=foo__cc__death.from_xml(yang.gdata.get_xml_children(n, "death")))
        return foo__cc()


class foo__conflict(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = "http://example.com/foo"
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__conflict:
        if n != None:
            return foo__conflict(foo=n.get_opt_str("foo"))
        return foo__conflict()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> foo__conflict:
        if n != None:
            return foo__conflict(foo=yang.gdata.from_xml_opt_str(n, "foo"))
        return foo__conflict()


class foo__special_entry(yang.adata.MNode):
    yes: bool

    mut def __init__(self, yes: bool):
        self._ns = "http://example.com/foo"
        self.yes = yes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _yes = self.yes
        if _yes is not None:
            children['yes'] = yang.gdata.Leaf('boolean', _yes)
        return yang.gdata.ListElement([yang.gdata.yang_str(self.yes)], children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__special_entry:
        return foo__special_entry(yes=n.get_bool("yes"))

    @staticmethod
    mut def from_xml(n: xml.Node) -> foo__special_entry:
        return foo__special_entry(yes=yang.gdata.from_xml_bool(n, "yes"))

class foo__special(yang.adata.MNode):
    elements: list[foo__special_entry]
    mut def __init__(self, elements=[]):
        self._ns = "http://example.com/foo"
        self._name = 'special'
        self.elements = elements

    mut def create(self, yes):
        for e in self.elements:
            match = True
            if e.yes != yes:
                match = False
                break
            if match:
                return e

        res = foo__special_entry(yes)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                elements.append(e_gdata)
        return yang.gdata.List(['yes'], elements, ns='http://example.com/foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__special_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__special_entry.from_gdata(e))
        return res

    @staticmethod
    mut def from_xml(nodes: list[xml.Node]) -> list[foo__special_entry]:
        res = []
        for node in nodes:
            res.append(foo__special_entry.from_xml(node))
        return res


class bar__conflict(yang.adata.MNode):
    foo: ?str

    mut def __init__(self, foo: ?str):
        self._ns = "http://example.com/bar"
        self.foo = foo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _foo = self.foo
        if _foo is not None:
            children['foo'] = yang.gdata.Leaf('string', _foo)
        return yang.gdata.Container(children, ns='http://example.com/bar')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> bar__conflict:
        if n != None:
            return bar__conflict(foo=n.get_opt_str("foo"))
        return bar__conflict()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> bar__conflict:
        if n != None:
            return bar__conflict(foo=yang.gdata.from_xml_opt_str(n, "foo"))
        return bar__conflict()


class root(yang.adata.MNode):
    c1: foo__c1
    pc1: ?foo__pc1
    empty_presence: ?foo__empty_presence
    c_dot: foo__c_dot
    cc: foo__cc
    foo_conflict: foo__conflict
    special: foo__special
    bar_conflict: bar__conflict

    mut def __init__(self, c1: ?foo__c1=None, pc1: ?foo__pc1=None, empty_presence: ?foo__empty_presence=None, c_dot: ?foo__c_dot=None, cc: ?foo__cc=None, foo_conflict: ?foo__conflict=None, special: list[foo__special_entry]=[], bar_conflict: ?bar__conflict=None):
        self._ns = ""
        if c1 is not None:
            self.c1 = c1
        else:
            self.c1 = foo__c1()
        self_c1 = self.c1
        if self_c1 is not None:
            self_c1._parent = self
        self.pc1 = pc1
        self_pc1 = self.pc1
        if self_pc1 is not None:
            self_pc1._parent = self
        self.empty_presence = empty_presence
        self_empty_presence = self.empty_presence
        if self_empty_presence is not None:
            self_empty_presence._parent = self
        if c_dot is not None:
            self.c_dot = c_dot
        else:
            self.c_dot = foo__c_dot()
        self_c_dot = self.c_dot
        if self_c_dot is not None:
            self_c_dot._parent = self
        if cc is not None:
            self.cc = cc
        else:
            self.cc = foo__cc()
        self_cc = self.cc
        if self_cc is not None:
            self_cc._parent = self
        if foo_conflict is not None:
            self.foo_conflict = foo_conflict
        else:
            self.foo_conflict = foo__conflict()
        self_foo_conflict = self.foo_conflict
        if self_foo_conflict is not None:
            self_foo_conflict._parent = self
        self.special = foo__special(elements=special)
        self.special._parent = self
        if bar_conflict is not None:
            self.bar_conflict = bar_conflict
        else:
            self.bar_conflict = bar__conflict()
        self_bar_conflict = self.bar_conflict
        if self_bar_conflict is not None:
            self_bar_conflict._parent = self

    mut def create_pc1(self):
        res = foo__pc1()
        self.pc1 = res
        return res

    mut def create_empty_presence(self):
        res = foo__empty_presence()
        self.empty_presence = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c1 = self.c1
        _pc1 = self.pc1
        _empty_presence = self.empty_presence
        _c_dot = self.c_dot
        _cc = self.cc
        _foo_conflict = self.foo_conflict
        _special = self.special
        _bar_conflict = self.bar_conflict
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        if _pc1 is not None:
            children['pc1'] = _pc1.to_gdata()
        if _empty_presence is not None:
            children['empty-presence'] = _empty_presence.to_gdata()
        if _c_dot is not None:
            children['c.dot'] = _c_dot.to_gdata()
        if _cc is not None:
            children['cc'] = _cc.to_gdata()
        if _foo_conflict is not None:
            children['foo:conflict'] = _foo_conflict.to_gdata()
        if _special is not None:
            children['special'] = _special.to_gdata()
        if _bar_conflict is not None:
            children['bar:conflict'] = _bar_conflict.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_gdata(n.get_opt_container("c1")), pc1=foo__pc1.from_gdata(n.get_opt_container("pc1")), empty_presence=foo__empty_presence.from_gdata(n.get_opt_container("empty-presence")), c_dot=foo__c_dot.from_gdata(n.get_opt_container("c.dot")), cc=foo__cc.from_gdata(n.get_opt_container("cc")), foo_conflict=foo__conflict.from_gdata(n.get_opt_container("foo:conflict")), special=foo__special.from_gdata(n.get_list("special")), bar_conflict=bar__conflict.from_gdata(n.get_opt_container("bar:conflict")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c1=foo__c1.from_xml(yang.gdata.get_xml_opt_child(n, "c1", "http://example.com/foo")), pc1=foo__pc1.from_xml(yang.gdata.get_xml_opt_child(n, "pc1", "http://example.com/foo")), empty_presence=foo__empty_presence.from_xml(yang.gdata.get_xml_opt_child(n, "empty-presence", "http://example.com/foo")), c_dot=foo__c_dot.from_xml(yang.gdata.get_xml_opt_child(n, "c.dot", "http://example.com/foo")), cc=foo__cc.from_xml(yang.gdata.get_xml_opt_child(n, "cc", "http://example.com/foo")), foo_conflict=foo__conflict.from_xml(yang.gdata.get_xml_opt_child(n, "conflict", "http://example.com/foo")), special=foo__special.from_xml(yang.gdata.get_xml_children(n, "special", "http://example.com/foo")), bar_conflict=bar__conflict.from_xml(yang.gdata.get_xml_opt_child(n, "conflict", "http://example.com/bar")))
        return root()

