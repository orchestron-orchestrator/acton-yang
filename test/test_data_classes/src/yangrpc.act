from yang.schema import *
import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


def src_yang():
    res = []
    res.append(r"""module yangrpc {
  yang-version "1.1";
  namespace "http://example.com/yangrpc";
  prefix "yrpc";
  rpc foo {
    input {
      leaf a { type string; }
      container woo {
        leaf woo_b { type int64; }
      }
    }
    output {
      leaf outoo { type string; }
    }
  }
  rpc silent;
}""")
    return res


class root(yang.adata.MNode):

    mut def __init__(self):
        self._ns = ''
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root()
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)

mut def from_json_yangrpc__foo__input__a(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_yangrpc__foo__input__a(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_yangrpc__foo__input__woo__woo_b(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int64', val)

mut def from_xml_yangrpc__foo__input__woo__woo_b(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int64', val)

class yangrpc__foo__input__woo(yang.adata.MNode):
    woo_b: ?int

    mut def __init__(self, woo_b: ?int):
        self._ns = 'http://example.com/yangrpc'
        self.woo_b = woo_b

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _woo_b = self.woo_b
        if _woo_b is not None:
            children['woo_b'] = yang.gdata.Leaf('int64', _woo_b)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> yangrpc__foo__input__woo:
        if n is not None:
            return yangrpc__foo__input__woo(woo_b=n.get_opt_int('woo_b'))
        return yangrpc__foo__input__woo()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /foo/input/woo')
            res.append('{self_name} = yangrpc__foo__input__woo()')
        leaves = []
        _woo_b = self.woo_b
        if _woo_b is not None:
            leaves.append('{self_name}.woo_b = {repr(_woo_b)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /foo/input/woo'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_yangrpc__foo__input__woo(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_woo_b = yang.gdata.from_xml_opt_int(node, 'woo_b')
    yang.gdata.maybe_add(children, 'woo_b', from_xml_yangrpc__foo__input__woo__woo_b, child_woo_b)
    return yang.gdata.Container(children)

mut def from_json_path_yangrpc__foo__input__woo(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'woo_b':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_yangrpc__foo__input__woo(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_yangrpc__foo__input__woo(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_woo_b = yang.gdata.take_json_opt_int64(jd, 'woo_b')
    yang.gdata.maybe_add(children, 'woo_b', from_json_yangrpc__foo__input__woo__woo_b, child_woo_b)
    return yang.gdata.Container(children)

class yangrpc__foo__input(yang.adata.MNode):
    a: ?str
    woo: yangrpc__foo__input__woo

    mut def __init__(self, a: ?str, woo: ?yangrpc__foo__input__woo=None):
        self._ns = 'http://example.com/yangrpc'
        self.a = a
        self.woo = woo if woo is not None else yangrpc__foo__input__woo()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _a = self.a
        if _a is not None:
            children['a'] = yang.gdata.Leaf('string', _a)
        _woo = self.woo
        if _woo is not None:
            children['woo'] = _woo.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> yangrpc__foo__input:
        if n is not None:
            return yangrpc__foo__input(a=n.get_opt_str('a'), woo=yangrpc__foo__input__woo.from_gdata(n.get_opt_cnt('woo')))
        return yangrpc__foo__input()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /foo/input')
            res.append('{self_name} = yangrpc__foo__input()')
        leaves = []
        _a = self.a
        if _a is not None:
            leaves.append('{self_name}.a = {repr(_a)}')
        _woo = self.woo
        if _woo is not None:
            res.extend(_woo.prsrc('{self_name}.woo', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /foo/input'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_yangrpc__foo__input(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_a = yang.gdata.from_xml_opt_str(node, 'a')
    yang.gdata.maybe_add(children, 'a', from_xml_yangrpc__foo__input__a, child_a)
    child_woo = yang.gdata.from_xml_opt_cnt(node, 'woo')
    yang.gdata.maybe_add(children, 'woo', from_xml_yangrpc__foo__input__woo, child_woo)
    return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

mut def from_json_path_yangrpc__foo__input(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'a':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'woo':
            child = {'woo': from_json_path_yangrpc__foo__input__woo(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/yangrpc', module='yangrpc')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_yangrpc__foo__input(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_yangrpc__foo__input(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_a = yang.gdata.take_json_opt_str(jd, 'a')
    yang.gdata.maybe_add(children, 'a', from_json_yangrpc__foo__input__a, child_a)
    child_woo = yang.gdata.take_json_opt_cnt(jd, 'woo')
    yang.gdata.maybe_add(children, 'woo', from_json_yangrpc__foo__input__woo, child_woo)
    return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

mut def from_json_yangrpc__foo__output__outoo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_yangrpc__foo__output__outoo(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class yangrpc__foo__output(yang.adata.MNode):
    outoo: ?str

    mut def __init__(self, outoo: ?str):
        self._ns = 'http://example.com/yangrpc'
        self.outoo = outoo

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _outoo = self.outoo
        if _outoo is not None:
            children['outoo'] = yang.gdata.Leaf('string', _outoo)
        return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> yangrpc__foo__output:
        if n is not None:
            return yangrpc__foo__output(outoo=n.get_opt_str('outoo'))
        return yangrpc__foo__output()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /foo/output')
            res.append('{self_name} = yangrpc__foo__output()')
        leaves = []
        _outoo = self.outoo
        if _outoo is not None:
            leaves.append('{self_name}.outoo = {repr(_outoo)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /foo/output'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=False)


mut def from_xml_yangrpc__foo__output(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_outoo = yang.gdata.from_xml_opt_str(node, 'outoo')
    yang.gdata.maybe_add(children, 'outoo', from_xml_yangrpc__foo__output__outoo, child_outoo)
    return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

mut def from_json_path_yangrpc__foo__output(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'outoo':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_yangrpc__foo__output(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_yangrpc__foo__output(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_outoo = yang.gdata.take_json_opt_str(jd, 'outoo')
    yang.gdata.maybe_add(children, 'outoo', from_json_yangrpc__foo__output__outoo, child_outoo)
    return yang.gdata.Container(children, ns='http://example.com/yangrpc', module='yangrpc')

actor rpc_handler(tp: yang.gdata.TreeProvider):
    def foo(cb: action(?yangrpc__foo__output, ?Exception) -> None, inp: ?yangrpc__foo__input, gen3: bool=False):
        def cb_wrap(res: ?xml.Node, err: ?Exception):
            if res is not None:
                if gen3:
                    gdata_res = from_xml_gen3(res, ["yangrpc:foo", "output"])
                else:
                    gdata_res = from_xml_yangrpc__foo__output(res)
                adata_res = yangrpc__foo__output.from_gdata(gdata_res)
                cb(adata_res, err)
            else:
                cb(None, err)

        if inp is not None:
            xmlstr = '<foo xmlns="http://example.com/yangrpc">{inp.to_gdata().to_xmlstr()}</foo>'
        else:
            xmlstr = '<foo xmlns="http://example.com/yangrpc" />'
        tp.rpc_xml(cb_wrap, xml.decode(xmlstr))

    def silent(cb: action(?None, ?Exception) -> None, inp: ?None, gen3: bool=False):
        def cb_wrap(res: ?xml.Node, err: ?Exception):
            if res is not None:
                cb(None, err)
            else:
                cb(None, err)

        xmlstr = '<silent xmlns="http://example.com/yangrpc" />'
        tp.rpc_xml(cb_wrap, xml.decode(xmlstr))


class rpc_root(yang.adata.RpcRoot):
    _handler: rpc_handler

    def __init__(self, tp: yang.gdata.TreeProvider):
        yang.adata.RpcRoot.__init__(self, tp)
        self._handler = rpc_handler(tp)

    proc def foo(self, cb: action(?yangrpc__foo__output, ?Exception) -> None, inp: ?yangrpc__foo__input, gen3: bool=False) -> None:
        self._handler.foo(cb, inp, gen3)

    proc def silent(self, cb: action(?Exception) -> None, gen3: bool=False) -> None:
        self._handler.silent(lambda _, err: cb(err), None, gen3)


schema_namespaces: set[str] = {
    'http://example.com/yangrpc',
}
def src_schema():
    res = {}
    res["yangrpc"] = Module('yangrpc', yang_version=1.1, namespace='http://example.com/yangrpc', prefix='yrpc', children=[
    Rpc('foo', input=Input(children=[
    Leaf('a', type_=Type('string')),
    Container('woo', children=[
        Leaf('woo_b', type_=Type('int64'))
    ])
]), output=Output(children=[
    Leaf('outoo', type_=Type('string'))
])),
    Rpc('silent')
])
    return res

def src_schema_compiled():
    res = {}
    res["yangrpc"] = Module('yangrpc', yang_version=1.1, namespace='http://example.com/yangrpc', prefix='yrpc', children=[
    Rpc('foo', input=Input(children=[
    Leaf('a', type_=Type('string')),
    Container('woo', children=[
        Leaf('woo_b', type_=Type('int64'))
    ])
]), output=Output(children=[
    Leaf('outoo', type_=Type('string'))
])),
    Rpc('silent', input=Input(), output=Output())
])
    return res
