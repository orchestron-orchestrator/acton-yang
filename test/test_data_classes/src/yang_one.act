from yang.schema import *
import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_foo__tc1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__tc1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__tc1__l2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__tc1__l2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__tc1(yang.adata.MNode):
    l1: str
    l2: ?str

    mut def __init__(self, l1: str, l2: ?str):
        self._ns = 'http://example.com/foo'
        self.l1 = l1
        self.l2 = l2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        _l2 = self.l2
        if _l2 is not None:
            children['l2'] = yang.gdata.Leaf('string', _l2)
        return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__tc1:
        if n != None:
            return foo__tc1(l1=n.get_str('l1'), l2=n.get_opt_str('l2'))
        raise ValueError('Missing required subtree foo__tc1')


mut def from_xml_foo__tc1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.from_xml_str(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__tc1__l1, child_l1)
    child_l2 = yang.gdata.from_xml_opt_str(node, 'l2')
    yang.gdata.maybe_add(children, 'l2', from_xml_foo__tc1__l2, child_l2)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__tc1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l2':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__tc1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__tc1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.take_json_str(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__tc1__l1, child_l1)
    child_l2 = yang.gdata.take_json_opt_str(jd, 'l2')
    yang.gdata.maybe_add(children, 'l2', from_json_foo__tc1__l2, child_l2)
    return yang.gdata.Container(children, ns='http://example.com/foo', module='foo')

mut def from_json_foo__li__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__li__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__li__c1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__li__c1__l1(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_foo__li__c1__l2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_foo__li__c1__l2(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class foo__li__c1(yang.adata.MNode):
    l1: str
    l2: ?str

    mut def __init__(self, l1: str, l2: ?str):
        self._ns = 'http://example.com/foo'
        self.l1 = l1
        self.l2 = l2

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l1 = self.l1
        if _l1 is not None:
            children['l1'] = yang.gdata.Leaf('string', _l1)
        _l2 = self.l2
        if _l2 is not None:
            children['l2'] = yang.gdata.Leaf('string', _l2)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> foo__li__c1:
        if n != None:
            return foo__li__c1(l1=n.get_str('l1'), l2=n.get_opt_str('l2'))
        raise ValueError('Missing required subtree foo__li__c1')


mut def from_xml_foo__li__c1(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.from_xml_str(node, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_xml_foo__li__c1__l1, child_l1)
    child_l2 = yang.gdata.from_xml_opt_str(node, 'l2')
    yang.gdata.maybe_add(children, 'l2', from_xml_foo__li__c1__l2, child_l2)
    return yang.gdata.Container(children)

mut def from_json_path_foo__li__c1(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l1':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l2':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_foo__li__c1(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_foo__li__c1(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l1 = yang.gdata.take_json_str(jd, 'l1')
    yang.gdata.maybe_add(children, 'l1', from_json_foo__li__c1__l1, child_l1)
    child_l2 = yang.gdata.take_json_opt_str(jd, 'l2')
    yang.gdata.maybe_add(children, 'l2', from_json_foo__li__c1__l2, child_l2)
    return yang.gdata.Container(children)

class foo__li_entry(yang.adata.MNode):
    name: str
    c1: foo__li__c1

    mut def __init__(self, name: str, c1: foo__li__c1):
        self._ns = 'http://example.com/foo'
        self.name = name
        self.c1 = c1

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _c1 = self.c1
        if _c1 is not None:
            children['c1'] = _c1.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> foo__li_entry:
        return foo__li_entry(name=n.get_str('name'), c1=foo__li__c1.from_gdata(n.get_container('c1')))

class foo__li(yang.adata.MNode):
    elements: list[foo__li_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/foo'
        self._name = 'li'
        self.elements = elements

    mut def create(self, name, c1):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = foo__li_entry(name, c1)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[foo__li_entry]:
        res = []
        if n is not None:
            for e in n.elements:
                res.append(foo__li_entry.from_gdata(e))
        return res


mut def from_xml_foo__li_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_foo__li__name, child_name)
    child_c1 = yang.gdata.from_xml_cnt(node, 'c1')
    yang.gdata.maybe_add(children, 'c1', from_xml_foo__li__c1, child_c1)
    return yang.gdata.Container(children)

mut def from_xml_foo__li(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = []
    for e in nodes:
        elements.append(from_xml_foo__li_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/foo', module='foo')

mut def from_json_path_foo__li_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_foo__li_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_foo__li__name(keys[0])
        if point == 'c1':
            children['c1'] = from_json_path_foo__li__c1(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_foo__li(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_foo__li_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/foo', module='foo')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_foo__li_element(jd, path, op)], ns='http://example.com/foo', module='foo')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_foo__li_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_foo__li__name, child_name)
    child_c1 = yang.gdata.take_json_cnt(jd, 'c1')
    yang.gdata.maybe_add(children, 'c1', from_json_foo__li__c1, child_c1)
    return yang.gdata.Container(children)

mut def from_json_foo__li(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = []
    for e in jd:
        if isinstance(e, dict):
            elements.append(from_json_foo__li_element(e))
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/foo', module='foo')

class root(yang.adata.MNode):
    tc1: foo__tc1
    li: foo__li

    mut def __init__(self, tc1: foo__tc1, li: list[foo__li_entry]=[]):
        self._ns = ''
        self.tc1 = tc1
        self.li = foo__li(elements=li)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tc1 = self.tc1
        if _tc1 is not None:
            children['tc1'] = _tc1.to_gdata()
        _li = self.li
        if _li is not None:
            children['li'] = _li.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(tc1=foo__tc1.from_gdata(n.get_container('tc1')), li=foo__li.from_gdata(n.get_opt_list('li')))
        raise ValueError('Missing required subtree root')


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tc1 = yang.gdata.from_xml_cnt(node, 'tc1', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'tc1', from_xml_foo__tc1, child_tc1)
    child_li = yang.gdata.from_xml_opt_list(node, 'li', 'http://example.com/foo')
    yang.gdata.maybe_add(children, 'li', from_xml_foo__li, child_li)
    return yang.gdata.Container(children)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'foo:tc1':
            child = {'tc1': from_json_path_foo__tc1(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'foo:li':
            child = {'li': from_json_path_foo__li(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_tc1 = yang.gdata.take_json_cnt(jd, 'tc1', 'foo')
    yang.gdata.maybe_add(children, 'tc1', from_json_foo__tc1, child_tc1)
    child_li = yang.gdata.take_json_opt_list(jd, 'li', 'foo')
    yang.gdata.maybe_add(children, 'li', from_json_foo__li, child_li)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://example.com/foo',
}
def src_yang():
    res = []
    res.append("""module foo {
    yang-version "1.1";
    namespace "http://example.com/foo";
    prefix "f";
    container tc1 {
        leaf l1 {
            type string;
            mandatory true;
        }
        leaf l2 {
            type string;
        }
    }
    list li {
        key name;
        leaf name {
            type string;
        }

        container c1 {
            leaf l1 {
                type string;
                mandatory true;
            }
            leaf l2 {
                type string;
            }
        }
    }
}""")
    return res

def src_schema():
    res = {}
    res["foo"] = Module('foo', yang_version=1.1, namespace='http://example.com/foo', prefix='f', children=[
    Container('tc1', children=[
        Leaf('l1', type_=Type('string'), mandatory=True),
        Leaf('l2', type_=Type('string'))
    ]),
    List('li', key='name', children=[
        Leaf('name', type_=Type('string')),
        Container('c1', children=[
            Leaf('l1', type_=Type('string'), mandatory=True),
            Leaf('l2', type_=Type('string'))
        ])
    ])
])
    return res

def src_schema_compiled():
    res = {}
    res["foo"] = Module('foo', yang_version=1.1, namespace='http://example.com/foo', prefix='f', children=[
    Container('tc1', children=[
        Leaf('l1', type_=Type('string'), mandatory=True),
        Leaf('l2', type_=Type('string'))
    ]),
    List('li', key='name', children=[
        Leaf('name', type_=Type('string')),
        Container('c1', children=[
            Leaf('l1', type_=Type('string'), mandatory=True),
            Leaf('l2', type_=Type('string'))
        ])
    ])
])
    return res
