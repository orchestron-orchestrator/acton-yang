
import testing
import json
import xml

import yang.adata
import yang.gdata

import yang_one
import yang_foo
from yang_foo import root as yang_foo_root
import yang_basics

def _test_mandatory1():
    xml_text = """<data><tc1 xmlns="http://example.com/foo"><l1>foo</l1></tc1></data>"""
    # This should work, because we provide a value for the mandatory leaf l1
    r = yang_one.root.from_xml(xml.decode(xml_text))
    # This should not work
    try:
        r = yang_one.root.from_xml(xml.decode(xml_text))
    except ValueError as e:
        pass

def _test_mandatory2():
    # This should work, because we provide a value for the mandatory leaf l1
    xml_text = """<data><tc1 xmlns="http://example.com/foo"><l1>foo</l1></tc1><li xmlns="http://example.com/foo"><name>foo</name><c1><l1>foo</l1></c1></li></data>"""
    r = yang_one.root.from_xml(xml.decode(xml_text))
    # This should not work
    try:
        r = yang_one.root.from_xml(xml.decode(xml_text))
    except ValueError as e:
        pass

# YANG model used to generate yang_foo
#
# module foo {
#     yang-version "1.1";
#     namespace "http://example.com/foo";
#     prefix "foo";
#     container c1 {
#         leaf l1 {
#             type string;
#         }
#         leaf l3 {
#             type uint64;
#         }
#         leaf l_empty {
#             type empty;
#         }
#         list li {
#             key name;
#             leaf name {
#                 type string;
#             }
#             leaf val {
#                 type string;
#             }
#         }
#         leaf-list ll_uint64 {
#             type uint64;
#         }
#         leaf-list ll_str {
#             type string;
#         }
#     }
#     container pc1 {
#         presence "p";
#         container foo {
#             leaf l1 {
#                 type string;
#             }
#         }
#     }
#     container c.dot {
#         leaf l.dot1 {
#             type string;
#         }
#     }
#     list special {
#         key yes;
#         leaf yes {
#             type boolean;
#         }
#     }
# }

def _test_foo_from_xml_full():
    # TODO: add <l_empty/>
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
  <l3>18446744073709551615</l3>
  <li>
    <name>tuta</name>
    <val>baba</val>
  </li>
  <ll_uint64>4</ll_uint64>
  <ll_uint64>42</ll_uint64>
  <ll_str>kava</ll_str>
  <ll_str>čaj</ll_str>
</c1>
<pc1 xmlns="http://example.com/foo">
  <foo>
    <l1>bar</l1>
  </foo>
</pc1>
<pc2 xmlns="http://example.com/foo">
  <foo>
    <l_mandatory>baz</l_mandatory>
  </foo>
</pc2>
<c.dot xmlns="http://example.com/foo">
  <l.dot1>who put that here?!</l.dot1>
</c.dot>
<cc xmlns="http://example.com/foo">
  <cake>cake</cake>
</cc>
<conflict xmlns="http://example.com/foo">
  <foo>foo-foo</foo>
</conflict>
<special xmlns="http://example.com/foo">
  <yes>true</yes>
</special>
<conflict xmlns="http://example.com/bar">
  <foo>foo-bar</foo>
</conflict>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    g = d.to_gdata()
    print(g.prsrc(), err=True)
    xml_out_text = g.to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())
    return d.to_gdata().prsrc()

def _test_foo_from_xml1():
    """"""
    xml_text = """<data>
<pc1 xmlns="http://example.com/foo">
  <foo>
    <l1>bar</l1>
  </foo>
</pc1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml_pc1():
    """"""
    xml_text = """<data>
<pc1 xmlns="http://example.com/foo"></pc1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    pc1 = d.pc1
    if pc1 is not None:
        present = True
    else:
        present = False
    testing.assertEqual(present, True)
    g = d.to_gdata()
    gc = g.prsrc()
    print(gc, err=True)
    xml_out_text = g.to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml_pc2():
    """"""
    xml_text = """<data>
<pc2 xmlns="http://example.com/foo"></pc2>
</data>"""
    xml_in = xml.decode(xml_text)
    try:
        d = yang_foo_root.from_xml(xml_in)
        testing.error("Expected exception on missing mandatory leaf")
    except ValueError as e:
        if str(e) != "ValueError: Cannot find xml child with name foo":
            raise e
        return

def _test_foo_from_xml2():
    """"""
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    pc1 = d.pc1
    if pc1 is not None:
        present = True
    else:
        present = False
    testing.assertEqual(present, False)
    g = d.to_gdata()
    gc = g.prsrc()
    print(gc, err=True)
    xml_out_text = g.to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml_leaf_ns():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
  <l2 xmlns="http://example.com/bar">bar</l2>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    #testing.assertEqual(xml_in.encode(), xml_out.encode())
    return xml_out_text

def _test_foo_from_xml_named_ns():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
  <bar:l2 xmlns:bar="http://example.com/bar">bar</bar:l2>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    #testing.assertEqual(xml_in.encode(), xml_out.encode())
    return xml_out_text

def _test_foo_from_xml_dots():
    xml_text = """<data>
<c.dot xmlns="http://example.com/foo">
  <l.dot1>foo</l.dot1>
  <l.dot2 xmlns="http://example.com/bar">bar</l.dot2>
</c.dot>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    #testing.assertEqual(xml_in.encode(), xml_out.encode())
    return xml_out_text

def _test_list_create_idempotency():
    r = yang_foo_root()
    e1 = r.c1.li.create("a")
    e1.val = "1"
    e2 = r.c1.li.create("a")
    e2.val = "2"
    # TODO: fix this!!!
    return r.to_gdata().to_xmlstr()

def _test_foo_from_gdata_int():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l3>1337</l3>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    testing.assertEqual(d.c1.l3, 1337)
    gd = d.to_gdata()
    nr = yang_foo_root.from_gdata(gd)
    testing.assertEqual(nr.c1.l3, 1337)

def _test_foo_from_gdata_empty():
    gd = yang.gdata.Root(children={})
    d = yang_foo_root.from_gdata(gd)
    return d.to_gdata().prsrc()

def _test_foo_from_gdata_c1_l1():
    gd = yang.gdata.Root(children={
        "c1": yang.gdata.Container(children={
            "l1": yang.gdata.Leaf("str", "foo")
        })
    })
    # ValueError: Cannot find list child with name li
    d = yang_foo_root.from_gdata(gd)
    return d.to_gdata().prsrc()

def _test_empty_true():
    r = yang_foo_root()
    r.c1.l_empty = True
    return r.to_gdata().to_xmlstr()

def _test_empty_false():
    r = yang_foo_root()
    r.c1.l_empty = False
    return r.to_gdata().to_xmlstr()

def _test_leaf_defaults():
    r = yang_basics.root()
    testing.assertEqual(r.c.l_str_def, "foo")
    testing.assertEqual(r.c.l_uint64_def, 1234567890)

def _test_leaf_default_from_xml():
    xml_text = """<data><c xmlns="http://example.com/basics"/></data>"""
    xml_in = xml.decode(xml_text)
    r = yang_basics.root.from_xml(xml_in)
    testing.assertEqual(r.c.l_str_def, "foo")
    testing.assertEqual(r.c.l_str_def_quoted, '"foo"')
    testing.assertEqual(r.c.l_uint64_def, 1234567890)

def _test_empty_presence():
    xml_text = """<data><empty-presence xmlns="http://example.com/foo"/></data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    # testing.assertEqual(xml_in.encode(), xml_out.encode())
    return xml_out_text

# JSON
def _test_from_json():
    """Test mandatory field handling - success case"""
    json_data = {
        "foo:tc1": {
            "l1": "foo"
        }
    }
    # Should successfully parse since mandatory field is present
    gdata = yang_one.from_json(json_data)
    #root = yang_one.root.from_gdata(gdata)
    #testing.assertEqual(root.children["tc1"].children["l1"].val, "foo")
    return gdata.to_xmlstr()

# example JSON data
jd1 = {
    "foo:c1": {
        "l1": "foo",
        "l3": 123,
        "li": [
            {
                "name": "tuta",
                "val": "baba"
            },
            {
                "name": "tata",
                "val": "baba"
            }
        ],
        "ll_uint64": [4, 42],
        "ll_str": ["kava", "čaj"]
    },
    "foo:pc1": {
        "foo": {
            "l1": "bar"
        }
    },
    "foo:c.dot": {
        "l.dot1": "who put that here?!"
    },
    "foo:cc": {
        "cake": "cake"
    }
}

def _test_json_to_gdata():
    """Test JSON to GData conversion"""
    gdata = yang_foo.from_json(jd1)
    return gdata.prsrc()

def _test_json_roundtrip():
    """Test JSON roundtrip"""
    gdata = yang_foo.from_json(jd1)
    json_out = json.encode(yang_foo.to_json(gdata))
    testing.assertEqual(json.encode(jd1), json_out)


def _test_json_path():
    jda = {
        "foo:nested": {
            "inner": {
                "foo": "WINNING"
            }
        }
    }
    gda = yang_foo.from_json(jda)

    jdb = {
        "foo": "WINNING"
        }
    gdb = yang_foo.from_json_path(jdb, ["foo:nested", "inner"])

    testing.assertEqual(gda.prsrc(), gdb.prsrc())

def _test_json_path_nested_key_in_payload():
    jda = {
        "foo:nested": {
            "inner": {
                "li1": [
                    {
                        "name": "AAA",
                        "bar": "WINNING"
                    }
                ]
            }
        }
    }
    gda = yang_foo.from_json(jda)

    jdb = {
        "name": "AAA",
        "bar": "WINNING"
        }
    gdb = yang_foo.from_json_path(jdb, ["foo:nested", "inner", "li1", "AAA"])

    testing.assertEqual(gda.prsrc(), gdb.prsrc())
    return gdb.prsrc()

def _test_json_path_nested_no_key_in_payload():
    jda = {
        "foo:nested": {
            "inner": {
                "li1": [
                    {
                        "name": "AAA",
                        "bar": "WINNING"
                    }
                ]
            }
        }
    }
    gda = yang_foo.from_json(jda)

    jdb = {
        "bar": "WINNING"
        }
    gdb = yang_foo.from_json_path(jdb, ["foo:nested", "inner", "li1", "AAA"])

    testing.assertEqual(gda.prsrc(), gdb.prsrc())
    return gdb.prsrc()

def _test_json_path_nested_key_mismatch():
    jda = {
        "foo:nested": {
            "inner": {
                "li1": [
                    {
                        "name": "AAA",
                        "bar": "WINNING"
                    }
                ]
            }
        }
    }
    gda = yang_foo.from_json(jda)

    jdb = {
        "name": "banana",
        "bar": "WINNING"
        }
    try:
        gdb = yang_foo.from_json_path(jdb, ["foo:nested", "inner", "li1", "AAA"])
        testing.error("Expected exception on key mismatch")
    except ValueError:
        return

def _test_json_path_nested():
    jda = {
        "foo:nested": {
            "inner": {
                "li1": [
                    {
                        "name": "AAA",
                        "li2": [
                            {
                                "key1": "BBB",
                                "key2": "CCC",
                                "baz": "WINNING"
                            }
                        ]
                    }
                ]
            }
        }
    }
    gda = yang_foo.from_json(jda)

    jdb = {
        "baz": "WINNING"
        }
    gdb = yang_foo.from_json_path(jdb, ["foo:nested", "inner", "li1", "AAA", "li2", "BBB,CCC"])

    testing.assertEqual(gda.prsrc(), gdb.prsrc())
    return gdb.prsrc()


def _test_json_path_remove():
    gd = yang_foo.from_json_path({}, ["foo:nested", "inner"], "remove")
    return gd.prsrc()

def _test_json_path_remove_list_element():
    gd = yang_foo.from_json_path({}, ["foo:nested", "inner", "li1", "AAA"], "remove")
    return gd.prsrc()

def _test_json_ops():
    ds1 = yang_foo.from_json({})
    p1 = yang_foo.from_json_path({"bar": "p1"}, ["foo:nested", "inner", "li1", "AAA"])
    ds2 = yang.gdata.patch(ds1, p1)
    if ds2 is not None:
        p2 = yang_foo.from_json_path({"bar": "p2"}, ["foo:nested", "inner", "li1", "BBB"])
        ds3 = yang.gdata.patch(ds2, p2)
        if ds3 is not None:
            p3 = yang_foo.from_json_path({}, ["foo:nested", "inner", "li1", "AAA"], "remove")
            ds4 = yang.gdata.patch(ds3, p3)
            if ds4 is not None:
                return ds4.prsrc()
    return ""
