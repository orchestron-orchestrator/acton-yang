
import testing
import xml

import yang.adata
import yang.gdata

import yang_one
from yang_foo import root as yang_foo_root
import yang_basics

def _test_mandatory1():
    xml_text = """<data><tc1><l1>foo</l1></tc1></data>"""
    # This should work, because we provide a value for the mandatory leaf l1
    r = yang_one.root.from_xml(xml.decode(xml_text))
    # This should not work
    try:
        r = yang_one.root.from_xml(xml.decode(xml_text))
    except ValueError as e:
        pass

def _test_mandatory2():
    # This should work, because we provide a value for the mandatory leaf l1
    xml_text = """<data><tc1><l1>foo</l1></tc1><li><name>foo</name><c1><l1>foo</l1></c1></li></data>"""
    r = yang_one.root.from_xml(xml.decode(xml_text))
    # This should not work
    try:
        r = yang_one.root.from_xml(xml.decode(xml_text))
    except ValueError as e:
        pass

# YANG model used to generate yang_foo
#
# module foo {
#     yang-version "1.1";
#     namespace "http://example.com/foo";
#     prefix "foo";
#     container c1 {
#         leaf l1 {
#             type string;
#         }
#     }
#     container pc1 {
#         presence "p";
#         container foo {
#             leaf l1 {
#                 type string;
#             }
#         }
#     }
# }

def _test_foo_from_xml_full():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
</c1>
<pc1 xmlns="http://example.com/foo">
  <foo>
    <l1>bar</l1>
  </foo>
</pc1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml1():
    """"""
    xml_text = """<data>
<pc1 xmlns="http://example.com/foo">
  <foo>
    <l1>bar</l1>
  </foo>
</pc1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml2():
    """"""
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    testing.assertEqual(xml_in.encode(), xml_out.encode())

def _test_foo_from_xml_leaf_ns():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l1>foo</l1>
  <l2 xmlns="http://example.com/bar">bar</l2>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    xml_out_text = d.to_gdata().to_xmlstr()
    xml_out = xml.decode("<data>\n" + xml_out_text + "</data>")
    #testing.assertEqual(xml_in.encode(), xml_out.encode())
    return xml_out_text

def _test_list_create_idempotency():
    r = yang_foo_root()
    e1 = r.c1.li.create("a")
    e1.val = "1"
    e2 = r.c1.li.create("a")
    e2.val = "2"
    # TODO: fix this!!!
    return r.to_gdata().to_xmlstr()

def _test_foo_from_gdata_int():
    xml_text = """<data>
<c1 xmlns="http://example.com/foo">
  <l3>1337</l3>
</c1>
</data>"""
    xml_in = xml.decode(xml_text)
    d = yang_foo_root.from_xml(xml_in)
    testing.assertEqual(d.c1.l3, 1337)
    gd = d.to_gdata()
    nr = yang_foo_root.from_gdata(gd)
    testing.assertEqual(nr.c1.l3, 1337)


def _test_empty_true():
    r = yang_foo_root()
    r.c1.l_empty = True
    return r.to_gdata().to_xmlstr()

def _test_empty_false():
    r = yang_foo_root()
    r.c1.l_empty = False
    return r.to_gdata().to_xmlstr()

def _test_leaf_defaults():
    r = yang_basics.root()
    testing.assertEqual(r.c.l_str_def, "foo")
    testing.assertEqual(r.c.l_uint64_def, 1234567890)

def _test_leaf_default_from_xml():
    xml_text = """<data><c xmlns="http://example.com/basics"/></data>"""
    xml_in = xml.decode(xml_text)
    r = yang_basics.root.from_xml(xml_in)
    testing.assertEqual(r.c.l_str_def, "foo")
    testing.assertEqual(r.c.l_uint64_def, 1234567890)
