import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class basics__c(yang.adata.MNode):
    l_str_def: str
    l_uint64_def: int

    mut def __init__(self, l_str_def: ?str=None, l_uint64_def: ?int=None):
        self._ns = "http://example.com/basics"
        if l_str_def != None:
            self.l_str_def = l_str_def
        else:
            self.l_str_def = "foo"
        if l_uint64_def != None:
            self.l_uint64_def = l_uint64_def
        else:
            self.l_uint64_def = 1234567890

    mut def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('c', ns=self._ns)
        _l_str_def = self.l_str_def
        _l_uint64_def = self.l_uint64_def
        if _l_str_def is not None:
            res.children['l_str_def'] = yang.gdata.Leaf('l_str_def', 'string', _l_str_def, ns='http://example.com/basics')
        if _l_uint64_def is not None:
            res.children['l_uint64_def'] = yang.gdata.Leaf('l_uint64_def', 'uint64', _l_uint64_def, ns='http://example.com/basics')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=n.get_opt_str("l_str_def"), l_uint64_def=n.get_opt_int("l_uint64_def"))
        return basics__c()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=yang.gdata.from_xml_opt_str(n, "l_str_def"), l_uint64_def=yang.gdata.from_xml_opt_int(n, "l_uint64_def"))
        return basics__c()


class root(yang.adata.MNode):
    c: basics__c

    mut def __init__(self, c: ?basics__c=None):
        self._ns = ""
        if c is not None:
            self.c = c
        else:
            self.c = basics__c()
        self_c = self.c
        if self_c is not None:
            self_c._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Root()
        _c = self.c
        if _c is not None:
            res.children['c'] = _c.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c=basics__c.from_gdata(n.get_opt_container("c")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c=basics__c.from_xml(yang.gdata.get_xml_opt_child(n, "c")))
        return root()

