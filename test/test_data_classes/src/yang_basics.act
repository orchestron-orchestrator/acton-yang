import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_basics__c__l_str_def(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_basics__c__l_str_def_quoted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("string", val)

mut def from_json_basics__c__l_uint64_def(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf("uint64", val)

class basics__c(yang.adata.MNode):
    l_str_def: str
    l_str_def_quoted: str
    l_uint64_def: int

    mut def __init__(self, l_str_def: ?str=None, l_str_def_quoted: ?str=None, l_uint64_def: ?int=None):
        self._ns = "http://example.com/basics"
        if l_str_def != None:
            self.l_str_def = l_str_def
        else:
            self.l_str_def = "foo"
        if l_str_def_quoted != None:
            self.l_str_def_quoted = l_str_def_quoted
        else:
            self.l_str_def_quoted = "\"foo\""
        if l_uint64_def != None:
            self.l_uint64_def = l_uint64_def
        else:
            self.l_uint64_def = 1234567890

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l_str_def = self.l_str_def
        _l_str_def_quoted = self.l_str_def_quoted
        _l_uint64_def = self.l_uint64_def
        if _l_str_def is not None:
            children['l_str_def'] = yang.gdata.Leaf('string', _l_str_def)
        if _l_str_def_quoted is not None:
            children['l_str_def_quoted'] = yang.gdata.Leaf('string', _l_str_def_quoted)
        if _l_uint64_def is not None:
            children['l_uint64_def'] = yang.gdata.Leaf('uint64', _l_uint64_def)
        return yang.gdata.Container(children, ns='http://example.com/basics')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=n.get_opt_str("l_str_def"), l_str_def_quoted=n.get_opt_str("l_str_def_quoted"), l_uint64_def=n.get_opt_int("l_uint64_def"))
        return basics__c()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=yang.gdata.from_xml_opt_str(n, "l_str_def"), l_str_def_quoted=yang.gdata.from_xml_opt_str(n, "l_str_def_quoted"), l_uint64_def=yang.gdata.from_xml_opt_int(n, "l_uint64_def"))
        return basics__c()


mut def from_json_path_basics__c(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'b:l_str_def' or point == 'l_str_def':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'b:l_str_def_quoted' or point == 'l_str_def_quoted':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'b:l_uint64_def' or point == 'l_uint64_def':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_basics__c(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_basics__c(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l_str_def_full = jd.get('b:l_str_def')
    child_l_str_def = child_l_str_def_full if child_l_str_def_full is not None else jd.get('l_str_def')
    if child_l_str_def is not None:
        children['l_str_def'] = from_json_basics__c__l_str_def(child_l_str_def)
    child_l_str_def_quoted_full = jd.get('b:l_str_def_quoted')
    child_l_str_def_quoted = child_l_str_def_quoted_full if child_l_str_def_quoted_full is not None else jd.get('l_str_def_quoted')
    if child_l_str_def_quoted is not None:
        children['l_str_def_quoted'] = from_json_basics__c__l_str_def_quoted(child_l_str_def_quoted)
    child_l_uint64_def_full = jd.get('b:l_uint64_def')
    child_l_uint64_def = child_l_uint64_def_full if child_l_uint64_def_full is not None else jd.get('l_uint64_def')
    if child_l_uint64_def is not None:
        children['l_uint64_def'] = from_json_basics__c__l_uint64_def(child_l_uint64_def)
    return yang.gdata.Container(children)

mut def to_json_basics__c(n: yang.gdata.Container) -> dict[str, ?value]:
    children = {}
    child_l_str_def = n.children.get('l_str_def')
    if child_l_str_def is not None:
        if isinstance(child_l_str_def, yang.gdata.Leaf):
            children['l_str_def'] = child_l_str_def.val
    child_l_str_def_quoted = n.children.get('l_str_def_quoted')
    if child_l_str_def_quoted is not None:
        if isinstance(child_l_str_def_quoted, yang.gdata.Leaf):
            children['l_str_def_quoted'] = child_l_str_def_quoted.val
    child_l_uint64_def = n.children.get('l_uint64_def')
    if child_l_uint64_def is not None:
        if isinstance(child_l_uint64_def, yang.gdata.Leaf):
            children['l_uint64_def'] = child_l_uint64_def.val
    return children


class root(yang.adata.MNode):
    c: basics__c

    mut def __init__(self, c: ?basics__c=None):
        self._ns = ""
        if c is not None:
            self.c = c
        else:
            self.c = basics__c()
        self_c = self.c
        if self_c is not None:
            self_c._parent = self

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c = self.c
        if _c is not None:
            children['c'] = _c.to_gdata()
        return yang.gdata.Root(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c=basics__c.from_gdata(n.get_opt_container("c")))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c=basics__c.from_xml(yang.gdata.get_xml_opt_child(n, "c", "http://example.com/basics")))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str="merge") -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'b:c':
            child = {'c': from_json_path_basics__c(jd, rest_path, op) }
            return yang.gdata.Root(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Root:
    children = {}
    child_c = jd.get('b:c')
    if child_c is not None and isinstance(child_c, dict):
        children['c'] = from_json_basics__c(child_c)
    return yang.gdata.Root(children)

mut def to_json(n: yang.gdata.Root) -> dict[str, ?value]:
    children = {}
    child_c = n.children.get('c')
    if child_c is not None:
        if isinstance(child_c, yang.gdata.Container):
            children['b:c'] = to_json_basics__c(child_c)
    return children

