from yang.schema import *
import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_json_basics__c__l_str_def(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_basics__c__l_str_def_quoted(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_basics__c__l_uint64_def(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_json_basics__c__l_union_def_str(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_basics__c__l_union_def_int(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_basics__c__l_union_def_float(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_basics__c__l_union_def_bool(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_basics__c__l_union_def_enumeration(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_basics__c__l_binary_def(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('binary', val)

class basics__c(yang.adata.MNode):
    l_str_def: str
    l_str_def_quoted: str
    l_uint64_def: int
    l_union_def_str: value
    l_union_def_int: value
    l_union_def_float: value
    l_union_def_bool: value
    l_union_def_enumeration: value
    l_binary_def: bytes

    mut def __init__(self, l_str_def: ?str=None, l_str_def_quoted: ?str=None, l_uint64_def: ?int=None, l_union_def_str: ?value=None, l_union_def_int: ?value=None, l_union_def_float: ?value=None, l_union_def_bool: ?value=None, l_union_def_enumeration: ?value=None, l_binary_def: ?bytes=None):
        self._ns = 'http://example.com/basics'
        self.l_str_def = l_str_def if l_str_def is not None else "foo"
        self.l_str_def_quoted = l_str_def_quoted if l_str_def_quoted is not None else "\"foo\""
        self.l_uint64_def = l_uint64_def if l_uint64_def is not None else 1234567890
        self.l_union_def_str = l_union_def_str if l_union_def_str is not None else "foo"
        self.l_union_def_int = l_union_def_int if l_union_def_int is not None else 1234567890
        self.l_union_def_float = l_union_def_float if l_union_def_float is not None else 1.23
        self.l_union_def_bool = l_union_def_bool if l_union_def_bool is not None else False
        self.l_union_def_enumeration = l_union_def_enumeration if l_union_def_enumeration is not None else "unlimited"
        self.l_binary_def = l_binary_def if l_binary_def is not None else base64.decode('SGVsbG8gQWN0b24g8J+roQ=='.encode())

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l_str_def = self.l_str_def
        if _l_str_def is not None:
            children['l_str_def'] = yang.gdata.Leaf('string', _l_str_def)
        _l_str_def_quoted = self.l_str_def_quoted
        if _l_str_def_quoted is not None:
            children['l_str_def_quoted'] = yang.gdata.Leaf('string', _l_str_def_quoted)
        _l_uint64_def = self.l_uint64_def
        if _l_uint64_def is not None:
            children['l_uint64_def'] = yang.gdata.Leaf('uint64', _l_uint64_def)
        _l_union_def_str = self.l_union_def_str
        if _l_union_def_str is not None:
            children['l_union_def_str'] = yang.gdata.Leaf('union', _l_union_def_str)
        _l_union_def_int = self.l_union_def_int
        if _l_union_def_int is not None:
            children['l_union_def_int'] = yang.gdata.Leaf('union', _l_union_def_int)
        _l_union_def_float = self.l_union_def_float
        if _l_union_def_float is not None:
            children['l_union_def_float'] = yang.gdata.Leaf('union', _l_union_def_float)
        _l_union_def_bool = self.l_union_def_bool
        if _l_union_def_bool is not None:
            children['l_union_def_bool'] = yang.gdata.Leaf('union', _l_union_def_bool)
        _l_union_def_enumeration = self.l_union_def_enumeration
        if _l_union_def_enumeration is not None:
            children['l_union_def_enumeration'] = yang.gdata.Leaf('union', _l_union_def_enumeration)
        _l_binary_def = self.l_binary_def
        if _l_binary_def is not None:
            children['l_binary_def'] = yang.gdata.Leaf('binary', _l_binary_def)
        return yang.gdata.Container(children, ns='http://example.com/basics')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=n.get_opt_str('l_str_def'), l_str_def_quoted=n.get_opt_str('l_str_def_quoted'), l_uint64_def=n.get_opt_int('l_uint64_def'), l_union_def_str=n.get_opt_value('l_union_def_str'), l_union_def_int=n.get_opt_value('l_union_def_int'), l_union_def_float=n.get_opt_value('l_union_def_float'), l_union_def_bool=n.get_opt_value('l_union_def_bool'), l_union_def_enumeration=n.get_opt_value('l_union_def_enumeration'), l_binary_def=n.get_opt_bytes('l_binary_def'))
        return basics__c()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> basics__c:
        if n != None:
            return basics__c(l_str_def=yang.gdata.from_xml_opt_str(n, 'l_str_def'), l_str_def_quoted=yang.gdata.from_xml_opt_str(n, 'l_str_def_quoted'), l_uint64_def=yang.gdata.from_xml_opt_int(n, 'l_uint64_def'), l_union_def_str=yang.gdata.from_xml_opt_value(n, 'l_union_def_str'), l_union_def_int=yang.gdata.from_xml_opt_value(n, 'l_union_def_int'), l_union_def_float=yang.gdata.from_xml_opt_value(n, 'l_union_def_float'), l_union_def_bool=yang.gdata.from_xml_opt_value(n, 'l_union_def_bool'), l_union_def_enumeration=yang.gdata.from_xml_opt_value(n, 'l_union_def_enumeration'), l_binary_def=yang.gdata.from_xml_opt_bytes(n, 'l_binary_def'))
        return basics__c()


mut def from_json_path_basics__c(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l_str_def':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_str_def_quoted':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_uint64_def':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_union_def_str':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_union_def_int':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_union_def_float':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_union_def_bool':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_union_def_enumeration':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'l_binary_def':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_basics__c(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_basics__c(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l_str_def = jd.get('l_str_def')
    if child_l_str_def is not None:
        children['l_str_def'] = from_json_basics__c__l_str_def(child_l_str_def)
    child_l_str_def_quoted = jd.get('l_str_def_quoted')
    if child_l_str_def_quoted is not None:
        children['l_str_def_quoted'] = from_json_basics__c__l_str_def_quoted(child_l_str_def_quoted)
    child_l_uint64_def = jd.get('l_uint64_def')
    if child_l_uint64_def is not None:
        children['l_uint64_def'] = from_json_basics__c__l_uint64_def(child_l_uint64_def)
    child_l_union_def_str = jd.get('l_union_def_str')
    if child_l_union_def_str is not None:
        children['l_union_def_str'] = from_json_basics__c__l_union_def_str(child_l_union_def_str)
    child_l_union_def_int = jd.get('l_union_def_int')
    if child_l_union_def_int is not None:
        children['l_union_def_int'] = from_json_basics__c__l_union_def_int(child_l_union_def_int)
    child_l_union_def_float = jd.get('l_union_def_float')
    if child_l_union_def_float is not None:
        children['l_union_def_float'] = from_json_basics__c__l_union_def_float(child_l_union_def_float)
    child_l_union_def_bool = jd.get('l_union_def_bool')
    if child_l_union_def_bool is not None:
        children['l_union_def_bool'] = from_json_basics__c__l_union_def_bool(child_l_union_def_bool)
    child_l_union_def_enumeration = jd.get('l_union_def_enumeration')
    if child_l_union_def_enumeration is not None:
        children['l_union_def_enumeration'] = from_json_basics__c__l_union_def_enumeration(child_l_union_def_enumeration)
    child_l_binary_def = jd.get('l_binary_def')
    if child_l_binary_def is not None:
        children['l_binary_def'] = from_json_basics__c__l_binary_def(child_l_binary_def)
    return yang.gdata.Container(children)

mut def to_json_basics__c(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_l_str_def = n.children.get('l_str_def')
    if child_l_str_def is not None:
        if isinstance(child_l_str_def, yang.gdata.Leaf):
            children['l_str_def'] = child_l_str_def.val
    child_l_str_def_quoted = n.children.get('l_str_def_quoted')
    if child_l_str_def_quoted is not None:
        if isinstance(child_l_str_def_quoted, yang.gdata.Leaf):
            children['l_str_def_quoted'] = child_l_str_def_quoted.val
    child_l_uint64_def = n.children.get('l_uint64_def')
    if child_l_uint64_def is not None:
        if isinstance(child_l_uint64_def, yang.gdata.Leaf):
            children['l_uint64_def'] = child_l_uint64_def.val
    child_l_union_def_str = n.children.get('l_union_def_str')
    if child_l_union_def_str is not None:
        if isinstance(child_l_union_def_str, yang.gdata.Leaf):
            children['l_union_def_str'] = child_l_union_def_str.val
    child_l_union_def_int = n.children.get('l_union_def_int')
    if child_l_union_def_int is not None:
        if isinstance(child_l_union_def_int, yang.gdata.Leaf):
            children['l_union_def_int'] = child_l_union_def_int.val
    child_l_union_def_float = n.children.get('l_union_def_float')
    if child_l_union_def_float is not None:
        if isinstance(child_l_union_def_float, yang.gdata.Leaf):
            children['l_union_def_float'] = child_l_union_def_float.val
    child_l_union_def_bool = n.children.get('l_union_def_bool')
    if child_l_union_def_bool is not None:
        if isinstance(child_l_union_def_bool, yang.gdata.Leaf):
            children['l_union_def_bool'] = child_l_union_def_bool.val
    child_l_union_def_enumeration = n.children.get('l_union_def_enumeration')
    if child_l_union_def_enumeration is not None:
        if isinstance(child_l_union_def_enumeration, yang.gdata.Leaf):
            children['l_union_def_enumeration'] = child_l_union_def_enumeration.val
    child_l_binary_def = n.children.get('l_binary_def')
    if child_l_binary_def is not None:
        if isinstance(child_l_binary_def, yang.gdata.Leaf):
            children['l_binary_def'] = child_l_binary_def.val
    return children

class root(yang.adata.MNode):
    c: basics__c

    mut def __init__(self, c: ?basics__c=None):
        self._ns = ''
        self.c = c if c is not None else basics__c()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _c = self.c
        if _c is not None:
            children['c'] = _c.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(c=basics__c.from_gdata(n.get_opt_container('c')))
        return root()

    @staticmethod
    mut def from_xml(n: ?xml.Node) -> root:
        if n != None:
            return root(c=basics__c.from_xml(yang.gdata.get_xml_opt_child(n, 'c', 'http://example.com/basics')))
        return root()


mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'basics:c':
            child = {'c': from_json_path_basics__c(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_c = jd.get('basics:c')
    if child_c is not None and isinstance(child_c, dict):
        children['c'] = from_json_basics__c(child_c)
    return yang.gdata.Container(children)

mut def to_json(n: yang.gdata.Node) -> dict[str, ?value]:
    children = {}
    child_c = n.children.get('c')
    if child_c is not None:
        if isinstance(child_c, yang.gdata.Container):
            children['basics:c'] = to_json_basics__c(child_c)
    return children

schema_namespaces: set[str] = {
    'http://example.com/basics',
}
def src_yang():
    res = []
    res.append("""module basics {
    yang-version "1.1";
    namespace "http://example.com/basics";
    prefix "b";
    container c {
        leaf l_str_def {
            type string;
            default "foo";
        }
        leaf l_str_def_quoted {
            type string;
            default "\"foo\"";
        }
        leaf l_uint64_def {
            type uint64;
            default 1234567890;
        }
        leaf l_union_def_str {
            type union {
                type string;
                type uint64;
            }
            default "foo";
        }
        leaf l_union_def_int {
            type union {
                type string;
                type uint64;
            }
            default 1234567890;
        }
        leaf l_union_def_float {
            type union {
                type string;
                type decimal64;
            }
            default 1.23;
        }
        leaf l_union_def_bool {
            type union {
                type string;
                type boolean;
            }
            default false;
        }
        leaf l_union_def_enumeration {
            type union {
                type enumeration {
                enum unlimited;
                }
                type uint16;
            }
            default unlimited;
        }
        leaf l_binary_def {
            type binary;
            default "SGVsbG8gQWN0b24g8J+roQ==";
        }
    }
}""")
    return res

def src_schema():
    res = {}
    res["basics"] = Module('basics', yang_version=1.1, namespace='http://example.com/basics', prefix='b', children=[
    Container('c', children=[
        Leaf('l_str_def', type_=Type('string'), default='foo'),
        Leaf('l_str_def_quoted', type_=Type('string'), default='"foo"'),
        Leaf('l_uint64_def', type_=Type('uint64'), default='1234567890'),
        Leaf('l_union_def_str', type_=Type('union', type_=[
        Type('string'),
        Type('uint64')
    ]), default='foo'),
        Leaf('l_union_def_int', type_=Type('union', type_=[
        Type('string'),
        Type('uint64')
    ]), default='1234567890'),
        Leaf('l_union_def_float', type_=Type('union', type_=[
        Type('string'),
        Type('decimal64')
    ]), default='1.23'),
        Leaf('l_union_def_bool', type_=Type('union', type_=[
        Type('string'),
        Type('boolean')
    ]), default='false'),
        Leaf('l_union_def_enumeration', type_=Type('union', type_=[
        Type('enumeration', enum=[
                Enum('unlimited')
            ]),
        Type('uint16')
    ]), default='unlimited'),
        Leaf('l_binary_def', type_=Type('binary'), default='SGVsbG8gQWN0b24g8J+roQ==')
    ])
])
    return res

def src_schema_compiled():
    res = {}
    res["basics"] = Module('basics', yang_version=1.1, namespace='http://example.com/basics', prefix='b', children=[
    Container('c', children=[
        Leaf('l_str_def', type_=Type('string'), default='foo'),
        Leaf('l_str_def_quoted', type_=Type('string'), default='"foo"'),
        Leaf('l_uint64_def', type_=Type('uint64'), default='1234567890'),
        Leaf('l_union_def_str', type_=Type('union', type_=[
        Type('string'),
        Type('uint64')
    ]), default='foo'),
        Leaf('l_union_def_int', type_=Type('union', type_=[
        Type('string'),
        Type('uint64')
    ]), default='1234567890'),
        Leaf('l_union_def_float', type_=Type('union', type_=[
        Type('string'),
        Type('decimal64')
    ]), default='1.23'),
        Leaf('l_union_def_bool', type_=Type('union', type_=[
        Type('string'),
        Type('boolean')
    ]), default='false'),
        Leaf('l_union_def_enumeration', type_=Type('union', type_=[
        Type('enumeration', enum=[
                Enum('unlimited')
            ]),
        Type('uint16')
    ]), default='unlimited'),
        Leaf('l_binary_def', type_=Type('binary'), default='SGVsbG8gQWN0b24g8J+roQ==')
    ])
])
    return res
