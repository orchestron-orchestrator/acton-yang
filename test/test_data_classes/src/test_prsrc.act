import testing

import yang
import yang.schema
import yang_one
import yang_foo

def _module_name(sn: yang.schema.SchemaNode) -> str:
    if isinstance(sn, yang.schema.Module):
        return sn.name
    elif isinstance(sn, yang.schema.Submodule):
        return sn.name
    else:
        raise ValueError("Expected Module or Submodule, got %s" % type(sn))

def _test_prsrc_yang_one_roundtrip():
    """Test prsrc() consistency after restoring the schema from data structure

    We restore the schema tree (ys2) from an auxiliary data structure stored in
    the adata module. Then we compare the restored schema tree with a schema
    tree (ys1) created directly from YANG (also grabbed the adata module).
    """
    # schema_2 contains Module and Submodule objects from parsed YANG
    schema_2 = yang_one.src_schema()
    for y1 in yang_one.src_yang():
        ys1 = yang.schema_from_src(y1)
        ys2 = schema_2[_module_name(ys1)]
        # Compare the Module or Submodule objects for equality using the Eq extension (generated)
        testing.assertEqual(ys1, ys2)
        # Compare the output of prsrc() to ensure we can do it again and it is stable
        testing.assertEqual(ys1.prsrc(), ys2.prsrc())

def _test_prsrc_yang_foo_roundtrip():
    """Test prsrc() consistency after restoring the schema from data structure

    We restore the schema tree (ys2) from an auxiliary data structure stored in
    the adata module. Then we compare the restored schema tree with a schema
    tree (ys1) created directly from YANG (also grabbed the adata module).
    """
    # schema_2 contains Module and Submodule objects from parsed YANG
    schema_2 = yang_foo.src_schema()
    for y1 in yang_foo.src_yang():
        ys1 = yang.schema_from_src(y1)
        ys2 = schema_2[_module_name(ys1)]
        # Compare the Module or Submodule objects for equality using the Eq extension (generated)
        testing.assertEqual(ys1, ys2)
        # Compare the output of prsrc() to ensure we can do it again and it is stable
        testing.assertEqual(ys1.prsrc(), ys2.prsrc())

def _test_prsrc_yang_one_compiled_roundtrip():
    """Test compiled schema prsrc() consistency after restoring the schema from data structure

    We restore the compiled schema tree which is a list of modules (m2) from an
    auxiliary data structure stored in the adata module. Then we compare the
    restored schema tree with a newly compiled schema tree modules (m1) created
    directly from YANG (also grabbed the adata module).
    """
    modules_1 = yang.compile_modules(yang_one.src_yang())
    modules_2 = yang_one.src_schema_compiled()
    for m1 in modules_1:
        m2 = modules_2[m1.name]
        # Compare the Module objects for equality using the Eq extension (generated)
        testing.assertEqual(m1, m2)
        # Compare the output of prsrc() to ensure we can do it again
        testing.assertEqual(m1.prsrc(), m2.prsrc())

def _test_prsrc_yang_foo_compiled_roundtrip():
    """Test compiled schema prsrc() consistency after restoring the schema from data structure

    We restore the compiled schema tree which is a list of modules (m2) from an
    auxiliary data structure stored in the adata module. Then we compare the
    restored schema tree with a newly compiled schema tree modules (m1) created
    directly from YANG (also grabbed the adata module).
    """
    modules_1 = yang.compile_modules(yang_foo.src_yang())
    modules_2 = yang_foo.src_schema_compiled()
    for m1 in modules_1:
        m2 = modules_2[m1.name]
        # Compare the Module objects for equality using the Eq extension (generated)
        testing.assertEqual(m1, m2)
        # Compare the output of prsrc() to ensure we can do it again
        testing.assertEqual(m1.prsrc(), m2.prsrc())
