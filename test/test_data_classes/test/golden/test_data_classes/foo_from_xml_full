Container({
  'c1': Container({
    'f:l1': Leaf('string', foo-foo),
    'l3': Leaf('uint64', 18446744073709551615),
    'li': List(['name'], user_order=True, elements=[
      Container({
        'name': Leaf('string', tuta),
        'val': Leaf('string', baba)
      }, ['tuta'])
    ]),
    'll_uint64': LeafList('uint64', [4, 42]),
    'll_str': LeafList('string', ['kava', 'ƒçaj']),
    'l4': Leaf('string', foo-qux),
    'bar:l1': Leaf('string', foo-bar, ns='http://example.com/bar'),
    'l2': Leaf('string', bar, ns='http://example.com/bar')
  }, ns='http://example.com/foo'),
  'pc1': Container({
    'foo': Container({
      'l1': LeafList('binary', [b'Hello Acton \xf0\x9f\xab\xa1'])
    })
  }, presence=True, ns='http://example.com/foo'),
  'pc2': Container({
    'foo': Container({
      'l_mandatory': Leaf('string', baz)
    })
  }, presence=True, ns='http://example.com/foo'),
  'c.dot': Container({
    'l.dot1': Leaf('string', who put that here?!)
  }, ns='http://example.com/foo'),
  'cc': Container({
    'cake': Leaf('string', cake),
    'death': List(['name'])
  }, ns='http://example.com/foo'),
  'f:conflict': Container({
    'f:foo': Leaf('string', foo-foo),
    'f:inner': Container(presence=True),
    'bar:foo': Leaf('string', foo-augmented-from-bar, ns='http://example.com/bar'),
    'bar:inner': Container(presence=True, ns='http://example.com/bar')
  }, ns='http://example.com/foo'),
  'special': List(['yes'], ns='http://example.com/foo', elements=[
    Container({
      'yes': Leaf('boolean', True)
    }, ['true'])
  ]),
  'nested': Container({
    'f:inner': Container({
      'li1': List(['name'])
    }),
    'bar:inner': Container(ns='http://example.com/bar')
  }, ns='http://example.com/foo'),
  'li-union': List(['k1', 'k2', 'k3'], ns='http://example.com/foo', elements=[
    Container({
      'k1': Leaf('string', first),
      'k2': Leaf('union', 4),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    }, ['first', '4', 'SGVsbG8gQWN0b24g8J+roQ==']),
    Container({
      'k1': Leaf('string', second),
      'k2': Leaf('union', unlimited),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    }, ['second', 'unlimited', 'SGVsbG8gQWN0b24g8J+roQ==']),
    Container({
      'k1': Leaf('string', third),
      'k2': Leaf('union', aGk=),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    }, ['third', 'aGk=', 'SGVsbG8gQWN0b24g8J+roQ=='])
  ]),
  'state': Container({
    'c1': Container()
  }, ns='http://example.com/foo'),
  'c2': Container({
    'l1': Leaf('string', foo-qux)
  }, ns='http://example.com/foo'),
  'bar:conflict': Container({
    'foo': Leaf('string', foo-bar)
  }, ns='http://example.com/bar')
})