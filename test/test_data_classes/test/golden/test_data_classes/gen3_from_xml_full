Container({
  'c1': Container({
    'f:l1': Leaf('string', 'foo-foo'),
    'l3': Leaf('uint64', 18446744073709551615),
    'l_empty': Leaf('empty', True),
    'li': List(['name'], user_order=True, elements=[
      Container({
        'name': Leaf('string', 'tuta'),
        'val': Leaf('string', 'baba')
      })
    ]),
    'll_uint64': LeafList('uint64', [4, 42]),
    'll_str': LeafList('string', ['kava', 'ƒçaj']),
    'l_identityref': Leaf('identityref', Identityref('fooy', ns='http://example.com/foo', mod='foo', pfx='f')),
    'll_identityref': LeafList('identityref', [Identityref('bary', ns='http://example.com/bar', mod='bar', pfx='bar')]),
    'l4': Leaf('string', 'foo-qux'),
    'bar:l1': Leaf('string', 'foo-bar', ns='http://example.com/bar', module='bar'),
    'l2': Leaf('string', 'bar', ns='http://example.com/bar', module='bar')
  }, ns='http://example.com/foo', module='foo'),
  'pc1': Container({
    'foo': Container({
      'l1': LeafList('binary', [b'Hello Acton \xf0\x9f\xab\xa1'])
    })
  }, presence=True, ns='http://example.com/foo', module='foo'),
  'pc2': Container({
    'foo': Container({
      'l_mandatory': Leaf('string', 'baz')
    })
  }, presence=True, ns='http://example.com/foo', module='foo'),
  'pc3': Container({
    'level1': Container({
      'l1': Leaf('string', 'l1-foo'),
      'l1-optional': Leaf('string', 'l1-optional'),
      'level2': Container({
        'l2': Leaf('string', 'l2-bar'),
        'l2-optional': Leaf('string', 'l2-optional'),
        'level3': Container({
          'l3': Leaf('string', 'l3-baz'),
          'l3-optional': Leaf('string', 'l3-optional')
        })
      })
    })
  }, presence=True, ns='http://example.com/foo', module='foo'),
  'c.dot': Container({
    'l.dot1': Leaf('string', 'who put that here?!')
  }, ns='http://example.com/foo', module='foo'),
  'cc': Container({
    'cake': Leaf('string', 'cake')
  }, ns='http://example.com/foo', module='foo'),
  'f:conflict': Container({
    'f:foo': Leaf('string', 'foo-foo'),
    'f:inner': Container(presence=True),
    'bar:foo': Leaf('string', 'foo-augmented-from-bar', ns='http://example.com/bar', module='bar'),
    'bar:inner': Container(presence=True, ns='http://example.com/bar', module='bar')
  }, ns='http://example.com/foo', module='foo'),
  'special': List(['yes'], ns='http://example.com/foo', module='foo', elements=[
    Container({
      'yes': Leaf('boolean', False)
    }),
    Container({
      'yes': Leaf('boolean', True)
    })
  ]),
  'li-union': List(['k1', 'k2', 'k3'], ns='http://example.com/foo', module='foo', elements=[
    Container({
      'k1': Leaf('string', 'first'),
      'k2': Leaf('union', '4'),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    }),
    Container({
      'k1': Leaf('string', 'second'),
      'k2': Leaf('union', 'unlimited'),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    }),
    Container({
      'k1': Leaf('string', 'third'),
      'k2': Leaf('union', b'hi'),
      'k3': Leaf('binary', b'Hello Acton \xf0\x9f\xab\xa1')
    })
  ]),
  'c2': Container({
    'l1': Leaf('string', 'foo-qux')
  }, ns='http://example.com/foo', module='foo'),
  'test-idref': Container({
    'idref': LeafList('identityref', [Identityref('bary', ns='http://example.com/bar', mod='bar', pfx='bar'), Identityref('fooy', ns='http://example.com/foo', mod='foo', pfx='f')])
  }, ns='http://example.com/bar', module='bar'),
  'bar:conflict': Container({
    'foo': Leaf('string', 'foo-bar')
  }, ns='http://example.com/bar', module='bar')
})