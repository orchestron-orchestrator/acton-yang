
import file

import yang

def yang_to_act(wfcap: file.WriteFileCap, yangs: list[str], filename: str) -> None:
    root = yang.compile(yangs)
    src = root.prdaclass()
    wf = file.WriteFile(wfcap, filename)
    wf.write(src.encode())
    await async wf.close()

ys_one = """module foo {
    yang-version "1.1";
    namespace "http://example.com/foo";
    prefix "foo";
    container tc1 {
        leaf l1 {
            type string;
            mandatory true;
        }
        leaf l2 {
            type string;
        }
    }
    list li {
        key name;
        leaf name {
            type string;
        }

        container c1 {
            leaf l1 {
                type string;
                mandatory true;
            }
            leaf l2 {
                type string;
            }
        }
    }
}"""

ys_foo = """module foo {
    yang-version "1.1";
    namespace "http://example.com/foo";
    prefix "foo";
    container c1 {
        leaf l1 {
            type string;
        }
        leaf l3 {
            type uint64;
        }
        leaf l_empty {
            type empty;
        }
        list li {
            key name;
            leaf name {
                type string;
            }
            leaf val {
                type string;
            }
        }
        leaf-list ll_uint64 {
            type uint64;
        }
        leaf-list ll_str {
            type string;
        }
    }
    container pc1 {
        presence "p";
        container foo {
            leaf l1 {
                type string;
            }
        }
    }
    container empty-presence {
        presence "nothing else here";
    }
    container c.dot {
        leaf l.dot1 {
            type string;
        }
    }
    container cc {
        choice cake-or-death {
            case cake {
                leaf cake {
                    type string;
                    mandatory true;
                }
            }
            case death {
                list death {
                    key name;
                    leaf name {
                        type string;
                    }
                }
            }
            mandatory true;
        }
    }
    container conflict {
        leaf foo {
            type string;
        }
    }
    list special {
        key yes;
        leaf yes {
            type boolean;
        }
    }
}"""

ys_bar = """module bar {
    yang-version "1.1";
    namespace "http://example.com/bar";
    prefix "bar";
    import foo {
        prefix "foo";
    }
    augment /foo:c1 {
        leaf l2 {
            type string;
        }
    }
    augment /foo:c.dot {
        leaf l.dot2 {
            type string;
        }
    }
    container conflict {
        leaf foo {
            type string;
        }
    }
}"""

ys_basics = """module basics {
    yang-version "1.1";
    namespace "http://example.com/basics";
    prefix "b";
    container c {
        leaf l_str_def {
            type string;
            default "foo";
        }
        leaf l_str_def_quoted {
            type string;
            default "\\"foo\\"";
        }
        leaf l_uint64_def {
            type uint64;
            default 1234567890;
        }
    }
}"""


actor main(env: Env):
    wfcap = file.WriteFileCap(file.FileCap(env.cap))
    yang_to_act(wfcap, yangs=[ys_one], filename="../test_data_classes/src/yang_one.act")
    yang_to_act(wfcap, yangs=[ys_foo, ys_bar], filename="../test_data_classes/src/yang_foo.act")
    yang_to_act(wfcap, yangs=[ys_basics], filename="../test_data_classes/src/yang_basics.act")
    env.exit(0)
