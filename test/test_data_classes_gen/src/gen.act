
import file

import yang
import yang.schema

def yang_to_act(wfcap: file.WriteFileCap, yangs: list[str], filename: str, loose=False) -> None:
    modules = yang.compile_modules(yangs)
    root = yang.compile_to_droot(yang.compile_to_dmodules(modules))
    src = "from yang.schema import *\n"
    src += root.prdaclass(schema_yang=yangs, loose=loose, include_state=True)
    wf = file.WriteFile(wfcap, filename)

    src += "def src_schema():\n"
    src += "    res = {{}}\n"
    for y in yangs:
        ys = yang.schema_from_src(y)
        if isinstance(ys, yang.schema.Module):
            src += '    res["{ys.name}"] = {ys.prsrc()}\n'
        elif isinstance(ys, yang.schema.Submodule):
            src += '    res["{ys.name}"] = {ys.prsrc()}\n'
        else:
            raise ValueError("Expected Module or Submodule, got {type(ys)}")
    src += "    return res\n"
    src += "\n"

    src += "def src_schema_compiled():\n"
    src += "    res = {{}}\n"
    for m in modules:
        src += '    res["{m.name}"] = {m.prsrc()}\n'
    src += "    return res\n"

    # TF can't we write to the same file multiple times?!
    await async wf.write(src.encode())
    await async wf.close()

ys_one = r"""module foo {
    yang-version "1.1";
    namespace "http://example.com/foo";
    prefix "f";
    identity basey;
    identity fooy {
        base basey;
    }
    container tc1 {
        leaf l1 {
            type string;
            mandatory true;
        }
        leaf l2 {
            type string;
        }
    }
    list li {
        key name;
        leaf name {
            type string;
        }

        container c1 {
            leaf l1 {
                type string;
                mandatory true;
            }
            leaf l2 {
                type string;
            }
        }
    }
}"""

ys_foo = r"""module foo {
    yang-version "1.1";
    namespace "http://example.com/foo";
    prefix "f";
    include qux;
    identity fooy {
        base basey;
    }
    grouping g1 {
        leaf l1 {
            type string;
        }
        leaf l2 {
            type string;
        }
    }
    container c1 {
        leaf l1 {
            type string;
        }
        leaf l3 {
            type uint64;
        }
        leaf l_empty {
            type empty;
        }
        list li {
            ordered-by user;
            key name;
            leaf name {
                type string;
            }
            leaf val {
                type string;
            }
        }
        leaf-list ll_uint64 {
            type uint64;
        }
        leaf-list ll_str {
            type string;
        }
        leaf l_identityref {
            type identityref {
                base basey;

            }
        }
        leaf-list ll_identityref {
            type identityref {
                base basey;

            }
        }
    }
    container pc1 {
        presence "p";
        container foo {
            leaf-list l1 {
                type binary;
            }
        }
    }
    container pc2 {
        presence "p";
        container foo {
            leaf l_mandatory {
                type string;
                mandatory true;
            }
        }
    }
    container pc3 {
        presence "p";
        container level1 {
            leaf l1 {
                type string;
                mandatory true;
            }
            leaf l1-optional {
                type string;
            }
            container level2 {
                leaf l2 {
                    type string;
                    mandatory true;
                }
                leaf l2-optional {
                    type string;
                }
                container level3 {
                    leaf l3 {
                        type string;
                        mandatory true;
                    }
                    leaf l3-optional {
                        type string;
                    }
                }
            }
        }
    }
    container empty-presence {
        presence "nothing else here";
    }
    container c.dot {
        leaf l.dot1 {
            type string;
        }
    }
    container cc {
        choice cake-or-death {
            case cake {
                leaf cake {
                    type string;
                    mandatory true;
                }
            }
            case death {
                list death {
                    key name;
                    leaf name {
                        type string;
                    }
                }
            }
            mandatory true;
        }
    }
    container conflict {
        leaf foo {
            type string;
        }
        container inner {
            presence "inner presence";
        }
    }
    list special {
        key yes;
        leaf yes {
            type boolean;
        }
    }
    container nested {
        container inner {
            leaf foo {
                type string;
            }
            list li1 {
                key name;
                leaf name {
                    type string;
                }
                leaf bar {
                    type string;
                }
                list li2 {
                    key "key1 key2";
                    leaf key1 {
                        type string;
                    }
                    leaf key2 {
                        type string;
                    }
                    leaf baz {
                        type string;
                    }
                }
            }
        }
    }
    list li-union {
        key "k1 k2 k3";
        leaf k1 {
            type string;
        }
        leaf k2 {
            type union {
                type uint32;
                type enumeration {
                    enum "unlimited";
                }
                type binary;
            }
        }
        leaf k3 {
            type binary;
        }
    }
    container state {
        config false;
        container c1 {
            uses g1;
        }
    }
}"""

ys_bar = r"""module bar {
    yang-version "1.1";
    namespace "http://example.com/bar";
    prefix "bar";
    import foo {
        prefix "f";
    }
    identity bary {
        base f:basey;
    }
    augment /f:c1 {
        // create a conflict with /f:c1/l1
        uses f:g1;
    }
    augment /f:c.dot {
        leaf l.dot2 {
            type string;
        }
    }
    container conflict {
        leaf foo {
            type string;
        }
    }
    augment /f:conflict {
        leaf foo {
            type string;
        }
        container inner {
            presence "inner presence from bar";
        }
    }
    augment /f:nested {
        // conflict with /f:nested/inner
        container inner {
            leaf foo {
                type string;
            }
        }
    }
    augment /f:nested/inner/li1 {
        leaf bar {
            type string;
        }
    }
}"""

ys_qux = r"""submodule qux {
    yang-version "1.1";
    belongs-to foo {
        prefix "f";
    }
    identity basey;
    // Must not conflict with /f:c1
    container c2 {
        leaf l1 {
            type string;
        }
    }
    augment /f:c1 {
        leaf l4 {
            type string;
        }
    }
}"""

ys_basics = r"""module basics {
    yang-version "1.1";
    namespace "http://example.com/basics";
    prefix "b";
    identity id1;
    container c {
        leaf l_str_def {
            type string;
            default "foo";
        }
        leaf l_str_def_quoted {
            type string;
            default "\"foo\"";
        }
        leaf l_uint64_def {
            type uint64;
            default 1234567890;
        }
        leaf l_union_def_str {
            type union {
                type string;
                type uint64;
            }
            default "foo";
        }
        leaf l_union_def_int {
            type union {
                type string;
                type uint64;
            }
            default 1234567890;
        }
        leaf l_union_def_float {
            type union {
                type string;
                type decimal64;
            }
            default 1.23;
        }
        leaf l_union_def_bool {
            type union {
                type string;
                type boolean;
            }
            default false;
        }
        leaf l_union_def_enumeration {
            type union {
                type enumeration {
                enum unlimited;
                }
                type uint16;
            }
            default unlimited;
        }
        leaf l_binary_def {
            type binary;
            default "SGVsbG8gQWN0b24g8J+roQ==";
        }
        leaf l_identityref_def {
            type identityref {
                base id1;
            }
            default id1;
        }
    }
}"""


actor main(env: Env):
    wfcap = file.WriteFileCap(file.FileCap(env.cap))
    yang_to_act(wfcap, yangs=[ys_one], filename="../test_data_classes/src/yang_one.act")
    yang_to_act(wfcap, yangs=[ys_foo, ys_qux, ys_bar], filename="../test_data_classes/src/yang_foo.act")
    yang_to_act(wfcap, yangs=[ys_foo, ys_qux, ys_bar], filename="../test_data_classes/src/yang_foo_loose.act", loose=True)
    yang_to_act(wfcap, yangs=[ys_basics], filename="../test_data_classes/src/yang_basics.act")
    env.exit(0)
