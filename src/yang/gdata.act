import testing
import xml

"""YANG data

This module defines classes for YANG data nodes. It can represent a YANG data
tree, and can be used to serialize and deserialize YANG data.
"""

# kinds of things?
# - container
# - list
# - list element
# - leaf
# - leaf-list
#
# TODO: for ordered-by user lists, we need to expose a way to influence the order of elements

# Can we simply use the order of elements in the input list to control the order in the output?
#
# ACL1 which allows SSH and rejects everything else
# <acls>
#   <acl>
#     <aces>
#       <ace>
#         <name>SSH</name>
#         <action>permit</action>
#         <matches>
#           <ipv4>
#             <source-ipv4-network>192.0.2.0/24</source-ipv4-network>
#           </ipv4>
#           <protocol>tcp</protocol>
#           <tcp>
#             <destination-port>
#               <operator>eq</operator>
#               <port>22</port>
#             </destionation-port>
#           </tcp>
#         </matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#         <action>drop</action>
#       </ace>
#     </aces>
#   </acl>
# </acls>
#
# ACL2 which allows BGP and rejects everything else
# <acls>
#   <acl>
#     <aces>
#       <ace>
#         <name>BGP-PASSIVE</name>
#         <action>permit</action>
#         <src-port>179</src-port>
#         <matches>
#           <protocol>tcp</protocol>
#           <tcp>
#             <destination-port>
#               <operator>eq</operator>
#               <port>179</port>
#             </destionation-port>
#           </tcp>
#         </matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#       </ace>
#     </aces>
#   </acl>
# </acls>
#
# And the merged result should be:
#
# <acls>
#   <acl>
#     <aces>
#       <ace>
#         <name>SSH</name>
#         <action>permit</action>
#         <matches>
#           <ipv4>
#             <source-ipv4-network>192.0.2.0/24</source-ipv4-network>
#           </ipv4>
#           <protocol>tcp</protocol>
#           <tcp>
#             <destination-port>
#               <operator>eq</operator>
#               <port>22</port>
#             </destionation-port>
#           </tcp>
#         </matches>
#       </ace>
#       <ace>
#         <name>BGP-PASSIVE</name>
#         <action>permit</action>
#         <src-port>179</src-port>
#         <matches>
#           <protocol>tcp</protocol>
#           <tcp>
#             <destination-port>
#               <operator>eq</operator>
#               <port>179</port>
#             </destionation-port>
#           </tcp>
#         </matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#         <action>drop</action>
#       </ace>
#     </aces>
#   </acl>
# </acls>
#

#
#
# ACL1 which allows SSH and rejects everything else
#   <acl>
#       <ace>
#         <name>SSH</name>
#         <action>permit</action>
#         <matches>...</matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#         <action>drop</action>
#       </ace>
#   </acl>
#
# ACL2 which allows BGP and rejects everything else
#   <acl>
#       <ace>
#         <name>BGP-PASSIVE</name>
#         <action>permit</action>
#         <matches>...</matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#       </ace>
#   </acl>
#
# And the merged result should be:
#
#   <acl>
#       <ace>
#         <name>SSH</name>
#         <action>permit</action>
#         <matches>...</matches>
#       </ace>
#       <ace>
#         <name>BGP-PASSIVE</name>
#         <action>permit</action>
#         <matches>... </matches>
#       </ace>
#       <ace>
#         <name>DROP</name>
#         <action>drop</action>
#       </ace>
#   </acl>
#
# In the merge, we cannot know if SSH should come before or after BGP-PASSIVE,
# but it dosen't matter. The only important thing is that both are before the
# DROP rule. We make sure of this by stating in both input ACLs that DROP should
# be last. Note how in ACL2 the DROP ace is not complete, it just contains the
# name and nothing else. This is fine because the merge function will take the
# complete ACE from ACL1 and merge it with the incomplete ACE from ACL2 to
# produce a complete output.

class Node(object):
    parent: ?Node
    ns: ?str
    prefix: ?str

    def prsrc(self) -> str:
        if isinstance(self, Container_):
            return "Container_(" + self.name + ", " + str(self.children) + ")"
        if isinstance(self, List):
            return "List(" + self.name + ", " + str(self.keys) + ", " + str(self.elements) + ")"
        if isinstance(self, ListElement):
            return "ListElement(" + str(self.key_vals) + ", " + str(self.children) + ")"
        if isinstance(self, Leaf):
            return "Leaf(" + self.name + ", " + str(self.val) + ")"
        return "Node()"

    def to_xmlstr(self, indent=0) -> str:
        def _indent():
            return "  " * indent
        if isinstance(self, Container_):
            xml = _indent() + "<" + self.name + ">\n"
            for child in self.children.values():
                xml += child.to_xmlstr(indent + 1)
            xml += _indent() + "</" + self.name + ">\n"
            return xml
        elif isinstance(self, Module):
            xml = ""
            for child in self.children.values():
                xml += child.to_xmlstr(indent)
            return xml
        elif isinstance(self, Root):
            xml = ""
            for child in self.children.values():
                xml += child.to_xmlstr(indent)
            return xml
        elif isinstance(self, List):
            xml = ""
            for elem in self.elements:
                xml += _indent() + "<" + self.name + ">\n"
                # Print key leafs first
                for key_idx, key_name in enumerate(self.keys):
                    xml += _indent() + "  <" + key_name + ">" + str(elem.key_vals[key_idx]) + "</" + key_name + ">\n"
                for le_childkey, le_child in elem.children.items():
                    # Skip key leafs
                    if le_childkey in self.keys:
                        continue
                    xml += le_child.to_xmlstr(indent + 1)
                xml += _indent() + "</" + self.name + ">\n"
            return xml
        elif isinstance(self, ListElement): # printing of ListElement is folded into List
            raise ValueError("ListElement should not be printed directly")
        elif isinstance(self, Leaf):
            return _indent() + "<" + self.name + ">" + str(self.val) + "</" + self.name + ">\n"
        elif isinstance(self, LeafList):
            xml = ""
            for val in self.vals:
                xml += _indent() + "<" + self.name + ">" + str(val) + "</" + self.name + ">\n"
            return xml
        raise ValueError("Unsupported node type in to_xml: " + type(self))

    # --
    def get_leaf(self, name) -> Leaf:
        if isinstance(self, Inner):
            for child in self.children.values():
                if isinstance(child, Leaf) and child.name == name:
                    return child
        raise ValueError("Cannot find leaf child with name " + name)

    def get_leafs(self, name) -> list[Leaf]:
        if isinstance(self, Inner):
            res = []
            for child in self.children.values():
                if isinstance(child, Leaf) and child.name == name:
                    res.append(child)
            return res
        raise ValueError("Cannot find leaf child with name " + name)

    #--

    def get_container(self, name) -> Container_:
        if isinstance(self, Inner):
            for child in self.children.values():
                if isinstance(child, Container_):
                    if child.name == name:
                        return child
        raise ValueError("Cannot find container child with name " + name)

    def get_opt_container(self, name) -> ?Container_:
        """This is for P-container"""
        try:
            return self.get_container(name)
        except ValueError:
            return None

    def get_list(self, name) -> List:
        if isinstance(self, Inner):
            for child in self.children.values():
                if isinstance(child, List):
                    if child.name == name:
                        return child
        raise ValueError("Cannot find list child with name " + name)

    def get_bool(self, name) -> bool:
        s = self.get_str(name)
        return bool(s)

    def get_opt_bool(self, name) -> ?bool:
        try:
            return self.get_bool(name)
        except ValueError:
            return None

    def get_float(self, name) -> float:
        s = self.get_str(name)
        return float(s)

    def get_opt_float(self, name) -> ?float:
        try:
            return self.get_float(name)
        except ValueError:
            return None

    def get_int(self, name) -> int:
        s = self.get_str(name)
        return int(s)

    def get_opt_int(self, name) -> ?int:
        try:
            return self.get_int(name)
        except ValueError:
            return None

    def get_str(self, name) -> str:
        if isinstance(self, Inner):
            for child in self.children.values():
                if isinstance(child, Leaf) and child.name == name:
                    childval = child.val
                    if isinstance(childval, str):
                        return childval
        raise ValueError("Cannot find leaf child with name " + name)

    def get_opt_str(self, name) -> ?str:
        try:
            return self.get_str(name)
        except ValueError:
            return None

    def get_value(self, name) -> value:
        s = self.get_str(name)
        if isinstance(s, value):
            return s
        raise ValueError("unreachable, all strings are values")

    def get_opt_value(self, name) -> ?value:
        try:
            return self.get_value(name)
        except ValueError:
            return None

    def get_strs(self, name) -> list[str]:
        if isinstance(self, Inner):
            for child in self.children.values():
                if isinstance(child, LeafList) and child.name == name:
                    cvals = child.vals
                    if isinstance(cvals, list) and len(cvals) > 0 and isinstance(cvals[0], str):
                        return cvals
        raise ValueError("Cannot find leaf-list child with name " + name)

    def get_values(self, name) -> list[value]:
        res = []
        for leaf in self.get_leafs(name):
            res.append(leaf.val)
        return res

    # plural opts
    def get_opt_strs(self, name) -> list[str]:
        try:
            return self.get_strs(name)
        except ValueError:
            return []

    def get_opt_values(self, name) -> list[value]:
        try:
            return self.get_values(name)
        except ValueError:
            return []

extension Node(Eq):
    def __eq__(self, other: Node) -> bool:
        if isinstance(self, Container_) and isinstance(other, Container_):
            if self.name != other.name:
                return False
            if set(self.children.keys()) != set(other.children.keys()):
                return False
            for key in self.children.keys():
                if self.children[key] != other.children[key]:
                    return False
            return True

        if isinstance(self, Leaf) and isinstance(other, Leaf):
            selfval = self.val
            otherval = other.val
            if isinstance(selfval, int) and isinstance(otherval, int):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, str) and isinstance(otherval, str):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, bool) and isinstance(otherval, bool):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, float) and isinstance(otherval, float):
                return self.name == other.name and selfval == otherval
            # YANG uint8 is stored as u16 since we don't have u8.
            if isinstance(selfval, u16) and isinstance(otherval, u16):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, u32) and isinstance(otherval, u32):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, u64) and isinstance(otherval, u64):
                return self.name == other.name and selfval == otherval
            # YANG int8 is stored as i16 since we don't have i8.
            if isinstance(selfval, i16) and isinstance(otherval, i16):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, i32) and isinstance(otherval, i32):
                return self.name == other.name and selfval == otherval
            if isinstance(selfval, i64) and isinstance(otherval, i64):
                return self.name == other.name and selfval == otherval
            if type(selfval) != type(otherval):
                raise ValueError("Cannot compare Leaf nodes with different value types")
            raise ValueError("Unsupported value type in Leaf node comparison: " + type(selfval) + " == " + type(otherval))

        if isinstance(self, LeafList) and isinstance(other, LeafList):
            if self.name != other.name:
                return False
            if len(self.vals) != len(other.vals):
                return False
            for i in range(len(self.vals)):
                selfval = self.vals[i]
                otherval = other.vals[i]
                if isinstance(selfval, int) and isinstance(otherval, int):
                    return selfval == otherval
                if isinstance(selfval, str) and isinstance(otherval, str):
                    return selfval == otherval
                if isinstance(selfval, bool) and isinstance(otherval, bool):
                    return selfval == otherval
                if isinstance(selfval, float) and isinstance(otherval, float):
                    return selfval == otherval
                # YANG uint8 is stored as u16 since we don't have u8.
                if isinstance(selfval, u16) and isinstance(otherval, u16):
                    return selfval == otherval
                if isinstance(selfval, u32) and isinstance(otherval, u32):
                    return selfval == otherval
                if isinstance(selfval, u64) and isinstance(otherval, u64):
                    return selfval == otherval
                # YANG int8 is stored as i16 since we don't have i8.
                if isinstance(selfval, i16) and isinstance(otherval, i16):
                    return selfval == otherval
                if isinstance(selfval, i32) and isinstance(otherval, i32):
                    return selfval == otherval
                if isinstance(selfval, i64) and isinstance(otherval, i64):
                    return selfval == otherval
                if type(selfval) != type(otherval):
                    raise ValueError("Cannot compare Leaf nodes with different value types")
                raise ValueError("Unsupported value type in Leaf node comparison: " + type(selfval) + " == " + type(otherval))
            return True

        if isinstance(self, List) and isinstance(other, List):
            if self.name != other.name:
                return False
            if self.keys != other.keys:
                return False
            if len(self.elements) != len(other.elements):
                return False
            for i in range(len(self.elements)):
                e1: ListElement = self.elements[i]
                e2: ListElement = other.elements[i]
                # TODO: unnecessary? self / other.elements should be ListElement which is a Node, always
                if isinstance(e1, Node) and isinstance(e2, Node):
                    return e1 == e2
                raise ValueError("unreachable at List.__eq__")
            return True

        if isinstance(self, ListElement) and isinstance(other, ListElement):
            if self.key_vals != other.key_vals:
                return False
            if set(self.children.keys()) != set(other.children.keys()):
                return False
            for key in self.children.keys():
                if self.children[key] != other.children[key]:
                    return False
            return True

        raise ValueError("Cannot compare nodes of different types" + str(self) + " " + str(other))

class Inner(Node):
    children: dict[str, Node]

class Root(Inner):
    name: str

    def __init__(self, children: dict[str, Node]={}, ns=None, prefix=None):
        self.name = ""
        self.children = children
        self.ns = ns
        self.prefix = prefix

class Module(Inner):
    name: str

    def __init__(self, name: str, children: dict[str, Node]={}, ns=None, prefix=None):
        self.name = name
        self.children = children
        self.ns = ns
        self.prefix = prefix
        for child in self.children.values():
            child.parent = self


class Container_(Inner):
    name: str

    def __init__(self, name: str, children: dict[str, Node]={}, ns=None, prefix=None):
        self.name = name
        self.children = children
        self.ns = ns
        self.prefix = prefix
        for child in self.children.values():
            child.parent = self

class List(Node):
    name: str
    keys: list[str] # name of the key leafs
    elements: list[ListElement]
    user_order: bool

    def __init__(self, name: str, keys: list[str], elements: list[ListElement]=[], user_order=False, ns=None, prefix=None):
        self.name = name
        self.keys = keys
        self.elements = elements
        self.user_order = user_order
        self.ns = ns
        self.prefix = prefix

class ListElement(Inner):
    #_list: List
    key_vals: list[str] # values of the key leafs

    def __init__(self, key_vals: list[str], children: dict[str, Node]={}):
        self.key_vals = key_vals
        self.children = children
        for child in self.children.values():
            child.parent = self

    def key_str(self) -> str:
        def escape_keys(key_val):
            return key_val.replace(",", "\\,")
        return ",".join(map(escape_keys, self.key_vals))

class Leaf(Node):
    name: str
    val: value

    def __init__(self, name: str, val: value, ns=None, prefix=None):
        self.name = name
        self.val = val
        self.ns = ns
        self.prefix = prefix

class LeafList(Node):
    name: str
    vals: list[value]

    def __init__(self, name: str, vals: ?value, ns=None, prefix=None):
        self.name = name
        self.ns = ns
        self.prefix = prefix
        if isinstance(vals, list) and len(vals) > 0 and isinstance(vals[0], value):
            self.vals = vals
        else:
            self.vals = []


def merge(a: Node, b: Node) -> Node:
    if isinstance(a, Container_) and isinstance(b, Container_):
        # Find overlapping children, which might need merging on their own
        overlapping = set(a.children.keys()) & set(b.children.keys())
        # Avoid comprehensions
        new_children: dict[str, Node] = {}
        for key in overlapping:
            new_children[key] = merge(a.children[key], b.children[key])
        # Add children that are not in the other node
        for key in set(a.children.keys()) - set(b.children.keys()):
            new_children[key] = a.children[key]
        for key in set(b.children.keys()) - set(a.children.keys()):
            new_children[key] = b.children[key]
        return Container_(a.name, children=new_children)
    elif isinstance(a, Module) and isinstance(b, Module):
        # Find overlapping children, which might need merging on their own
        overlapping = set(a.children.keys()) & set(b.children.keys())
        # Avoid comprehensions
        new_children: dict[str, Node] = {}
        for key in overlapping:
            new_children[key] = merge(a.children[key], b.children[key])
        # Add children that are not in the other node
        for key in set(a.children.keys()) - set(b.children.keys()):
            new_children[key] = a.children[key]
        for key in set(b.children.keys()) - set(a.children.keys()):
            new_children[key] = b.children[key]
        return Module(a.name, children=new_children)
    elif isinstance(a, Leaf) and isinstance(b, Leaf):
        if a.name != b.name:
            raise ValueError("Cannot merge leaves with different names")
        aval = a.val
        bval = b.val
        if isinstance(aval, int) and isinstance(bval, int):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, str) and isinstance(bval, str):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, bool) and isinstance(bval, bool):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, float) and isinstance(bval, float):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        # YANG uint8 is stored as u16 since we don't have u8.
        if isinstance(aval, u16) and isinstance(bval, u16):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, u32) and isinstance(bval, u32):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, u64) and isinstance(bval, u64):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        # YANG int8 is stored as i16 since we don't have i8.
        if isinstance(aval, i16) and isinstance(bval, i16):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, i32) and isinstance(bval, i32):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        if isinstance(aval, i64) and isinstance(bval, i64):
            if aval == bval:
                return a
            raise ValueError("Cannot merge leaves with different values, " + str(aval) + " != " + str(bval))
        raise ValueError("Unsupported value type in Leaf node comparison: " + type(aval) + " != " + type(bval))
    elif isinstance(a, List) and isinstance(b, List):
        if a.name != b.name:
            raise ValueError("Cannot merge lists with different names")
        if a.keys != b.keys:
            raise ValueError("Cannot merge lists with different keys")
        if a.user_order != b.user_order:
            raise ValueError("Cannot merge lists with different user_order")

        new_elements: list[ListElement] = []

        if a.user_order:
            # Create a new list with elements from a, also merging elements that are
            # present in both lists
            for a_elem in a.elements:
                found = False
                for b_elem in b.elements:
                    if a_elem.key_vals == b_elem.key_vals:
                        new_element = merge(a_elem, b_elem)
                        if isinstance(new_element, ListElement):
                            new_elements.append(new_element)
                        found = True
                        break
                if not found:
                    new_elements.append(a_elem)
            # Add elements from b that are not in a
            insertion_index = 0
            for b_elem in b.elements:
                # Check if the element is already in the list. If it is, we should
                # insert the next element after it, so grab the index.
                found = False
                for idx, a_elem in enumerate(new_elements[insertion_index:]):
                    if a_elem.key_vals == b_elem.key_vals:
                        found = True
                        insertion_index = idx + 1
                        break
                if found:
                    continue
                new_elements.insert(insertion_index, b_elem)
                insertion_index += 1
        else:
            all_elements: dict[str, list[ListElement]] = {}

            def escape_keys(key_val):
                return key_val.replace(",", "\\,")
            for elem in a.elements:
                escaped_keys = map(escape_keys, elem.key_vals)
                key_str = ",".join(elem.key_vals)
                if key_str not in all_elements:
                    all_elements[key_str] = []
                all_elements[key_str].append(elem)
            for elem in b.elements:
                escaped_keys = map(escape_keys, elem.key_vals)
                key_str = ",".join(elem.key_vals)
                if key_str not in all_elements:
                    all_elements[key_str] = []
                all_elements[key_str].append(elem)

            for key_str in sorted(all_elements.keys()):
                # merge all elements with the same key values
                elems: list[ListElement] = all_elements[key_str]
                new_elem = elems[0]
                if len(elems) > 1:
                    for elem in elems[1:]:
                        new_elem = merge(new_elem, elem)
                if isinstance(new_elem, ListElement):
                    new_elements.append(new_elem)
                else:
                    raise ValueError("unreachable, new_elem should always be a ListElement")

        return List(a.name, a.keys, new_elements)

    elif isinstance(a, List) and isinstance(b, List):
        if a.name != b.name:
            raise ValueError("Cannot merge lists with different names")
        if a.keys != b.keys:
            raise ValueError("Cannot merge lists with different keys")
        new_elements: list[ListElement] = []
        for a_elem in a.elements:
            found = False
            for b_elem in b.elements:
                if a_elem.key_vals == b_elem.key_vals:
                    new_element = merge(a_elem, b_elem)
                    if isinstance(new_element, ListElement):
                        new_elements.append(new_element)
                    found = True
                    break
            if not found:
                new_elements.append(a_elem)
        for b_elem in b.elements:
            found = False
            for a_elem in a.elements:
                if a_elem.key_vals == b_elem.key_vals:
                    found = True
                    break
            if not found:
                new_elements.append(b_elem)
        return List(a.name, a.keys, new_elements)

    elif isinstance(a, ListElement) and isinstance(b, ListElement):
        if a.key_vals != b.key_vals:
            raise ValueError("Cannot merge list elements with different keys")
        # Find overlapping children, which might need merging on their own
        overlapping = set(a.children.keys()) & set(b.children.keys())
        # Avoid comprehensions
        new_children: dict[str, Node] = {}
        for key in overlapping:
            new_children[key] = merge(a.children[key], b.children[key])
        # Add children that are not in the other node
        for key in set(a.children.keys()) - set(b.children.keys()):
            new_children[key] = a.children[key]
        for key in set(b.children.keys()) - set(a.children.keys()):
            new_children[key] = b.children[key]
        return ListElement(a.key_vals, children=new_children)
    elif isinstance(a, Root) and isinstance(b, Root):
        # Find overlapping children, which might need merging on their own
        overlapping = set(a.children.keys()) & set(b.children.keys())
        # Avoid comprehensions
        new_children: dict[str, Node] = {}
        for key in overlapping:
            new_children[key] = merge(a.children[key], b.children[key])
        # Add children that are not in the other node
        for key in set(a.children.keys()) - set(b.children.keys()):
            new_children[key] = a.children[key]
        for key in set(b.children.keys()) - set(a.children.keys()):
            new_children[key] = b.children[key]
        return Root(children=new_children)
    elif type(a) != type(b):
        raise ValueError("Cannot merge nodes of different types")
    else:
        raise ValueError("Unsupported node type in merge: " + type(a))


def get_xml_child(n: xml.Node, name: str) -> xml.Node:
    for child in n.children:
        if child.tag == name:
            return child
    raise ValueError("Cannot find xml child with name " + name)

#def get_xml_opt_child(n: xml.Node, name: str) -> ?xml.Node:
#    for child in n.children:
#        if child.tag == name:
#            return child
#    raise None

def get_xml_child_text(n: xml.Node, name: str) -> str:
    for child in n.children:
        if child.tag == name:
            childtext = child.text
            if childtext is not None:
                return childtext
    raise ValueError("Cannot find xml child with name " + name)

def get_xml_children(n: xml.Node, name: str) -> list[xml.Node]:
    res = []
    for child in n.children:
        if child.tag == name:
            res.append(child)
    return res

def from_xml_opt_bool(n: xml.Node, name: str) -> ?bool:
    try:
        text = get_xml_child(n, name).text
        if text is not None:
            return bool(text)
    except ValueError:
        return None

def from_xml_float(n: xml.Node, name: str) -> float:
    text = get_xml_child(n, name).text
    if text is not None:
        res = float(text)
        return res
    raise ValueError("Cannot find xml child with name " + name)
    return 13.37

def from_xml_opt_float(n: xml.Node, name: str) -> ?float:
    try:
        text = get_xml_child(n, name).text
        if text is not None:
            res = float(text)
            return res
    except ValueError:
        return None

def from_xml_opt_int(n: xml.Node, name: str) -> ?int:
    try:
        text = get_xml_child(n, name).text
        if text is not None:
            return int(text)
    except ValueError:
        return None

def from_xml_int(n: xml.Node, name: str) -> int:
    r = from_xml_opt_int(n, name)
    if r is not None:
        return r
    raise ValueError("Cannot find xml child with name " + name)

def from_xml_opt_str(n: xml.Node, name: str) -> ?str:
    try:
        return get_xml_child(n, name).text
    except ValueError:
        return None

def from_xml_str(n: xml.Node, name: str) -> str:
    r = from_xml_opt_str(n, name)
    if r is not None:
        return r
    raise ValueError("Cannot find xml child with name " + name)

def from_xml_opt_value(n: xml.Node, name: str) -> ?value:
    try:
        t = get_xml_child(n, name).text
        if isinstance(t, value):
            return t
    except ValueError:
        return None

# plural
def from_xml_opt_strs(n: xml.Node, name: str) -> list[str]:
    res = []
    for child in get_xml_children(n, name):
        ctext = child.text
        if ctext is not None:
            res.append(ctext)
    return res

def from_xml_opt_values(n: xml.Node, name: str) -> list[value]:
    res = []
    for child in get_xml_children(n, name):
        ctext = child.text
        if isinstance(ctext, value):
            res.append(ctext)
    return res

#def from_xml_opt_u16(n: xml.Node, name: str) -> ?u16:
#    try:
#        return u16(get_xml_child_text(n, name))
#    except ValueError:
#        return None
#
#def from_xml_u16(n: xml.Node, name: str) -> u16:
#    return u16(get_xml_child_text(n, name))



def _test_merge1():
    y1 = Container_("foo", {
        "a": Leaf("a", 1),
        "l1": List("l1", ["name"], [
            ListElement(["k1"], {
                "n1": Leaf("n1", 1),
                "n2": Leaf("n2", 2)
            }),
            ListElement(["k4"], {
                "n4": Leaf("n4", 4),
            }),
        ])
    })

    y2 = Container_("foo", {
        "b": Leaf("b", 2),
        "c": Leaf("c", 3),
        "l1": List("l1", ["name"], [
            ListElement(["k2"], {
                "n1": Leaf("n1", 1),
                "n3": Leaf("n3", 3)
            }),
        ]),
        "d": LeafList("d", ["a", "b", "c"])
    })

    print(y1.to_xmlstr())
    print(y2.to_xmlstr())
    res = merge(y1, y2)
    print(res.to_xmlstr())

    exp = Container_("foo", {
        "l1": List("l1", ["name"], [
            ListElement(["k1"], {
                "n1": Leaf("n1", 1),
                "n2": Leaf("n2", 2)
            }),
            ListElement(["k2"], {
                "n1": Leaf("n1", 1),
                "n3": Leaf("n3", 3)
            }),
            ListElement(["k4"], {
                "n4": Leaf("n4", 4),
            }),
        ]),
        "a": Leaf("a", 1),
        "b": Leaf("b", 2),
        "c": Leaf("c", 3),
        "d": LeafList("d", ["a", "b", "c"])
    })
    print(exp.to_xmlstr())
    testing.assertEqual(merge(y1, y2), exp)

def _test_merge_list1():
    y1 = List("l1", ["name"], [
        ListElement(["first"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["breaker"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["fourth"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["common"], {
            "n2": Leaf("n2", 2)
        }),
        ListElement(["last"], {
            "n1": Leaf("n1", 1)
        }),
    ], user_order=True)

    y2 = List("l1", ["name"], [
        ListElement(["breaker"]),
        ListElement(["second"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["third"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["common"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["last"])
    ], user_order=True)

    exp = List("l1", ["name"], [
        ListElement(["first"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["breaker"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["third"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["second"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["fourth"], {
            "n1": Leaf("n1", 1)
        }),
        ListElement(["common"], {
            "n2": Leaf("n2", 2)
        }),
        ListElement(["last"], {
            "n1": Leaf("n1", 1)
        }),
    ])
    print(merge(y1, y2).to_xmlstr())
    testing.assertEqual(exp, merge(y1, y2))

def _test_yang_data():
#    y = YContainer("root", {
#        "a": YContainer("a", {
#            "b": YList("b", ["k"], {
#                "k": YContainer("k", {
#                    "c": YContainer("c", {
#                        "d": YContainer("d", {})
#                    })
#                })
#            })
#        })
#    })

#    print(y)
#
#    y2 = YContainer("root", {
#        "a": YContainer("a", {
#            "b": YList("b", ["k"], {
#                "k": YContainer("k", {
#                    "c": YContainer("c", {
#                        "d": YContainer("d", {})
#                    })
#                })
#            })
#        })
#    })
#
#    print(y2)

#    testing.assertEqual(y, y2)
    pass

#class TestClass(object):
#
#    def __init__(self, foo: list[str]=[]):
#        self.foo = foo
#
#    def bar(self):
#        ll = LeafList("foo", self.foo)
#
#def _test_leaflist_str():
#    strs = ["a", "b", "c"]
#    y = LeafList("l", strs)
#    print(y.to_xmlstr())
#    testing.assertEqual(y.to_xmlstr(), """<l>a</l>
#<l>b</l>
#<l>c</l>
#""")
#    tc = TestClass(strs)

actor main(env):
    try:
        _test_merge_list1()
    except Exception as e:
        print(e)
        env.exit(1)
    env.exit(0)
