class PartialIdentityref:
    val: str
    ns: ?str
    mod: ?str
    pfx: ?str

    def __init__(self, val, ns: ?str=None, mod: ?str=None, pfx: ?str=None):
        self.val = val
        self.ns = ns
        self.mod = mod
        self.pfx = pfx

class Identityref:
    val: str
    ns: str
    mod: str
    pfx: str

    def __init__(self, val, ns, mod, pfx):
        self.val = val
        self.ns = ns
        self.mod = mod
        self.pfx = pfx

    def __str__(self):
        return "Identityref({repr(self.val)}, ns={repr(self.ns)}, mod={repr(self.mod)}, pfx={repr(self.pfx)})"

    def __repr__(self):
        return str(self)

    @staticmethod
    def from_json(val):
        """Create PartialIdentityref from JSON-encoded value
        """
        parts = val.split(":")
        if len(parts) == 1:
            return PartialIdentityref(parts[0])
        elif len(parts) == 2:
            return PartialIdentityref(parts[1], mod=parts[0])
        raise ValueError("Invalid identityref format: {val}")

    @staticmethod
    def from_xml(val: str, nsdefs: list[(?str, str)]):
        parts = val.split(":")
        if len(parts) == 1:
            return PartialIdentityref(parts[0])
        elif len(parts) == 2:
            for nsname, nsuri in nsdefs:
                if nsname == parts[0]:
                    return PartialIdentityref(parts[1], ns=nsuri)
        raise ValueError("Namespace {parts[0]} not defined in node: {nsdefs}")

    @staticmethod
    def from_adata(val):
        parts = val.split(":")
        if len(parts) == 1:
            return PartialIdentityref(parts[0])
        elif len(parts) == 2:
            return PartialIdentityref(parts[1], pfx=parts[0])
        raise ValueError("Invalid identityref format: {val}")


extension Identityref (Ord):
    def __eq__(self, other: Identityref) -> bool:
        self_ns = self.ns
        self_mod = self.mod
        self_pfx = self.pfx
        other_ns = other.ns
        other_mod = other.mod
        other_pfx = other.pfx
        return self.val == other.val and self_ns == other_ns and self_mod == other_mod and self_pfx == other_pfx

    def __lt__(self, other: Identityref) -> bool:
        return self.val < other.val
