#
# YANG schema
#
# This is an object model for YANG schema, based on YANG 1.1 although it should
# mostly work for YANG 1.0 just fine. There is no logic for either schema or
# data validation, so it is possible to represent an invalid schema using this
# model.
#
# - Statement: low level representation of a YANG schema as a tree of statements
# - SchemaNode: higher level representation of a YANG schema as a tree of schema nodes
# - DNode: the derived data node schema, similar to SchemaNode but for data
#   - typedefs & leaf(-list) types are resolved to their base types
#   - uses / groupings are expanded
#   - augments are applied
#
# There are two "levels" of object representation where the first low level
# representation is that of Statement. Everything in a YANG model is a
# statement, so this representation is fairly close to the YANG source code.
# For example, the order of all statements is preserved, so this model:
#
#    module foo {
#      prefix "f";
#      namespace "http://example.com/foo";
#    }
#
# Would become:
#
#   Statement("module", "foo", substatements=[
#     Statement("prefix", "f"),
#     Statement("namespace", "http://example.com/foo")
#   ])
#
# Whitespace, indentation and comments are not preserved but all parsed
# statements are. Thus if the Statements are rendered back to YANG source, it
# would look exactly like the original source code, presuming the use of
# canonical YANG formatting.
#
# The second level is that of schema nodes and is represented by the SchemaNode
# class. The SchemaNode class is a base class for all schema node types, such as
# Module, Container, List, Leaf, etc. There is a broad division between
# SchemaNodeInner, which are "inner" nodes in the schema that contain other
# nodes, e.g. have children, and SchemaNodeOuter which are the "outer" / leaf
# nodes of the tree that do not have any children. Different statements are
# modeled using discrete classes and statements that relate to a particular
# statement are attributes of that object class rather than being seen as just a
# tree of statements. For example, the following model:
#
#   module foo {
#     prefix "f";
#     namespace "http://example.com/foo";
#     container c1 {
#       leaf l1 {
#         type string;
#       }
#     }
#   }
#
# Would become:
#
#   Module("foo", namespace="http://example.com/foo", prefix="f", children=[
#     Container("c1", children=[
#       Leaf("l1", type_="string")
#     ])
#   ])
#
# Rendering that back to YANG source code will render the namespace & prefix
# statements in the canonical order specified by the YANG RFC, thus rendering
# the following:
#
#    module foo {
#      prefix "f";
#      namespace "http://example.com/foo";
#      container c1 {
#        leaf l1 {
#          type string;
#        }
#      }
#    }
#
# This higher layer SchemaNode representation is not suitable if it is desirable
# to keep statement order from the original source document (be aware that even
# with the lower leve Statement representation, whitespace & comments are still
# lost).
#
# Finally, the DNode representation is similar to the SchemaNode but focuses
# solely on the data nodes. We can think of it as "data nodes" or the "derived"
# schema (a term commonly used in the IETF to describe the result of compiling a
# YANG module). We can convert a SchemaNode tree to DNode by first compiling it
# and then running .to_dnode().

import re

RECURSION_LIMIT = 512

def _yind(n):
    return "  " * n

def _ind(n):
    return "    " * n

_builtin_types = {
    "binary",
    "bits",
    "boolean",
    "decimal64",
    "empty",
    "enumeration",
    "identityref",
    "instance-identifier",
    "int8",
    "int16",
    "int32",
    "int64",
    "leafref",
    "string",
    "uint8",
    "uint16",
    "uint32",
    "uint64",
    "union"
}

# We always quote the arguments to these keywords regardless of the content.
# This is not a strict requirement but a preference of the authors, for example
# the argument "foo" is perfectly valid with out quotes.
_quoted_arg_keywords = set([
    "argument",
    "augment",
    "contact",
    "default",
    "description",
    "length",
    "if-feature",
    "must",
    "namespace",
    "organization",
    "pattern",
    "prefix",
    "range",
    "reference",
    "refine",
    "when",
    "yang-version",
])

class Statement(object):
    kw: str
    arg: ?str
    prefix: ?str
    substatements: list[Statement]
    def __init__(self, kw: str, arg: ?str=None, prefix: ?str=None):
        self.kw = kw
        self.arg = arg
        self.prefix = prefix
        self.substatements = []

    def get_subarg(self, kw: str) -> ?str:
        for substatement in self.substatements:
            if substatement.kw == kw:
                return substatement.arg

    def get_subarg_bool(self, kw: str) -> ?bool:
        for substatement in self.substatements:
            if substatement.kw == kw:
                arg = substatement.arg
                if arg is not None:
                    return bool(arg)

    def pryang(self, indent=0):
        """Print YANG source code for this statement and its substatements
        """
        res = _yind(indent)
        prefix = self.prefix
        if prefix != None:
            res += prefix + ":"
        res += self.kw
        arg = self.arg
        if arg is not None:
            # Always quote the argument if the keyword "looks better" with the
            # argument quoted, or if the argument contains any character that
            # require quoting to make it valid YANG:
            res += " "
            m = re.match(r"[^A-Za-z0-9_-]", arg)
            quoted_arg = True if self.kw in _quoted_arg_keywords or m != None else False
            if quoted_arg:
                res += '"' + arg.replace('"', '\\"') + '"'
            else:
                res += arg
        if len(self.substatements) == 0:
            res += ";\n"
        else:
            res += " {\n"
            for substatement in self.substatements:
                res += substatement.pryang(indent+1)
            res += _yind(indent) + "}\n"
        return res


# YANG schema for data / the derived schema
#
# DNode provides a concrete YANG schema representation of a data tree. Unlike
# SchemaNode, which has a focus on properly representing the YANG schema
# document itself, including abstract concepts like imports, inherited types,
# groupings and augments, this module focuses on the statements relevant for
# representing a YANG modeled data tree. The data nodes in YANG are:
# - container, list, leaf, leaf-list, anydata, anyxml and the module itself can be
#   considered a form of container
# A YANG schema can be compiled into these data nodes, for example by expanding
# uses statements with the relevant groupings into the actual nodes and by
# applying augment statements to the relevant nodes.
#
# Similarly, concepts like config is represented as a boolean here, since all
# nodes are either config or not config, whereas in yang.schema, config is a
# tri-state value, since it can be None, meaning that the value is inherited from
# the parent node. Things like this makes it easier to work with the data tree
# from this module.
#
# Another concept is DTree which is a special node that acts as the virtual root
# of the data tree which can contain multiple YANG modules.

def optional_subtree(node: DNodeInner) -> bool:
    """Checks if a subtree is optional

    Returns True if the subtree is optional or False if any child node (or
    grandchild etc) is mandatory.
    """
    for child in node.children:
        if isinstance(child, DLeaf):
            if child.mandatory:
                return False
        elif isinstance(child, DLeafList):
            if child.min_elements > 0:
                return False
        elif isinstance(child, DContainer):
            if child.presence:
                return True
            return optional_subtree(child)
        elif isinstance(child, DList):
            if child.min_elements > 0:
                return False
    return True

def dnode_to_gd_type(node: DNode) -> str:
    """Convert DNode to GData type
    """
    if isinstance(node, DLeaf):
        return "Leaf"
    elif isinstance(node, DLeafList):
        return "LeafList"
    elif isinstance(node, DContainer):
        return "Container"
    elif isinstance(node, DList):
        return "List"
    elif isinstance(node, DAnydata):
        return "Anydata"
    elif isinstance(node, DAnyxml):
        return "Anyxml"
    elif isinstance(node, DAction):
        return "Action"
    elif isinstance(node, DRoot):
        return "Root"
    elif isinstance(node, DRpc):
        return "Rpc"
    elif isinstance(node, DInput):
        return "Input"
    elif isinstance(node, DOutput):
        return "Output"
    else:
        raise ValueError("Unknown node type: " + str(type(node)))

def nest(n):
    return " " * n

class DNode(object):
    parent: ?DNode
    gname: str       # The name of the GData class, e.g. "Container" for yang.gdata.Container
    namespace: str
    prefix: str
    name: str
    config: bool
    description: ?str
    reference: ?str
    exts: list[Ext]

    def get(self, name: str) -> DNode:
        """Get child node by name
        """
        if isinstance(self, DNodeInner):
            for child in self.children:
                if isinstance(child, DAction) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DAnydata) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DAnyxml) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DContainer) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DInput) and name == 'input':
                    return child
                elif isinstance(child, DLeaf) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DLeafList) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DList) and _safe_name(child.name) == name:
                    return child
                elif isinstance(child, DOutput) and name == 'output':
                    return child
                elif isinstance(child, DRpc) and _safe_name(child.name) == name:
                    return child
            raise ValueError("Child %s not found" % name)

        raise ValueError("Unable to get child from non-inner node")

    def prdaclass(self, loose=False, top=True, set_ns=True, gen_json=True, gen_xml=True) -> str:
        """Print the data class for this schema node
        """
        raise NotImplementedError('SchemaNode pdc')

class DNodeInner(DNode):
    children: list[DNode]

    def prdaclass(self, loose=False, top=True, set_ns=True, gen_json=True, gen_xml=True) -> str:
        """Print the data class for this schema node
        """
        res = []
        if top:
            res.append("import json")
            res.append("import xml")
            res.append("import yang.adata")
            res.append("import yang.gdata")
            res.append("")
            res.append("# == This file is generated ==")
            res.append("")
            res.append("")

        # Reorder children so that positional arguments, like list keys, come first
        new_children = []
        pos_child_idx = 0
        child_names = set()
        child_name_conflicts = set()
        for child in self.children:
            if isinstance(child, DLeaf) and child.is_key():
                new_children.insert(pos_child_idx, child)
                pos_child_idx += 1
            else:
                new_children.append(child)
            if child.name in child_names:
                child_name_conflicts.add(child.name)
            else:
                child_names.add(child.name)
        self.children = new_children

        def _unique_name(name: str, prefix: str) -> str:
            if name not in child_name_conflicts:
                return name
            return "%s:%s" % (prefix, name)

        def _unique_safe_name(name: str, prefix: str) -> str:
            unique_name = _unique_name(name, prefix)
            return _safe_name(unique_name).replace(":", "_")

        for child in self.children:
            res.append(child.prdaclass(loose=loose, top=False, set_ns=child.namespace!=self.namespace, gen_json=gen_json, gen_xml=gen_xml))

        if isinstance(self, DList):
            # List has special handling as it actually results in two classes:
            # - the list itself
            # - the list entry class
            # Here we create the list entry class, the list itself comes later
            res.append("class %s_entry(yang.adata.MNode):" % get_path_name(self))
        else:
            res.append("class %s(yang.adata.MNode):" % get_path_name(self))

        for child in self.children:
            if isinstance(child, DLeaf):
                res.append("    %s: %s" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_acton_type(child, loose)))
            elif isinstance(child, DLeafList):
                res.append("    %s: %s" % (_unique_safe_name(child.name, child.prefix), yang_leaflist_to_acton_type(child)))
            elif isinstance(child, DContainer):
                if child.presence:
                    res.append("    %s: ?%s" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
                else:
                    res.append("    %s: %s" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
            elif isinstance(child, DNodeInner):
                res.append("    %s: %s" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
            elif isinstance(child, DAnydata):
                pass # TODO
            elif isinstance(child, DAnyxml):
                pass # TODO
            elif isinstance(child, DAction):
                pass # TODO
            elif isinstance(child, DRpc):
                pass # TODO
            elif isinstance(child, DInput):
                pass # TODO
            elif isinstance(child, DOutput):
                pass # TODO
            else:
                raise ValueError("unreachable, unknown child type: " + str(type(child)))
        res.append("")
        req_args = []
        opt_args = []
        for child in self.children:
            if isinstance(child, DContainer):
                if loose or child.presence or optional_subtree(child):
                    opt_args.append("%s: ?%s=None" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
                else:
                    req_args.append("%s: %s" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
            elif isinstance(child, DLeaf):
                defval = ""
                child_default = child.default
                if child_default != None:
                    defval = "=None"
                child_arg = "%s: %s%s" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_acton_arg_type(child, loose), defval)
                if is_optional_arg_yang_leaf(child, loose):
                    opt_args.append(child_arg)
                else:
                    req_args.append(child_arg)
            elif isinstance(child, DLeafList):
                opt_args.append("%s: ?%s=None" % (_unique_safe_name(child.name, child.prefix), yang_leaflist_to_acton_type(child)))
            elif isinstance(child, DList):
                opt_args.append("%s: list[%s_entry]=[]" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))

        init_args_str = ", ".join(["self"] + req_args + opt_args)
        res.append("    mut def __init__(%s):" % init_args_str)
        # Set namespace from us
        res.append("        self._ns = \"%s\"" % self.namespace)

        for child in self.children:
            if isinstance(child, DContainer):
                if loose or optional_subtree(child) and not child.presence:
                    res.append("        if %s is not None:" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        else:")
                    res.append("            self.%s = %s()" % (_unique_safe_name(child.name, child.prefix), get_path_name(child)))
                else:
                    # NOTE: the default argument for P-container is None, so
                    # although unconditionally set here, it can be None
                    res.append("        self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                if loose or child.presence or optional_subtree(child):
                    res.append("        self_%s = self.%s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        if self_%s is not None:" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            self_%s._parent = self" % (_unique_safe_name(child.name, child.prefix)))
                else:
                    res.append("        self.%s._parent = self" % (_unique_safe_name(child.name, child.prefix)))
            elif isinstance(child, DLeaf):
                child_default = child.default
                if child_default != None:
                    res.append("        if %s != None:" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        else:")
                    res.append("            self.%s = %s" % (_unique_safe_name(child.name, child.prefix), prsrc_literal(child.type_.name, child_default)))
                else:
                    res.append("        self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
            elif isinstance(child, DLeafList):
                #res.append("        self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                res.append("        if %s is not None:" % (_unique_safe_name(child.name, child.prefix)))
                res.append("            self.%s = %s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                res.append("        else:")
                # TODO: this is where we can set the leaf-list to a default value
                res.append("            self.%s = []" % (_unique_safe_name(child.name, child.prefix)))
            elif isinstance(child, DList):
                res.append("        self.%s = %s(elements=%s)" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                res.append("        self.%s._parent = self" % (_unique_safe_name(child.name, child.prefix)))
        if len(self.children) == 0:
            res.append("        pass")
        res.append("")

        # Handle all P-container children, we want a .create_XXX() method
        # for each that takes as arguments the mandatory children of the
        # container
        for child in self.children:
            if isinstance(child, DContainer) and child.presence:
                pc_args = ["self"]
                for cchild in child.children:
                    if isinstance(cchild, DLeaf):
                        if cchild.mandatory:
                            pc_args.append(_safe_name(cchild.name))
                    elif isinstance(cchild, DContainer):
                        if not (loose or optional_subtree(cchild)):
                            pc_args.append(_safe_name(cchild.name))
                res.append("    mut def create_%s(%s):" % (_unique_safe_name(child.name, child.prefix), ", ".join(pc_args)))
                res.append("        res = %s(%s)" % (get_path_name(child), ", ".join(pc_args[1:])))
                res.append("        self.%s = res" % (_unique_safe_name(child.name, child.prefix)))
                res.append("        return res")
                res.append("")

        # .to_gdata()
        res.append("    mut def to_gdata(self) -> yang.gdata.Node:")

        res.append("        children = {}")

        for child in self.children:
            if not isinstance(child, DLeafList):
                res.append("        _%s = self.%s" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
        for child in self.children:
            child_ns = ", ns='" + child.namespace + "'" if child.namespace != self.namespace else ""
            if isinstance(child, DLeafList):
                res.append("        children['%s'] = yang.gdata.LeafList(self.%s%s)" % (_unique_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix), child_ns))
            else:
                res.append("        if _%s is not None:" % _unique_safe_name(child.name, child.prefix))
                if isinstance(child, DLeaf):
                    res.append("            children['%s'] = yang.gdata.Leaf('%s', _%s%s)" % (_unique_name(child.name, child.prefix), child.type_.name, _unique_safe_name(child.name, child.prefix), child_ns))
                elif isinstance(child, DContainer):
                    res.append("            children['%s'] = _%s.to_gdata()" % (_unique_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DList):
                    res.append("            children['%s'] = _%s.to_gdata()" % (_unique_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))

        if isinstance(self, DList):
            # keys contains a yang spec of the keys, like "k1 k2"
            # which are modeled as attributes of the list entry class and accessed via self.k1, self.k2
            list_keys_str = ", ".join(map(lambda x: "yang.gdata.yang_str(self.%s)" % _safe_name(x), self.key))
            res.append("        return yang.gdata.ListElement([%s], children)" % (list_keys_str))
        elif isinstance(self, DRoot):
            res.append("        return yang.gdata.%s(children)" % (self.gname))
        elif set_ns:
            if isinstance(self, DContainer) and self.presence:
                res.append("        return yang.gdata.%s(children, presence=True, ns='%s')" % (self.gname, self.namespace))
            else:
                res.append("        return yang.gdata.%s(children, ns='%s')" % (self.gname, self.namespace))
        else:
            if isinstance(self, DContainer) and self.presence:
                res.append("        return yang.gdata.%s(children, presence=True)" % (self.gname))
            else:
                res.append("        return yang.gdata.%s(children)" % (self.gname))
        res.append("")
#
        def _maybe_ns(child: DNode) -> str:
            if child.namespace != self.namespace:
                return ", \"%s\"" % child.namespace
            return ""

        # .from_gdata()
        # TODO: should .from_gdata() not take a specific data node instead, like Container instead of yang.gdata.Node?
        from_gdata_args_list = []
        from_xml_args_list = []
        for child in self.children:
            if isinstance(child, DLeaf):
                from_gdata_args_list.append("%s=n.get_%s(\"%s\")" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_getval(child), _unique_name(child.name, child.prefix)))
                from_xml_args_list.append("%s=yang.gdata.from_xml_%s(n, \"%s\"%s)" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_getval(child), child.name, _maybe_ns(child)))
            elif isinstance(child, DLeafList):
                from_gdata_args_list.append("%s=n.get_%ss(\"%s\")" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_getval(child), _unique_name(child.name, child.prefix)))
                from_xml_args_list.append("%s=yang.gdata.from_xml_%ss(n, \"%s\"%s)" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_getval(child), child.name, _maybe_ns(child)))
            elif isinstance(child, DContainer):
                if loose or child.presence or optional_subtree(child):
                    from_gdata_args_list.append("%s=%s.from_gdata(n.get_opt_container(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
                    from_xml_args_list.append("%s=%s.from_xml(yang.gdata.get_xml_opt_child(n, \"%s\"%s))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), child.name, _maybe_ns(child)))
                else:
                    from_gdata_args_list.append("%s=%s.from_gdata(n.get_container(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
                    from_xml_args_list.append("%s=%s.from_xml(yang.gdata.get_xml_child(n, \"%s\"%s))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), child.name, _maybe_ns(child)))
            elif isinstance(child, DList):
                from_gdata_args_list.append("%s=%s.from_gdata(n.get_opt_list(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
                from_xml_args_list.append("%s=%s.from_xml(yang.gdata.get_xml_children(n, \"%s\"%s))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), child.name, _maybe_ns(child)))
        from_gdata_args = ", ".join(from_gdata_args_list)
        from_xml_args = ", ".join(from_xml_args_list)
        res.append("    @staticmethod")
        if isinstance(self, DList):
            res.append("    mut def from_gdata(n: yang.gdata.Node) -> %s_entry:" % get_path_name(self))
            res.append("        return %s_entry(%s)" % (get_path_name(self), from_gdata_args))
        else:
            if isinstance(self, DContainer) and self.presence:
                res.append("    mut def from_gdata(n: ?yang.gdata.Node) -> ?%s:" % get_path_name(self))
            else:
                res.append("    mut def from_gdata(n: ?yang.gdata.Node) -> %s:" % get_path_name(self))
            res.append("        if n != None:")
            res.append("            return %s(%s)" % (get_path_name(self), from_gdata_args))
            if isinstance(self, DContainer):
                if self.presence:
                    res.append("        return None")
                elif optional_subtree(self):
                    res.append("        return %s()" % get_path_name(self))
                else:
                    res.append("        raise ValueError(\"Missing required subtree %s\")" % get_path_name(self))
            elif optional_subtree(self):
                res.append("        return %s()" % get_path_name(self))
            else:
                res.append("        raise ValueError(\"Missing required subtree %s\")" % get_path_name(self))
        res.append("")

        res.append("    @staticmethod")
        if isinstance(self, DList):
            res.append("    mut def from_xml(n: xml.Node) -> %s_entry:" % get_path_name(self))
            res.append("        return %s_entry(%s)" % (get_path_name(self), from_xml_args))
        else:
            if isinstance(self, DContainer) and self.presence:
                res.append("    mut def from_xml(n: ?xml.Node) -> ?%s:" % get_path_name(self))
            else:
                res.append("    mut def from_xml(n: ?xml.Node) -> %s:" % get_path_name(self))
            res.append("        if n != None:")
            res.append("            return %s(%s)" % (get_path_name(self), from_xml_args))
            if isinstance(self, DContainer):
                if self.presence:
                    res.append("        return None")
                elif optional_subtree(self):
                    res.append("        return %s()" % get_path_name(self))
                else:
                    res.append("        raise ValueError(\"Missing required subtree %s\")" % get_path_name(self))
            elif optional_subtree(self):
                res.append("        return %s()" % get_path_name(self))
            else:
                res.append("        raise ValueError(\"Missing required subtree %s\")" % get_path_name(self))
        res.append("")

        if isinstance(self, DList):
            # List has special handling as it actually results in two classes:
            # - the list itself
            # - the list entry class
            # Here we create the list entry class, the list itself comes later
            res.append("class %s(yang.adata.MNode):" % get_path_name(self))
            res.append("    elements: list[%s_entry]" % get_path_name(self))

            init_args = ["self"]
            init_args.append("elements=[]")
            init_args_str: str = ", ".join(init_args)
            res.append("    mut def __init__(%s):" % init_args_str)
            # Set namespace from us
            res.append("        self._ns = \"%s\"" % self.namespace)
            res.append("        self._name = " + repr(self.name))
            res.append("        self.elements = elements")
            res.append("")

            list_key_args = list(map(lambda x: _safe_name(x), self.key))
            for child in self.children:
                if isinstance(child, DLeaf):
                    if child.name in self.key:
                        continue
                    if child.mandatory:
                        list_key_args.append(_unique_safe_name(child.name, child.prefix))
                elif isinstance(child, DContainer):
                    if not (loose or optional_subtree(child)):
                        list_key_args.append(_unique_safe_name(child.name, child.prefix))
            list_create_args = ["self"] + list_key_args
            res.append("    mut def create(%s):" % (", ".join(list_create_args)))
            res.append("        for e in self.elements:")
            res.append("            match = True")
            for key in self.key:
                res.append("            if e.%s != %s:" % (_safe_name(key), _safe_name(key)))
                res.append("                match = False")
                res.append("                continue")
            res.append("            if match:")
            res.append("                return e")
            res.append("")
            res.append("        res = %s_entry(%s)" % (get_path_name(self), ", ".join(list_key_args)))
            res.append("        self.elements.append(res)")
            res.append("        return res")
            res.append("")

            res.append("    mut def to_gdata(self):" % ())
            res.append("        elements = []")
            res.append("        for e in self.elements:")
            res.append("            e_gdata = e.to_gdata()")                                # child.namespace != self.namespace
            res.append("            if isinstance(e_gdata, yang.gdata.ListElement):")
            res.append("                elements.append(e_gdata)")
            if set_ns:
                res.append("        return yang.gdata.List(%s, elements, ns='%s')" % (repr(self.key), self.namespace))
            else:
                res.append("        return yang.gdata.List(%s, elements)" % (repr(self.key)))
            res.append("")

#            # .from_gdata()
#            # TODO: should .from_gdata() not take a specific data node instead, like Container instead of yang.gdata.Node?
            from_gdata_args_list = []
            for child in self.children:
                if isinstance(child, DLeaf):
                    from_gdata_args_list.append("%s=n.get_%s(\"%s\")" % (_unique_safe_name(child.name, child.prefix), yang_leaf_to_getval(child), _unique_name(child.name, child.prefix)))
                elif isinstance(child, DContainer):
                    if loose or child.presence or optional_subtree(child):
                        from_gdata_args_list.append("%s=%s.from_gdata(n.get_opt_container(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
                    else:
                        from_gdata_args_list.append("%s=%s.from_gdata(n.get_container(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
                elif isinstance(child, DList):
                    from_gdata_args_list.append("%s=%s.from_gdata(n.get_opt_list(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
#                elif isinstance(child, ListElement):
#                    from_gdata_args_list.append("%s=%s.from_gdata(n.get_opt_list(\"%s\"))" % (_unique_safe_name(child.name, child.prefix), get_path_name(child), _unique_name(child.name, child.prefix)))
            from_gdata_args = ", ".join(from_gdata_args_list)
            res.append("    @staticmethod")
            res.append("    mut def from_gdata(n: ?yang.gdata.List) -> list[%s_entry]:" % get_path_name(self))
            res.append("        res = []")
            res.append("        if n is not None:")
            res.append("            for e in n.elements:")
            res.append("                res.append(%s_entry.from_gdata(e))" % get_path_name(self))
            res.append("        return res")
            #res.append("        return list(map(lambda x: %s_entry.from_gdata(x), n.elements))" % get_path_name(self))
            res.append("")
            res.append("    @staticmethod")
            res.append("    mut def from_xml(nodes: list[xml.Node]) -> list[%s_entry]:" % get_path_name(self))
            res.append("        res = []")
            res.append("        for node in nodes:")
            res.append("            res.append(%s_entry.from_xml(node))" % get_path_name(self))
            res.append("        return res")
            # TODO: trying to use list(map(lambda)) here results in an error,
            # why? Above code that iterates over n.elements works fine... Error is:
            # ERROR: Error when compiling y_cfs module: Type error
            # mut must be a subclass of pure
            #
            #res.append("        return list(map(lambda x: %s_entry.from_xml(x), nodes))" % get_path_name(self))
            res.append("")
        res.append("")

        # == JSON serde ================================

        # from_json(): from JSON -> gdata
        if gen_json and isinstance(self, DNodeInner):
            fname = "from_json_path"
            if not top:
                fname += "_" + get_path_name(self)

            if isinstance(self, DList):
                res += ["mut def %s_element(jd: value, path: list[str]=[], op: ?str=\"merge\") -> yang.gdata.ListElement:" % fname]
                # Unlike other nodes, where the path is consumed an element at a
                # time, we are passed the same path as the list itself, so we
                # can read the key. We are not ready to parse the JSON payload
                # at this point - we must be passed a key!
                res += ["    if len(path) == 1:"]
                res += ["        point = path[0]"]
                res += ["        keys = point.split(\",\")"]
                res += ["        jd_dict = yang.gdata.unwrap_dict(jd)"]
                res += ["        val = from_json_%s_element(jd_dict)" % get_path_name(self)]
                res += ["        if op == \"merge\":"]
                res += ["            return val"]
                res += ["        elif op == \"remove\":"]
                res += ["            return yang.gdata.AbsentListElement(val.key_vals)"]
                res += ["        raise ValueError(\"Invalid operation\")"]
                res += ["    elif len(path) > 1:"]
                res += ["        keys = path[0].split(\",\")"]
                res += ["        point = path[1]"]
                res += ["        rest_path = path[2:]"]
                res += ["        children: dict[str, yang.gdata.Node] = {}"]
                res += ["        for idx, key in enumerate(%s):" % repr(self.key)]
                res += ["            children[key] = yang.gdata.Leaf(\"str\", keys[idx])"]
                for child in self.children:
                    if child.name in self.key:
                        continue
                    res += ["        if point == '%s':" % child.name]
                    if isinstance(child, DNodeInner):
                        res += ["            children['%s'] = from_json_path_%s(jd, rest_path, op)" % (child.name, get_path_name(child))]
                    else:
                        res += ["            raise ValueError(\"Invalid json path to non-inner node\")"]
                res += ["        return yang.gdata.ListElement(keys, children)"]
                res += ["    raise ValueError(\"unreachable - no keys to list element\")"]
                res += [""]

                res.append("mut def %s(jd: value, path: list[str]=[], op: ?str=\"merge\") -> yang.gdata.List:" % fname)
                res.append("    if len(path) == 1:")
                res.append("        point = path[0]")
                # TODO: URI-unescape keys
                res.append("        keys = point.split(\",\")")
                res.append("        jd_dict = yang.gdata.unwrap_dict(jd)")
                res.append("        # Check that all keys are present in payload.")
                res.append("        # If present, they must equal the keys in the path")
                res.append("        # If not present, fill in from path")
                res.append("        for key in %s:" % repr(self.key))
                res.append("            if key not in jd_dict:")
                res.append("                jd_dict[key] = keys.pop(0)")
                res.append("            else:")
                res.append("                if str(jd_dict[key]) != keys.pop(0):")
                res.append("                    raise ValueError(\"Key value mismatch between path and payload\")")
                res.append("        element = from_json_%s_element(jd_dict)" % get_path_name(self))
                res.append("        elements = []")
                res.append("        if op == \"merge\":")
                res.append("            elements.append(element)")
                res.append("        elif op == \"remove\":")
                res.append("            elements.append(yang.gdata.AbsentListElement(element.key_vals))")
                res.append("        return yang.gdata.List(%s, elements)" % (repr(self.key)))
                res.append("    elif len(path) > 1:")
                res.append("        return yang.gdata.List(%s, [from_json_path_%s_element(jd, path, op)])" % (repr(self.key), get_path_name(self)))
                res.append("    raise ValueError(\"Unable to resolve path, no keys provided\")")

            else:
                res.append("mut def %s(jd: value, path: list[str]=[], op: ?str=\"merge\") -> yang.gdata.Node:" % fname)
                res.append("    # path handling")
                res.append("    if len(path) > 0:")
                res.append("        point = path[0]")
                res.append("        rest_path = path[1:]")
                for child in self.children:
                    if top == True or (child.name in child_name_conflicts):
                        res.append("        if point == '%s:%s':" % (child.prefix, child.name))
                    else:
                        res.append("        if point == '%s:%s' or point == '%s':" % (child.prefix, child.name, child.name))
                    if isinstance(child, DNodeInner):
                        res += [nest(12) + "child = {'%s': from_json_path_%s(jd, rest_path, op) }" % (child.name, get_path_name(child))]
                        res += [nest(12) + "return yang.gdata." + dnode_to_gd_type(self) + "(child)"]
                    else:
                        res.append("            raise ValueError(\"Invalid json path to non-inner node\")")
                res.append("        raise ValueError(\"Invalid path\")")
                res.append("    elif len(path) == 0:")
                valfname = "from_json_%s" % get_path_name(self) if not top else "from_json"
                val_farg = "[jd]" if isinstance(self, DList) else "yang.gdata.unwrap_dict(jd)"
                res += ["        if op == \"merge\":"]
                res += ["            return %s(%s)" % (valfname, val_farg)]
                res += ["        elif op == \"remove\":"]
                res += ["            return yang.gdata.Absent()"]
                res += ["        raise ValueError(\"Invalid operation\")"]
                res += ["    raise ValueError(\"Unable to resolve path\")"]

            res.append("")

        if gen_json and isinstance(self, DNodeInner):
            fname = "from_json"
            if not top:
                fname += "_" + get_path_name(self)

            if isinstance(self, DList):
                res.append("mut def %s_element(jd: dict[str, ?value]) -> yang.gdata.ListElement:" % fname)
            else:
                res.append("mut def %s(jd: dict[str, ?value]) -> yang.gdata.%s:" % (fname, dnode_to_gd_type(self)))

            res.append("    children = {}")
            for child in self.children:
                if top == True or (child.name in child_name_conflicts):
                    res.append("    child_%s = jd.get('%s:%s')" % (_unique_safe_name(child.name, child.prefix), child.prefix, child.name))
                else:
                    res.append("    child_%s_full = jd.get('%s:%s')" % (_unique_safe_name(child.name, child.prefix), child.prefix, child.name))
                    res.append("    child_%s = child_%s_full if child_%s_full is not None else jd.get('%s')" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix), child.name))

                if isinstance(child, DContainer):
                    res.append("    if child_%s is not None and isinstance(child_%s, dict):" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        children['%s'] = from_json_%s(child_%s)" % (child.name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DList):
                    res.append("    if child_%s is not None and isinstance(child_%s, list):" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        children['%s'] = from_json_%s(child_%s)" % (child.name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DLeafList):
                    res.append("    if child_%s is not None and isinstance(child_%s, list):" % (_unique_safe_name(child.name, child.prefix), _unique_safe_name(child.name, child.prefix)))
                    res.append("        children['%s'] = from_json_%s(child_%s)" % (child.name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                else:
                    res.append("    if child_%s is not None:" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("        children['%s'] = from_json_%s(child_%s)" % (child.name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))

            # TODO: need to better handle mandatory nodes... right now I think this JSON parsing is very naive
            #
            # TODO: can we do something like this instead and avoid local variables?
            #for child in self.children:
            #    res += ["    yang.gdata.maybe_add(children, '%s', lambda x: from_json_%s(unwrap_dict(x)) if x is not None else None, yang.gdata.take_json_%s(jd, '%s', '%s'))" % (child.name, taker_name(child, key_required=False), child.name, child.prefix)]

            if isinstance(self, DList):
                list_keys_str = ", ".join(map(lambda x: "str(child_%s if child_%s is not None else \"\")" % (_safe_name(x), _safe_name(x)), self.key))
                res.append("    return yang.gdata.ListElement([%s], children)" % (list_keys_str))
            else:
                res.append("    return yang.gdata.%s(children)" % dnode_to_gd_type(self))
            res.append("")

        elif gen_json and isinstance(self, DLeaf):
            fname = "from_json_" + get_path_name(self)
            res.append("# leaf")
            res.append("mut def %s(jd: dict[str, ?value]) -> yang.gdata.Leaf:" % fname)
            res.append("    return yang.gdata.Leaf(jd.get('%s'))" % self.name)
            res.append("")

        elif gen_json and isinstance(self, DLeafList):
            fname = "from_json_" + get_path_name(self)
            res.append("# leaflist")
            res.append("mut def %s(jd: dict[str, ?value]) -> yang.gdata.LeafList:" % fname)
            res.append("    return yang.gdata.LeafList(jd.get('%s'))" % self.name)
            res.append("")

        if gen_json and isinstance(self, DList):
            fname = "from_json_" + get_path_name(self)
            res.append("mut def %s(jd: list[dict[str, ?value]]) -> yang.gdata.List:" % fname)
            res.append("    elements = []")
            res.append("    for e in jd:")
            res.append("        if isinstance(e, dict):")
            res.append("            elements.append(from_json_%s_element(e))" % get_path_name(self))
            res.append("    return yang.gdata.List(keys=%s, elements=elements, user_order=False, ns=None, prefix=None)" % (repr(self.key)))
            res.append("")

        # to_json(): gdata -> JSON
        if gen_json and isinstance(self, DNodeInner):
            fname = "to_json"
            if not top:
                fname += "_" + get_path_name(self)

            if isinstance(self, DContainer):
                res.append("mut def %s(n: yang.gdata.Container) -> dict[str, ?value]:" % fname)
            elif isinstance(self, DModule):
                res.append("mut def %s(n: yang.gdata.Module) -> dict[str, ?value]:" % fname)
            elif isinstance(self, DRoot):
                res.append("mut def %s(n: yang.gdata.Root) -> dict[str, ?value]:" % fname)
            elif isinstance(self, DList):
                res.append("mut def %s_element(n: yang.gdata.ListElement) -> dict[str, ?value]:" % fname)

            res.append("    children = {}")
            for child in self.children:
                child_name = (child.prefix + ":" + child.name) if child.namespace != self.namespace else child.name
                res.append("    child_%s = n.children.get('%s')" % (_unique_safe_name(child.name, child.prefix), child.name))
                res.append("    if child_%s is not None:" % (_unique_safe_name(child.name, child.prefix)))
                if isinstance(child, DLeaf):
                    res.append("        if isinstance(child_%s, yang.gdata.Leaf):" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            children['%s'] = child_%s.val" % (child_name, _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DLeafList):
                    res.append("        if isinstance(child_%s, yang.gdata.LeafList):" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            children['%s'] = child_%s.vals" % (child_name, _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DContainer):
                    res.append("        if isinstance(child_%s, yang.gdata.Container):" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            children['%s'] = to_json_%s(child_%s)" % (child_name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                elif isinstance(child, DList):
                    res.append("        if isinstance(child_%s, yang.gdata.List):" % (_unique_safe_name(child.name, child.prefix)))
                    res.append("            children['%s'] = to_json_%s(child_%s)" % (child_name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))
                else:
                    res.append("        pass")
#                    res.append("    if child_%s is not None:" % (_unique_safe_name(child.name, child.prefix)))
#                    res.append("        children['%s'] = to_json_%s(child_%s)" % (child.name, get_path_name(child), _unique_safe_name(child.name, child.prefix)))

            if isinstance(self, DContainer):
                res.append("    return children")
            elif isinstance(self, DModule):
                res.append("    return children")
            elif isinstance(self, DRoot):
                res.append("    return children")
            elif isinstance(self, DList):
                res.append("    return children")
            res.append("")

        elif gen_json and isinstance(self, DLeaf):
            fname = "to_json_" + get_path_name(self)
            res.append("mut def %s(ll: yang.gdata.Leaf) -> ?value:" % fname)
            res.append("    return jd.get('%s'))" % self.name)
            res.append("")

        elif gen_json and isinstance(self, DLeafList):
            fname = "to_json_" + get_path_name(self)
            res.append("mut def %s(ll: yang.gdata.LeafList) -> list[value]:" % fname)
            res.append("    return jd.get('%s'))" % self.name)
            res.append("")

        if gen_json and isinstance(self, DList):
            fname = "to_json_" + get_path_name(self)
            res.append("mut def %s(n: yang.gdata.List) -> list[dict[str, ?value]]:" % fname)
            res.append("    elements = []")
            res.append("    for e in n.elements:")
            res.append("        elements.append(to_json_%s_element(e))" % get_path_name(self))
            res.append("    return elements")
            res.append("")

        res.append("")

        return "\n".join(res)

class DNodeLeaf(DNode):
    if_feature: list[str]
    mandatory: bool
    must: list[Must]
    status: ?str
    type_: Type
    when: ?str

class DAction(DNodeInner):
    if_feature: list[str]
    must: list[Must]
    status: ?str

    def __init__(self, namespace: str, prefix: str, name: str, description: ?str=None, if_feature=[], reference=None, status=None, exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Action"
        self.config = False
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.exts = exts
        self.children = children

class DAnydata(DNode):
    if_feature: list[str]
    mandatory: ?bool
    must: list[Must]
    status: ?str
    when: ?str

    def __init__(self, namespace: str, prefix: str, name: str, config: bool, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, must: list[Must]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Anydata"
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts

class DAnyxml(DNode):
    if_feature: list[str]
    mandatory: ?bool
    must: list[Must]
    status: ?str
    when: ?str

    def __init__(self, namespace: str, prefix: str, name: str, config: bool, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, must: list[Must]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Anyxml"
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts

class DContainer(DNodeInner):
    if_feature: list[str]
    must: list[Must]
    presence: bool
    status: ?str

    def __init__(self, namespace: str, prefix: str, name: str, config: bool, description: ?str=None, if_feature=[], must=[], presence: bool, reference=None, status=None, when=None, exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Container"
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.must = must
        self.presence = presence
        self.reference = reference
        self.status = status
        self.exts = exts
        self.children = children

class DInput(DNodeInner):
    must: list[Must]

    def __init__(self, namespace: str, prefix: str, must=[], exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = "input"
        self.gname = "Input"
        self.config = False
        self.must = must
        self.exts = exts
        self.children = children

class DModule(DNodeInner):
    augment: list[Augment]
    contact: ?str
    deviation: list[str]
    extension_: list[Extension]
    feature: list[Feature]
    import_: list[Import]
    include: list[Include]
    organization: ?str
    revision: list[Revision]
    yang_version: float

    def __init__(self, namespace: str, prefix: str, name: str, yang_version: ?float, description: ?str=None, contact=None, deviation=[], extension_=[], feature=[], import_=[], include=[], organization=None, reference=None, revision=[], exts=[], children=[]):
        self.name = name
        self.gname = "Module"
        self.namespace = namespace
        self.prefix = prefix
        if yang_version is not None:
            self.yang_version = yang_version
        else:
            self.yang_version = 1.1
        self.config = True # module is not config in itself, but it is the root
                           # of the data tree and the default is config=True, so
                           # we set it here
        self.description = description
        self.contact = contact
        self.deviation = deviation
        self.extension_ = extension_
        self.feature = feature
        self.import_ = import_
        self.include = include
        self.organization = organization
        self.reference = reference
        self.revision = revision
        self.exts = exts
        self.children = children

class DList(DNodeInner):
    if_feature: list[str]
    key: list[str]
    max_elements: ?int
    min_elements: int
    must: list[Must]
    ordered_by: str
    status: ?str
    unique: list[str]
    when: ?str

    def __init__(self, namespace: str, prefix: str, name: str, key: list[str], config: bool, description: ?str=None, if_feature=[], max_elements: ?int=None, min_elements=0, must=[], ordered_by="system", reference=None, status=None, unique=[], when=None, exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "List"
        self.key = key
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.max_elements = max_elements
        self.min_elements = min_elements
        self.must = must
        self.ordered_by = ordered_by
        self.reference = reference
        self.status = status
        self.unique = unique
        self.when = when
        self.exts = exts
        self.children = children

class DLeaf(DNodeLeaf):
    default: ?str
    units: ?str

    def __init__(self, namespace: str, prefix: str, name: str, config: bool, description: ?str=None, default=None, if_feature=[], mandatory=False, must=[], reference=None, status=None, type_: Type, units=None, when=None, exts=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Leaf"
        self.config = config
        self.description = description
        self.default = default
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.type_ = type_
        self.units = units
        self.when = when
        self.exts = exts

    def is_key(self) -> bool:
        parent = self.parent
        if isinstance(parent, DList):
            if self.name in parent.key:
                return True
        return False

    def prdaclass(self, loose=False, top=True, set_ns=True, gen_json=True, gen_xml=True) -> str:
        fname = "from_json_" + get_path_name(self)
        res = []
        res.append("mut def %s(val: value) -> yang.gdata.Leaf:" % fname)
        res.append("    return yang.gdata.Leaf(\"%s\", val)" % (self.type_.name))
        res.append("")
        return "\n".join(res)


class DLeafList(DNodeLeaf):
    default: ?list[str]
    max_elements: ?int
    min_elements: int
    ordered_by: str
    units: ?str

    def __init__(self, namespace: str, prefix: str, name: str, config: bool, description: ?str=None, default=None, if_feature=[], max_elements: ?int=None, min_elements=0, must=[], ordered_by="system", reference=None, status=None, type_: Type, units=None, when=None, exts=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "LeafList"
        self.config = config
        self.description = description
        self.default = default
        self.if_feature = if_feature
        self.max_elements = max_elements
        self.min_elements = min_elements
        self.must = must
        self.ordered_by = ordered_by
        self.reference = reference
        self.status = status
        self.type_ = type_
        self.units = units
        self.when = when
        self.exts = exts

    def prdaclass(self, loose=False, top=True, set_ns=True, gen_json=True, gen_xml=True) -> str:
        fname = "from_json_" + get_path_name(self)
        res = []
        res.append("mut def %s(val: list[value]) -> yang.gdata.LeafList:" % fname)
        res.append("    return yang.gdata.LeafList(val)")
        res.append("")
        return "\n".join(res)


class DNotification(DNodeInner):
    status: ?str

    def __init__(self, namespace: str, prefix: str, name: str, description: ?str=None, if_feature=[], must=[], reference=None, status=None, exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Notification"
        self.description = description
        self.reference = reference
        self.status = status
        self.exts = exts
        self.children = children

class DOutput(DNodeInner):
    must: list[Must]

    def __init__(self, namespace: str, prefix: str, must=[], exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = "output"
        self.gname = "Output"
        self.config = False
        self.must = must
        self.exts = exts
        self.children = children

class DRoot(DNodeInner):
    def __init__(self, modules: list[DNode]=[]):
        self.namespace = ""
        self.prefix = ""
        self.name = "root"
        self.gname = "Root"
        self.config = True
        self.children=[]
        for module in modules:
            if isinstance(module, DModule):
                for child in module.children:
                    self.children.append(child)
            else:
                raise ValueError("DRoot can only contain DModule")

class DRpc(DNodeInner):
    if_feature: list[str]
    must: list[Must]
    status: ?str

    def __init__(self, namespace: str, prefix: str, name: str, description: ?str=None, if_feature=[], reference=None, status=None, exts=[], children=[]):
        self.namespace = namespace
        self.prefix = prefix
        self.name = name
        self.gname = "Rpc"
        self.config = False
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.exts = exts
        self.children = children

# -------------------------------------------------------------------------------

def split_prefix_name(name: str) -> (?str, str):
    if name.find(":") != -1:
        parts = name.split(":", 1)
        return (parts[0], parts[1])
    return None, name

# -------------------------------------------------------------------------------

class ModRev(object):
    modname: str
    rev: ?str

    def __init__(self, modname: str, rev: ?str):
        self.modname = modname
        self.rev = rev

extension ModRev (Hashable):
    def __eq__(self, other: ModRev) -> bool:
        return self.modname == other.modname and self.rev == other.rev

    def __hash__(self) -> int:
        selfrev = self.rev
        revstr = selfrev if selfrev is not None else ""
        # TODO: actually include revision in hash
        #return self.modname.__hash__() + revstr.__hash__()
        return self.modname.__hash__()

class Context(object):
    """Compilation context
    """
    modules: dict[ModRev, Module]

    def __init__(self, modules: list[Module]=[]):
        self.modules = {}
        for thing in modules:
            self.add_module(thing)

    def add_module(self, module: Module):
        latest_revision = module.get_revision()
        mod_rev = ModRev(module.name, latest_revision.date if latest_revision is not None else None)
        self.modules[mod_rev] = module

        # Now also add the module itself without revision
        no_rev_mod = ModRev(module.name, None)
        if no_rev_mod in self.modules:
            existing_revision = self.modules[no_rev_mod].get_revision()
            if existing_revision is not None and latest_revision is not None:
                if latest_revision.date > existing_revision.date:
                    # Currently added module has a revision that is newer, so it
                    # should replace the existing module
                    self.modules[no_rev_mod] = module
                # Otherwise, the existing module is newer, so we should keep it
                return
            elif existing_revision is None and latest_revision is not None:
                # Currently added module has a revision, but existing module does not
                # so we presume that we're adding a newer version of the module
                self.modules[no_rev_mod] = module
            # Otherwise, both modules have no revision, so we keep the existing one
            return
        else: # No module with this name exists yet
            self.modules[no_rev_mod] = module

    def get_module(self, modname: str, rev: ?str) -> Module:
        mod_rev = ModRev(modname, rev)
        try:
            mod = self.modules[mod_rev]
            return mod
        except KeyError:
            raise ValueError("Module %s rev %s not found in compilation context" % (modname, rev if rev is not None else ""))

    def get_modules(self) -> list[Module]:
        return list(self.modules.values())


class SchemaNode(object):
    parent: ?SchemaNode
    ns: ?str
    pfx: ?str
    exts: list[Ext]
    _yname: str

    def _get_argname(self) -> ?str:
        raise NotImplementedError('SchemaNode _get_argname')

    def _get_arg(self) -> ?str:
        raise NotImplementedError('SchemaNode _get_arg')

    def get_attrs(self) -> list[(str, ?value)]:
        raise NotImplementedError('SchemaNode get_attrs')

    def prsrc(self, indent=0) -> str:
        """Print Acton source code for this schema node and its subnodes
        """
        raise NotImplementedError('SchemaNode prsrc')

    def prdaclass(self, loose=False, top=True, set_ns=True, gen_json=True, gen_xml=True) -> str:
        """Print the data class for this schema node
        """
        raise NotImplementedError('SchemaNode pdc')

    mut def to_dnode(self) -> DNode:
        raise NotImplementedError('SchemaNode to_dschema not implemented for %s' % type(self))

    def get_dnode_children(self, in_choice: bool=False):
        mut def unset_mandatory(node):
            """Unset the mandatory attribute if present
            """
            if isinstance(node, DLeaf):
                node.mandatory = False
            elif isinstance(node, DAnydata):
                node.mandatory = None
            elif isinstance(node, DAnyxml):
                node.mandatory = None

        if isinstance(self, SchemaNodeInner):
            new_children = []
            for child in self.children:
                if isinstance(child, Case):
                    # Direct descendants of case are data nodes, where we must
                    # unset mandatory
                    new_children.extend(child.get_dnode_children(in_choice=True))
                    continue
                if isinstance(child, Choice):
                    # Direct descendants of choice are either case or data node,
                    # like leaf, container, etc. We unset mandatory on these to
                    # avoid ending up with invalid mutually exclusive
                    # constraints in the data tree. Of course we then have no constraints ...
                    new_children.extend(child.get_dnode_children(in_choice=True))
                    continue
                if isinstance(child, Grouping):
                    continue
                if isinstance(child, Identity):
                    continue
                if isinstance(child, Typedef):
                    continue
                if isinstance(child, Uses):
                    continue
                dnode_child = child.to_dnode()
                if in_choice:
                    unset_mandatory(dnode_child)
                new_children.append(dnode_child)
            return new_children
        raise ValueError("get_dnode_children() called on non-inner node %s" % type(self))

    def get_namespace(self) -> str:
        n = self
        for i in range(RECURSION_LIMIT+1):
            nnamespace = n.ns
            if nnamespace is not None:
                return nnamespace
            nparent = n.parent
            if nparent is not None:
                n = nparent
                continue
            else:
                raise ValueError("Unable to find namespace")
            if i > RECURSION_LIMIT:
                raise ValueError("Recursion limit reached")
        raise ValueError("Unable to find namespace")

    def get_prefix(self) -> str:
        n = self
        for i in range(RECURSION_LIMIT+1):
            nprefix = n.pfx
            if nprefix is not None:
                return nprefix
            nparent = n.parent
            if nparent is not None:
                n = nparent
                continue
            else:
                raise ValueError("Unable to find prefix")
            if i > RECURSION_LIMIT:
                raise ValueError("Recursion limit reached")
        raise ValueError("Unable to find prefix")

    def is_config(self) -> bool:
        n = self
        for i in range(RECURSION_LIMIT+1):
            if (isinstance(n, Anydata)
                or isinstance(n, Anyxml)
                or isinstance(n, Case)
                or isinstance(n, Choice)
                or isinstance(n, Container)
                or isinstance(n, Module)
                or isinstance(n, Notification)
                or isinstance(n, Leaf)
                or isinstance(n, LeafList)
                or isinstance(n, List)):
                found_config = True
                if isinstance(n, Anydata):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, Anyxml):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, Case):
                    found_config = False
                elif isinstance(n, Choice):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, Container):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, Module):
                    return True
                elif isinstance(n, Notification):
                    return False
                elif isinstance(n, Leaf):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, LeafList):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False
                elif isinstance(n, List):
                    nconfig = n.config
                    if nconfig is not None:
                        return nconfig
                    found_config = False

                if not found_config:
                    nparent = n.parent
                    if nparent is not None:
                        n = nparent
                        continue
                    else:
                        if isinstance(n, Module):
                            return True
                        else:
                            raise ValueError("Reached some top data node of type %s" % type(n))
            else:
                raise ValueError("Non-data node %s does not have config statements" % type(n))
            if i > RECURSION_LIMIT:
                raise ValueError("Recursion limit reached")
        raise ValueError("Unable to find config attribute")

    def get_parent(self) -> SchemaNode:
        p = self.parent
        if p is not None:
            return p
        raise ValueError("No parent found")

    def get(self, name: str, ns: ?str=None) -> SchemaNode:
        """Get child node by name
        """
        # TODO: support looking up qualified by namespace
        #tns = ns if ns is not None else self.get_namespace()
        if isinstance(self, SchemaNodeInner):
            for child in self.children:
                #child_namespace = child.ns
                # TODO:
                if isinstance(child, Action) and child.name == name:
                    return child
                elif isinstance(child, Anydata) and child.name == name:
                    return child
                elif isinstance(child, Anyxml) and child.name == name:
                    return child
                elif isinstance(child, Case) and child.name == name:
                    return child
                elif isinstance(child, Choice) and child.name == name:
                    return child
                elif isinstance(child, Container) and child.name == name:
                    return child
                elif isinstance(child, Input) and name == 'input':
                    return child
                elif isinstance(child, Leaf) and child.name == name:
                    return child
                elif isinstance(child, LeafList) and child.name == name:
                    return child
                elif isinstance(child, List) and child.name == name:
                    return child
                elif isinstance(child, Notification) and child.name == name:
                    return child
                elif isinstance(child, Output) and name == 'output':
                    return child
                elif isinstance(child, Rpc) and child.name == name:
                    return child
            # Check extension with argument
            for ext in self.exts:
                ext_arg = ext.arg
                if ext_arg is not None and ext_arg == name:
                    return ext
            raise ValueError("Child %s not found" % name)

        raise ValueError("Unable to get child %s from non-inner node" % name)

    def get_module(self) -> Module:
        """Get the Module for the local module

        That is, climb up the ladder of parents from the current node until we
        reach the top Module.
        """
        n = self
        while True:
            if isinstance(n, Module):
                return n
            nparent = n.parent
            if nparent is not None:
                n = nparent
                continue
            break
        raise ValueError("Unable to find Module")

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None) -> SchemaNode:
        """Compile an abstract YANG into a concrete one
        - expand uses / groupings
        - handle augments
        - resolve types to base types
        """
        raise NotImplementedError('SchemaNode compile')

    def expand_augments(self, context: Context, target_base: SchemaNode=self, in_uses=False):
        """Expand augment node"""
        def get_target(target_base, target: str) -> SchemaNode:

            parts = target.lstrip("/").split("/")
            current_node = target_base
            if target[0] == "/":
                if in_uses:
                    raise ValueError("Absolute path in augment under uses is not valid")

                for idx, part in enumerate(parts):
                    prefix, name = split_prefix_name(part)
                    if idx == 0:
                        if prefix is not None: # Handle augment targetting another module.
                            current_node = current_node.get_module_by_prefix(prefix, context)
                        else:
                            current_node = self.get_module()

                    if prefix is not None:
                        target_ns = self.get_module_by_prefix(prefix, context).get_namespace()
                        # TODO: resolve using namespace
                        # current_node = current_node.get(name, ns=target_ns)
                        current_node = current_node.get(name)
                    else:
                        current_node = current_node.get(name)

            else: # augment under uses
                if not in_uses:
                    raise ValueError("Relative path in augment under (sub-)module is not valid")

                for part in parts:
                    prefix, name = split_prefix_name(part)
                    if prefix is not None:
                        # TODO: or is prefix OK when it is the local prefix?
                        raise ValueError("Relative path in augment under uses cannot have prefixes")
                    current_node = current_node.get(name)

            return current_node

        def expand_augment(augments: list[Augment], target_base, context: Context):
            # There can be multiple augments which might have dependencies on
            # each other, for example:
            # container c1 {}
            # augment /c1/c2 { leaf l1 { type string; } }
            # augment /c1 { container c2 {} }
            #
            # The first augment targets /c1/c2 which depends on the second
            # augment below, so we must apply these augments in the right order.
            # We do this by looking at the length of the target path and
            # applying the augments in order of increasing path length.

            augments_by_path_length: dict[int, list[Augment]] = {}
            for augment in augments:
                parts = augment.target_node.lstrip("/").split("/")
                plen = len(parts)
                if plen not in augments_by_path_length:
                    augments_by_path_length[plen] = []
                augments_by_path_length[plen].append(augment)

            for plen in sorted(augments_by_path_length.keys()):
                plen_augments = augments_by_path_length[plen]
                for aug in plen_augments:
                    target = get_target(target_base, aug.target_node)
                    if isinstance(target, SchemaNodeInner):
                        # Just move the child to the target
                        aug.expand_children(context, target, new_ns=aug.get_namespace(), new_pfx=aug.get_prefix())
                        target.exts.extend(aug.exts)
                    else:
                        raise ValueError("Augment target " + str(target) + " is not an inner node")

        # Look if node is of a type that has augment substatements
        if isinstance(self, Module):
            expand_augment(self.augment, self, context)
        elif isinstance(self, Submodule):
            expand_augment(self.augment, self, context)
        elif isinstance(self, Uses):
            expand_augment(self.augment, target_base, context)
        else:
            raise ValueError("Node type does not have augment substatements")

    def expand_children(self, context: Context, target: SchemaNodeInner, new_ns: ?str = None, new_pfx: ?str = None):
        """Expand abstract children into concrete nodes
        """
        if isinstance(self, SchemaNodeInner):
            for child in self.children:
                if isinstance(child, Uses):
                    grouping = child.get_grouping(_safe_name(child.name), context)
                    grouping.expand_children(context, target, new_ns if new_ns is not None else target.ns, new_pfx if new_pfx is not None else target.pfx)
                    child.expand_augments(context, target, in_uses=True)
                    child.expand_refines(target)
                else:
                    c_child = child.compile(context, new_ns, new_pfx)
                    c_child.parent = target
                    target.children.append(c_child)
        else:
            raise ValueError("expand_children() called on non-inner node %s" % type(self))

    mut def apply_refine(self, refine: Refine):
        raise NotImplementedError('SchemaNode apply_refine not implemented for %s' % type(self))

    def get_module_by_prefix(self, prefix: str, context: Context) -> Module:
        """Get a Module from the import prefix in the local module"""
        local_module = self.get_module()
        local_module_prefix = local_module.prefix
        if local_module_prefix is not None and local_module_prefix == prefix:
            return local_module
        imp = local_module.get_import_by_prefix(prefix)
        return context.get_module(imp.module, imp.revision_date)

    def get_grouping(self, name: str, context: Context) -> Grouping:
        """Find a grouping in the local module or an imported module
        """
        prefix, group_name = split_prefix_name(name)
        if prefix is not None:
            imported_module = self.get_module_by_prefix(prefix, context)
            return imported_module.get_grouping(group_name, context)
        else: # local module
            return self.get_grouping_in_module(group_name)

    def get_grouping_in_module(self, name: str) -> Grouping:
        """Find a grouping in the current module
        """
        n = self
        for i in range(RECURSION_LIMIT+1):
            if isinstance(n, SchemaNodeInner):
                for child in n.children:
                    if isinstance(child, Grouping) and _safe_name(child.name) == name:
                        return child
            nparent = n.parent
            if nparent is not None:
                n = nparent
                continue
            else:
                break
            if i == RECURSION_LIMIT:
                raise ValueError("Recursion limit reached")
        raise ValueError("Unable to find grouping '%s'" % name)

    def get_typedef(self, name: str, context: Context) -> Typedef:
        """Find a typedef in the local module or an imported module
        """
        prefix, typedef_name = split_prefix_name(name)
        if prefix is not None:
            imported_module = self.get_module_by_prefix(prefix, context)
            return imported_module.get_typedef(typedef_name, context)
        else:
            return self.get_typedef_in_module(typedef_name)

    def get_typedef_in_module(self, name: str) -> Typedef:
        """Find a typedef in the current module
        """
        n = self
        for i in range(RECURSION_LIMIT+1):
            typedefs: list[Typedef] = []
            if isinstance(n, SchemaNodeInner):
                for child in n.children:
                    if isinstance(child, Typedef) and child.name == name:
                        return child
            nparent = n.parent
            if nparent is not None:
                n = nparent
                continue
            else:
                break
            if i == RECURSION_LIMIT:
                raise ValueError("Recursion limit reached")
        raise ValueError("Unable to find typedef '%s'" % name)

    def to_statement(self) -> Statement:
        """Convert this schema node to a Statement
        """
        stmt = Statement(self._yname, self._get_arg())
        for attr_name, attr_value in self.get_attrs():
            if attr_value is not None:
                if isinstance(attr_value, SchemaNode):
                    stmt.substatements.append(attr_value.to_statement())
                elif isinstance(attr_value, list):
                    for av in attr_value:
                        if isinstance(av, str):
                            stmt.substatements.append(Statement(attr_name, av))
                        elif isinstance(av, SchemaNode):
                            stmt.substatements.append(av.to_statement())
                        else:
                            raise ValueError("Unexpected type in list: %s" % type(av))
                elif isinstance(attr_value, bool):
                    stmt.substatements.append(Statement(attr_name, "true" if attr_value else "false"))
                else:
                    stmt.substatements.append(Statement(attr_name, str(attr_value)))

        if isinstance(self, SchemaNodeInner):
            for c in self.children:
                stmt.substatements.append(c.to_statement())

        return stmt

class SchemaNodeInner(SchemaNode):
    children: list[SchemaNode]

class SchemaNodeOuter(SchemaNode):
    pass

class Ext(SchemaNode):
    """An extension statement

    This is not the definition of an extension, e.g. the "extension" keyword,
    but an instance of an extension, like "foo:bar 'test';"
    """
    prefix: str
    name: str
    arg: ?str

    def __init__(self, prefix: str, name: str, arg: ?str=None, exts=[]):
        self.prefix = prefix
        self.name = name
        self.arg = arg
        self.exts = exts

    @staticmethod
    def from_fullname(fullname: str, arg: ?str=None, exts=[]) -> Ext:
        parts = fullname.split(":", 1)
        if len(parts) != 2:
            raise ValueError("Invalid extension name %s, extensions must always have a prefix like: foo:bar 'test';" % fullname)
        return Ext(parts[0], parts[1], None)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("arg", self.arg),
            ("exts", self.exts),
            ]
        prefix = self.prefix
        args = []
        if prefix is not None:
            args = ["'" + str(prefix) + "', '" + str(self.name) + "'"]
        else:
            raise ValueError("No prefix in Ext.prsrc, this should never happen")
        attrs_text = _prsrc_attrs(indent, attrs)
        if len(attrs_text) > 0:
            args.append(attrs_text)
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Ext(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def to_statement(self) -> Statement:
        res = Statement(self.name, self.arg, self.prefix)
        for ext in self.exts:
            res.substatements.append(ext.to_statement())
        return res

    def __str__(self):
        self_arg = self.arg
        return "Ext " + self.name + ((" " + self_arg) if self_arg is not None else "")

extension Ext (Ord):
    def __eq__(self, other: Ext) -> bool:
        self_arg = self.arg
        other_arg = other.arg
        return self.name == other.name and (self_arg is None and other_arg is None or (self_arg is not None and other_arg is not None and self_arg == other_arg))

    def __lt__(self, other: Ext) -> bool:
        return self.name < other.name


def take_opt_bool(stmts: list[Statement], kw: str) -> ?bool:
    v = take_opt_str(stmts, kw)
    if v is not None:
        if v == "true":
            return True
        elif v == "false":
            return False

def take_bool(stmts: list[Statement], kw: str) -> bool:
    v = take_opt_str(stmts, kw)
    if v is not None:
        if v == "true":
            return True
        elif v == "false":
            return False
    raise ValueError("No %s in stmts" % kw)

def take_opt_int(stmts: list[Statement], kw: str) -> ?int:
    v = take_opt_str(stmts, kw)
    if v is not None:
        return int(v)

def take_int(stmts: list[Statement], kw: str) -> int:
    v = take_opt_str(stmts, kw)
    if v is not None:
        return int(v)
    raise ValueError("No %s in stmts" % kw)

def take_opt_str(stmts: list[Statement], kw: str) -> ?str:
    for i in range(len(stmts)):
        if stmts[i].kw == kw:
            arg = stmts[i].arg
            if arg is not None:
                del stmts[i]
                return arg

def take_str(stmts: list[Statement], kw: str) -> str:
    for i in range(len(stmts)):
        if stmts[i].kw == kw:
            arg = stmts[i].arg
            if arg is not None:
                del stmts[i]
                return arg
    raise ValueError("No %s in stmts" % kw)

def take_yang_version(stmts: list[Statement]) -> float:
    v = take_opt_str(stmts, "yang-version")
    if v is not None:
        # TODO: this should just be: return float(v)
        # but a compiler bug prevents that from working
        f = float(v)
        return f
    return 1.0

def take_strlist(stmts: list[Statement], kw: str) -> list[str]:
    res = []
    todel = []
    for i in range(len(stmts)):
        if stmts[i].kw == kw:
            arg = stmts[i].arg
            if arg is not None:
                todel.append(i)
                res.append(arg)
    for d in reversed(todel):
        del stmts[d]
    return res

def take_node(stmts: list[Statement], kw: str, parent: ?SchemaNode=None) -> ?SchemaNode:
    for i in range(len(stmts)):
        if stmts[i].kw == kw:
            n = stmt_to_snode(stmts[i], parent=parent)
            del stmts[i]
            return n

def take_nodes(stmts: list[Statement], kw: list[str], parent: ?SchemaNode=None) -> list[SchemaNode]:
    res = []
    todel = []
    for i in range(len(stmts)):
        if stmts[i].kw in kw:
            res.append(stmt_to_snode(stmts[i], parent=parent))
            todel.append(i)
    for i in reversed(todel):
        del stmts[i]
    return res

def take_exts(stmts: list[Statement]) -> list[Ext]:
    """Take all extension statements from a list of statements

    Extension statements always follow the form:

    prefix:extension arg;
    """
    res = []
    todel = []
    for i in range(len(stmts)):
        prefix = stmts[i].prefix
        name = stmts[i].kw
        arg = stmts[i].arg
        # TODO: I think prefix should be None, not "", right? prefix should be
        # the prefix of the statement and not the prefix of the module, like the
        # namespace prefix
        if prefix is not None and len(prefix) > 0:
            res.append(Ext(prefix, name, arg, exts=take_exts(stmts[i].substatements)))
            todel.append(i)
    for i in reversed(todel):
        del stmts[i]
    return res

def _attr_name(name: str):
    res = ""
    i = 0
    while True:
        if name[i] == "-":
            res += "_"
        else:
            res += name[i]
        i += 1
        if i == len(name):
            break
    if res in {"extension", "import", "type"}:
        res = res + "_"

    return res

def _prsrc_attrs(indent, attrs):
    """Print source code for a list of SchemaNode attributes"""
    res = []
    for attr in attrs:
        raw_name, value = attr
        name = _attr_name(raw_name)
        if value is not None:
            if isinstance(value, list):
                if len(value) == 0:
                    continue
                else:
                    list_val = []
                    content_is_snode = False
                    for e in value:
                        if isinstance(e, SchemaNode):
                            list_val.append(e.prsrc(indent+2))
                        else:
                            list_val.append(repr(e))
                    list_val_str = "[]"
                    if len(list_val) == 1 and list_val[0][0] != " " and len(list_val[0]) < 20:
                        list_val_str = "[" + list_val[0] + "]"
                    else:
                        list_val_str = "[\n" + ",\n".join(list_val) + "\n" + _ind(indent + 1) + "]"
                    res.append(name + "=" + list_val_str)
            elif isinstance(value, SchemaNode):
                res.append(name + "=" + value.prsrc(0))
            else:
                res.append(name + "=" + repr(value))
    return ", ".join(res)


def is_optional_yang_leaf(leaf: DNodeLeaf, loose: bool=False) -> bool:
    """Maps YANG leaf optionality to Acton type
    """
    optional = True

    # Mandatory leaf in YANG model are non-optional in Acton
    mandatory = False
    leafmandatory = leaf.mandatory
    if leafmandatory != None:
        mandatory = leafmandatory

    has_default = False
    if isinstance(leaf, DLeaf):
        if leaf.default != None:
            has_default = True

    optional = not (mandatory or has_default)
    # But with loose validation, even mandatory YANG leaves are optional!
    if loose:
        optional = True
    # ... although being part of a key always makes it non-optional
    parent = leaf.parent
    if isinstance(parent, DList):
        if leaf.name in parent.key:
            optional = False
    return optional

def is_optional_arg_yang_leaf(leaf: DNodeLeaf, loose: bool=False) -> bool:
    """Maps YANG leaf optionality to Acton type for object constructor arg

    This is different from the is_optional_yang_leaf because for YANG leafs with
    a default value, we require a difference depending on where the type is used.

    leaf foo {
      type string;
      default "banana";
    }

    the type is str, since even if we do not provide a value, it will get its
    default 'banana', so it is never optional. However, in the constructor
    argument, it is optional. This method is used to determine if the argument
    type should be optional.
    """
    optional = is_optional_yang_leaf(leaf, loose)

    if isinstance(leaf, DLeaf):
        if leaf.default != None:
            optional = True

    return optional

def yang_leaf_to_acton_type(leaf: DNodeLeaf, loose: bool=False) -> str:
    optional = is_optional_yang_leaf(leaf, loose)
    optional_str = "?" if optional else ""
    t = yang_type_to_acton_type(leaf.type_)
    return optional_str + t

def yang_leaf_to_acton_arg_type(leaf: DNodeLeaf, loose: bool=False) -> str:
    optional = is_optional_yang_leaf(leaf, loose)
    if isinstance(leaf, DLeaf):
        if leaf.default != None:
            optional = True
    optional_str = "?" if optional else ""
    t = yang_type_to_acton_type(leaf.type_)
    return optional_str + t

def taker_name(n: DNode, loose: bool=False, key_required=True) -> str:
    if isinstance(n, DContainer):
        optional = loose or optional_subtree(n)
        optional_str = "opt_" if optional else ""
        return optional_str + "cnt"
    if isinstance(n, DList):
        optional = loose or optional_subtree(n)
        optional_str = "opt_" if optional else ""
        return optional_str + "list"
    if isinstance(n, DLeaf):
        optional = is_optional_yang_leaf(n)
        optional_str = "opt_" if optional else ""
        return optional_str + yang_type_to_acton_type(n.type_)
    if isinstance(n, DLeafList):
        # TODO: optional?
        return yang_type_to_acton_type(n.type_) + "s"
    raise ValueError("unreachable - unknown node type %s" % type(n))

def yang_leaf_to_getval(leaf: DNodeLeaf) -> str:
    # TODO: uh, do we need loose arg?
    optional = is_optional_arg_yang_leaf(leaf)
    optional_str = "opt_" if optional else ""
    t = yang_type_to_acton_type(leaf.type_)
    return optional_str + t

def yang_leaflist_to_acton_type(leaf: DLeafList) -> str:
    t = yang_type_to_acton_type(leaf.type_)
    return "list[%s]" % t


def yang_typename_to_acton_type(type_name: str) -> str:
    if type_name == "binary":
        return "bytes"
    elif type_name == "bits":
        raise NotImplementedError('bits not supported')
    elif type_name == "boolean":
        return "bool"
    elif type_name == "decimal64":
        # TODO: do something better
        return "float"
    elif type_name == "empty":
        # TODO: is this right?
        return "bool"
    elif type_name == "enumeration":
        # TODO: use acton unions of fixed strings!?
        return "str"
    elif type_name == "identityref":
        return "str"
    elif type_name == "instance-identifier":
        return "str"
    elif type_name in {"int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64"}:
        return "int"
    elif type_name == "leafref":
        return "str"
    elif type_name == "string":
        return "str"
    elif type_name == "union":
        # You should use yang_type_to_acton_type which can expand the union type for you!
        raise ValueError("Union type not supported")
    raise ValueError("Unknown YANG type: " + type_name)

def yang_type_to_acton_type(t: ?Type) -> str:
    # +---------------------+-------------------------------------+
    # | Name                | Description                         |
    # +---------------------+-------------------------------------+
    # | binary              | Any binary data                     |
    # | bits                | A set of bits or flags              |
    # | boolean             | "true" or "false"                   |
    # | decimal64           | 64-bit signed decimal number        |
    # | empty               | A leaf that does not have any value |
    # | enumeration         | One of an enumerated set of strings |
    # | identityref         | A reference to an abstract identity |
    # | instance-identifier | A reference to a data tree node     |
    # | int8                | 8-bit signed integer                |
    # | int16               | 16-bit signed integer               |
    # | int32               | 32-bit signed integer               |
    # | int64               | 64-bit signed integer               |
    # | leafref             | A reference to a leaf instance      |
    # | string              | A character string                  |
    # | uint8               | 8-bit unsigned integer              |
    # | uint16              | 16-bit unsigned integer             |
    # | uint32              | 32-bit unsigned integer             |
    # | uint64              | 64-bit unsigned integer             |
    # | union               | Choice of member types              |
    # +---------------------+-------------------------------------+
    if t is not None:
        if t.name == "union":
            def get_unique_types(tys: list[Type]) -> set[str]:
                """Recursively expand union to the base types"""
                res = set()
                for ty in tys:
                    if ty.name == "union":
                        res.update(get_unique_types(ty.type_))
                    else:
                        res.add(ty.name)
                return res

            # Recursively find unique base types, if they all map down to the
            # same base type, we can just use that as the Acton type
            unique_base_types = list(get_unique_types(t.type_))
            if len(unique_base_types) == 1:
                return yang_typename_to_acton_type(unique_base_types[0])

            # TODO: should we map in union of say u32 and i32 into i64?
            if all(map(lambda x: x in {"int8", "int16", "int32", "int64"}, unique_base_types)):
                max_size = max(list(map(lambda x: int(x[3:]), unique_base_types)))
                # TODO: once we have integer subtyping, return largest necessary iXX type
                #return "i%d" % max_size
                return "int"
            elif all(map(lambda x: x in {"uint8", "uint16", "uint32", "uint64"}, unique_base_types)):
                max_size = max(list(map(lambda x: int(x[4:]), unique_base_types)))
                # TODO: once we have integer subtyping, return largest necessary uXX type
                #return "u%d" % max_size
                return "int"
            elif all(map(lambda x: x in {"int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64"}, unique_base_types)):
                # We have a union of a mix of signed and unsigned integers, so let's find the largest
                int_sizes = filter(lambda x: x in {"int8", "int16", "int32", "int64"}, unique_base_types)
                max_int_size = max(list(map(lambda x: int(x[3:]), int_sizes)))
                uint_sizes = filter(lambda x: x in {"uint8", "uint16", "uint32", "uint64"}, unique_base_types)
                max_uint_size = max(list(map(lambda x: int(x[4:]), uint_sizes)))
                # To map a uint into an signed int, we need twice the number of
                # bits, i.e. uint8 fits in int16 or uint32 fits in int64, so
                # just double the max size...
                max_int_mapped_uint_size = max_uint_size * 2
                # Total max size is the max between signed int and
                # integer-mapped-uint (which is already 2*uint max)
                max_size = max([max_int_size, max_int_mapped_uint_size])
                if max_size > 64:
                    # Need to use our int (a.k.a. "bigint")
                    return "int"
                # TODO: once we have integer subtyping, return largest necessary iXX type
                #return "i%d" % max_size
                return "int"

            # TODO: use atom when union consists of types that we represent with Acton built-in types
            # TODO: use Acton union
            return "value"
        else:
            return yang_typename_to_acton_type(t.name)
    raise ValueError("type not defined")

def prsrc_literal(ytype: str, value: str) -> str:
    if ytype == "boolean":
        if value.lower() == "true":
            return "True"
        return "False"
    elif ytype == "enumeration":
        return '"' + value + '"'
    elif ytype == "identityref":
        return '"' + value + '"'
    elif ytype in {"int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64"}:
        return value
    elif ytype == "string":
        return '"' + value.replace('"', '\\"') + '"'
    raise ValueError("Unhandled prsrc literal of type " + ytype)

def _safe_name(name: str) -> str:
    new = name.replace("-", "_").replace(".", "_")
    if new in {"action",
               "as",
               "class",
               "except",
               "for",
               "from",
               "import",
               "in",
               "protocol",
               "with",
               }:
        new += "_"
    return new

def get_path_name(dnode: DNode) -> str:
    """
    """
    path = []
    while True:
        path.append(dnode.name.replace("-", "_").replace(".", "_"))
        parent = dnode.parent
        if parent is not None:
            dnode = parent
        else:
            break
    if len(path) == 0:
        raise ValueError("No path for DNode" + str(dnode))
    return "__".join(reversed(path))


# -- end of manually defined schema functions, automatically generated code follows

extension SchemaNode (Eq):
    def __eq__(self, other: SchemaNode) -> bool:
        if type(self) != type(other):
            return False
        elif isinstance(self, Action) and isinstance(other, Action):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.input == other.input and self.output == other.output and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Anydata) and isinstance(other, Anydata):
            return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, Anyxml) and isinstance(other, Anyxml):
            return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, Augment) and isinstance(other, Augment):
            return self.target_node == other.target_node and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, BelongsTo) and isinstance(other, BelongsTo):
            return self.module == other.module and self.prefix == other.prefix
        elif isinstance(self, Bit) and isinstance(other, Bit):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.position == other.position and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Case) and isinstance(other, Case):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, Choice) and isinstance(other, Choice):
            return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, Container) and isinstance(other, Container):
            return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.must == other.must and self.presence == other.presence and self.reference == other.reference and self.status == other.status and self.when == other.when
        elif isinstance(self, Enum) and isinstance(other, Enum):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.value == other.value
        elif isinstance(self, Extension) and isinstance(other, Extension):
            return self.name == other.name and self.argument == other.argument and self.description == other.description and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Feature) and isinstance(other, Feature):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Grouping) and isinstance(other, Grouping):
            return self.name == other.name and self.description == other.description and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Identity) and isinstance(other, Identity):
            return self.name == other.name and self.base == other.base and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Import) and isinstance(other, Import):
            return self.module == other.module and self.description == other.description and self.prefix == other.prefix and self.reference == other.reference and self.revision_date == other.revision_date
        elif isinstance(self, Include) and isinstance(other, Include):
            return self.module == other.module and self.description == other.description and self.reference == other.reference and self.revision_date == other.revision_date
        elif isinstance(self, Input) and isinstance(other, Input):
            return self.must == other.must
        elif isinstance(self, Leaf) and isinstance(other, Leaf):
            return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units and self.when == other.when
        elif isinstance(self, LeafList) and isinstance(other, LeafList):
            return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.ordered_by == other.ordered_by and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units and self.when == other.when
        elif isinstance(self, Length) and isinstance(other, Length):
            return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference
        elif isinstance(self, List) and isinstance(other, List):
            return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.key == other.key and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.ordered_by == other.ordered_by and self.reference == other.reference and self.status == other.status and self.unique == other.unique and self.when == other.when
        elif isinstance(self, Module) and isinstance(other, Module):
            return self.name == other.name and self.augment == other.augment and self.contact == other.contact and self.description == other.description and self.deviation == other.deviation and self.extension_ == other.extension_ and self.feature == other.feature and self.import_ == other.import_ and self.include == other.include and self.namespace == other.namespace and self.organization == other.organization and self.prefix == other.prefix and self.reference == other.reference and self.revision == other.revision and self.yang_version == other.yang_version
        elif isinstance(self, Must) and isinstance(other, Must):
            return self.condition == other.condition and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference
        elif isinstance(self, Notification) and isinstance(other, Notification):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.must == other.must and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Output) and isinstance(other, Output):
            return self.must == other.must
        elif isinstance(self, Pattern) and isinstance(other, Pattern):
            return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.modifier == other.modifier and self.reference == other.reference
        elif isinstance(self, Range) and isinstance(other, Range):
            return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference
        elif isinstance(self, Refine) and isinstance(other, Refine):
            return self.target_node == other.target_node and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.presence == other.presence and self.reference == other.reference
        elif isinstance(self, Revision) and isinstance(other, Revision):
            return self.date == other.date and self.description == other.description and self.reference == other.reference
        elif isinstance(self, Rpc) and isinstance(other, Rpc):
            return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.input == other.input and self.output == other.output and self.reference == other.reference and self.status == other.status
        elif isinstance(self, Submodule) and isinstance(other, Submodule):
            return self.name == other.name and self.augment == other.augment and self.belongs_to == other.belongs_to and self.contact == other.contact and self.description == other.description and self.deviation == other.deviation and self.extension_ == other.extension_ and self.feature == other.feature and self.import_ == other.import_ and self.include == other.include and self.organization == other.organization and self.reference == other.reference and self.revision == other.revision and self.yang_version == other.yang_version
        elif isinstance(self, Type) and isinstance(other, Type):
            return self.name == other.name and self.base == other.base and self.bit == other.bit and self.enum == other.enum and self.fraction_digits == other.fraction_digits and self.length == other.length and self.path == other.path and self.pattern == other.pattern and self.range_ == other.range_ and self.require_instance == other.require_instance and self.type_ == other.type_
        elif isinstance(self, Typedef) and isinstance(other, Typedef):
            return self.name == other.name and self.default == other.default and self.description == other.description and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units
        elif isinstance(self, Uses) and isinstance(other, Uses):
            return self.name == other.name and self.augment == other.augment and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.refine == other.refine and self.status == other.status and self.when == other.when
        return False

def snode_name(sn: SchemaNode) -> str:
    if isinstance(sn, Action):
        return sn.name
    if isinstance(sn, Anydata):
        return sn.name
    if isinstance(sn, Anyxml):
        return sn.name
    if isinstance(sn, Augment):
        return sn.target_node
    if isinstance(sn, BelongsTo):
        return sn.module
    if isinstance(sn, Bit):
        return sn.name
    if isinstance(sn, Case):
        return sn.name
    if isinstance(sn, Choice):
        return sn.name
    if isinstance(sn, Container):
        return sn.name
    if isinstance(sn, Enum):
        return sn.name
    if isinstance(sn, Extension):
        return sn.name
    if isinstance(sn, Feature):
        return sn.name
    if isinstance(sn, Grouping):
        return sn.name
    if isinstance(sn, Identity):
        return sn.name
    if isinstance(sn, Import):
        return sn.module
    if isinstance(sn, Include):
        return sn.module
    if isinstance(sn, Leaf):
        return sn.name
    if isinstance(sn, LeafList):
        return sn.name
    if isinstance(sn, Length):
        return sn.value
    if isinstance(sn, List):
        return sn.name
    if isinstance(sn, Module):
        return sn.name
    if isinstance(sn, Must):
        return sn.condition
    if isinstance(sn, Notification):
        return sn.name
    if isinstance(sn, Pattern):
        return sn.value
    if isinstance(sn, Range):
        return sn.value
    if isinstance(sn, Refine):
        return sn.target_node
    if isinstance(sn, Revision):
        return sn.date
    if isinstance(sn, Rpc):
        return sn.name
    if isinstance(sn, Submodule):
        return sn.name
    if isinstance(sn, Type):
        return sn.name
    if isinstance(sn, Typedef):
        return sn.name
    if isinstance(sn, Uses):
        return sn.name
    raise ValueError("Unknown SchemaNode type in snode_name")

def snode_type_name(sn: SchemaNode) -> str:
    if isinstance(sn, Action):
        return "Action"
    if isinstance(sn, Anydata):
        return "Anydata"
    if isinstance(sn, Anyxml):
        return "Anyxml"
    if isinstance(sn, Augment):
        return "Augment"
    if isinstance(sn, BelongsTo):
        return "BelongsTo"
    if isinstance(sn, Bit):
        return "Bit"
    if isinstance(sn, Case):
        return "Case"
    if isinstance(sn, Choice):
        return "Choice"
    if isinstance(sn, Container):
        return "Container"
    if isinstance(sn, Enum):
        return "Enum"
    if isinstance(sn, Extension):
        return "Extension"
    if isinstance(sn, Feature):
        return "Feature"
    if isinstance(sn, Grouping):
        return "Grouping"
    if isinstance(sn, Identity):
        return "Identity"
    if isinstance(sn, Import):
        return "Import"
    if isinstance(sn, Include):
        return "Include"
    if isinstance(sn, Leaf):
        return "Leaf"
    if isinstance(sn, LeafList):
        return "LeafList"
    if isinstance(sn, Length):
        return "Length"
    if isinstance(sn, List):
        return "List"
    if isinstance(sn, Module):
        return "Module"
    if isinstance(sn, Must):
        return "Must"
    if isinstance(sn, Notification):
        return "Notification"
    if isinstance(sn, Pattern):
        return "Pattern"
    if isinstance(sn, Range):
        return "Range"
    if isinstance(sn, Refine):
        return "Refine"
    if isinstance(sn, Revision):
        return "Revision"
    if isinstance(sn, Rpc):
        return "Rpc"
    if isinstance(sn, Submodule):
        return "Submodule"
    if isinstance(sn, Type):
        return "Type"
    if isinstance(sn, Typedef):
        return "Typedef"
    if isinstance(sn, Uses):
        return "Uses"
    raise ValueError("Unknown SchemaNode type in snode_type_name")

class Action(SchemaNodeInner):
    """YANG action

    https://tools.ietf.org/html/rfc7950#section-7.15.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    input: ?Input
    output: ?Output
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], input: ?Input=None, output: ?Output=None, reference: ?str=None, status: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "action"
        if input is not None:
            input.parent = self
            n_ns = input.ns
            if n_ns is None:
                input.ns = self.ns
            n_pfx = input.pfx
            if n_pfx is None:
                input.pfx = self.pfx
        if output is not None:
            output.parent = self
            n_ns = output.ns
            if n_ns is None:
                output.ns = self.ns
            n_pfx = output.pfx
            if n_pfx is None:
                output.pfx = self.pfx
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.input = input
        self.output = output
        self.reference = reference
        self.status = status
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("input", self.input),
            ("output", self.output),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("input", self.input),
            ("output", self.output),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Action(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def get(self, name: str, ns: ?str=None) -> SchemaNode:
        # TODO: support looking up qualified by namespace
        #tns = ns if ns is not None else self.get_namespace()
        if name == 'input':
            _input = self.input
            if _input is not None:
                return _input
        if name == 'output':
            _output = self.output
            if _output is not None:
                return _output
        return SchemaNode.get(self, name, ns)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        self_input = self.input
        self_output = self.output
        # new_input = self_input.compile(context) if self_input is not None else None # actonc codegen pre-evaluates before None-check
        new_input = None
        if self_input is not None:
            new_input = self_input.compile(context, new_ns)
        # new_output = self_output.compile(context) if self_output is not None else None # actonc codegen pre-evaluates before None-check
        new_output = None
        if self_output is not None:
            new_output = self_output.compile(context, new_ns)
        new = Action(self.name,
                     description=self.description,
                     if_feature=self.if_feature,
                     input=new_input if new_input is not None and isinstance(new_input, Input) else Input(),
                     output=new_output if new_output is not None and isinstance(new_output, Output) else Output(),
                     reference=self.reference,
                     status=self.status,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns, new_pfx)
        return new

    def to_dnode(self) -> DAction:
        new_dnode = DAction(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            description=self.description,
            if_feature=self.if_feature,
            reference=self.reference,
            status=self.status,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def is_config(self) -> bool:
        return False

    def __str__(self):
        return "Action " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Action (Ord):
    def __eq__(self, other: Action):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.input == other.input and self.output == other.output and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Anydata(SchemaNodeOuter):
    """YANG anydata

    https://tools.ietf.org/html/rfc7950#section-7.10.1
    """
    name: str
    config: ?bool
    description: ?str
    if_feature: list[str]
    mandatory: ?bool
    must: list[Must]
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, name: str, config: ?bool=None, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, must: list[Must]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "anydata"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_mandatory = refine.mandatory
        if ref_mandatory != None:
            self.mandatory = ref_mandatory
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Anydata(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def to_dnode(self) -> DAnydata:
        return DAnydata(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            config=self.is_config(),
            description=self.description,
            if_feature=self.if_feature,
            mandatory=self.mandatory,
            must=self.must,
            reference=self.reference,
            status=self.status,
            when=self.when,
            exts=self.exts
        )

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Anydata(self.name,
                      config=self.config,
                      description=self.description,
                      if_feature=self.if_feature,
                      mandatory=self.mandatory,
                      must=self.must,
                      reference=self.reference,
                      status=self.status,
                      when=self.when,
                      exts=self.exts,
                      ns=new_ns if new_ns is not None else self.ns,
                      pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Anydata " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Anydata (Ord):
    def __eq__(self, other: Anydata):
        return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Anyxml(SchemaNodeOuter):
    """YANG anyxml

    https://tools.ietf.org/html/rfc7950#section-7.11.1
    """
    name: str
    config: ?bool
    description: ?str
    if_feature: list[str]
    mandatory: ?bool
    must: list[Must]
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, name: str, config: ?bool=None, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, must: list[Must]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "anyxml"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_mandatory = refine.mandatory
        if ref_mandatory != None:
            self.mandatory = ref_mandatory
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Anyxml(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def to_dnode(self) -> DAnyxml:
        return DAnyxml(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            config=self.is_config(),
            description=self.description,
            if_feature=self.if_feature,
            mandatory=self.mandatory,
            must=self.must,
            reference=self.reference,
            status=self.status,
            when=self.when,
            exts=self.exts
        )

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Anyxml(self.name,
                     config=self.config,
                     description=self.description,
                     if_feature=self.if_feature,
                     mandatory=self.mandatory,
                     must=self.must,
                     reference=self.reference,
                     status=self.status,
                     when=self.when,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Anyxml " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Anyxml (Ord):
    def __eq__(self, other: Anyxml):
        return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Augment(SchemaNodeInner):
    """YANG augment

    https://tools.ietf.org/html/rfc7950#section-7.17.1
    """
    target_node: str
    description: ?str
    if_feature: list[str]
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, target_node: str, description: ?str=None, if_feature: list[str]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "augment"
        self.target_node = target_node
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.target_node) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Augment(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Augment(self.target_node,
                      description=self.description,
                      if_feature=self.if_feature,
                      reference=self.reference,
                      status=self.status,
                      when=self.when,
                      exts=self.exts,
                      ns=new_ns if new_ns is not None else self.ns,
                      pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Augment " + self.target_node

    def _get_argname(self) -> ?str:
        return 'target_node'

    def _get_arg(self) -> ?str:
        return self.target_node

extension Augment (Ord):
    def __eq__(self, other: Augment):
        return self.target_node == other.target_node and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.target_node < b.target_node

class BelongsTo(SchemaNodeOuter):
    """YANG belongs-to

    https://tools.ietf.org/html/rfc7950#section-7.2.2
    """
    module: str
    prefix: str

    def __init__(self, module: str, prefix: str, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "belongs-to"
        self.module = module
        self.prefix = prefix
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("prefix", self.prefix),
            ("exts", self.exts),
        ]

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("prefix", self.prefix),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.module) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "BelongsTo(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = BelongsTo(self.module,
                        prefix=self.prefix,
                        exts=self.exts,
                        ns=new_ns if new_ns is not None else self.ns,
                        pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "BelongsTo " + self.module

    def _get_argname(self) -> ?str:
        return 'module'

    def _get_arg(self) -> ?str:
        return self.module

extension BelongsTo (Ord):
    def __eq__(self, other: BelongsTo):
        return self.module == other.module and self.prefix == other.prefix

    def __lt__(a, b):
        return a.module < b.module

class Bit(SchemaNodeOuter):
    """YANG bit

    https://tools.ietf.org/html/rfc7950#section-9.7.4.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    position: ?int
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], position: ?int=None, reference: ?str=None, status: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "bit"
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.position = position
        self.reference = reference
        self.status = status
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("position", self.position),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("position", self.position),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Bit(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Bit(self.name,
                  description=self.description,
                  if_feature=self.if_feature,
                  position=self.position,
                  reference=self.reference,
                  status=self.status,
                  exts=self.exts,
                  ns=new_ns if new_ns is not None else self.ns,
                  pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Bit " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Bit (Ord):
    def __eq__(self, other: Bit):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.position == other.position and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Case(SchemaNodeInner):
    """YANG case

    https://tools.ietf.org/html/rfc7950#section-7.9.2.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "case"
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Case(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Case(self.name,
                   description=self.description,
                   if_feature=self.if_feature,
                   reference=self.reference,
                   status=self.status,
                   when=self.when,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Case " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Case (Ord):
    def __eq__(self, other: Case):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Choice(SchemaNodeInner):
    """YANG choice

    https://tools.ietf.org/html/rfc7950#section-7.9.1
    """
    name: str
    config: ?bool
    default: ?str
    description: ?str
    if_feature: list[str]
    mandatory: ?bool
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, name: str, config: ?bool=None, default: ?str=None, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "choice"
        self.name = name
        self.config = config
        self.default = default
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        if len(refine.default) == 1:
            self.default = refine.default[0]
        elif len(refine.default) > 1:
            raise ValueError("Attempting to refine default with multiple values")
        ref_mandatory = refine.mandatory
        if ref_mandatory != None:
            self.mandatory = ref_mandatory
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Choice(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Choice(self.name,
                     config=self.config,
                     default=self.default,
                     description=self.description,
                     if_feature=self.if_feature,
                     mandatory=self.mandatory,
                     reference=self.reference,
                     status=self.status,
                     when=self.when,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Choice " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Choice (Ord):
    def __eq__(self, other: Choice):
        return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Container(SchemaNodeInner):
    """YANG container

    https://tools.ietf.org/html/rfc7950#section-7.5.2
    """
    name: str
    config: ?bool
    description: ?str
    if_feature: list[str]
    must: list[Must]
    presence: ?str
    reference: ?str
    status: ?str
    when: ?str

    def __init__(self, name: str, config: ?bool=None, description: ?str=None, if_feature: list[str]=[], must: list[Must]=[], presence: ?str=None, reference: ?str=None, status: ?str=None, when: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "container"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.must = must
        self.presence = presence
        self.reference = reference
        self.status = status
        self.when = when
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("must", self.must),
            ("presence", self.presence),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        ref_presence = refine.presence
        if ref_presence != None:
            self.presence = ref_presence
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("must", self.must),
            ("presence", self.presence),
            ("reference", self.reference),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Container(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def is_presence(self) -> bool:
        selfpresence = self.presence
        if selfpresence is not None:
            return True
        return False

    def to_dnode(self) -> DContainer:
        new_dnode = DContainer(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            config=self.is_config(),
            description=self.description,
            if_feature=self.if_feature,
            must=self.must,
            presence=self.is_presence(),
            reference=self.reference,
            status=self.status,
            when=self.when,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Container(self.name,
                        config=self.config,
                        description=self.description,
                        if_feature=self.if_feature,
                        must=self.must,
                        presence=self.presence,
                        reference=self.reference,
                        status=self.status,
                        when=self.when,
                        exts=self.exts,
                        ns=new_ns if new_ns is not None else self.ns,
                        pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Container " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Container (Ord):
    def __eq__(self, other: Container):
        return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.must == other.must and self.presence == other.presence and self.reference == other.reference and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Enum(SchemaNodeOuter):
    """YANG enum

    https://tools.ietf.org/html/rfc7950#section-9.6.4.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    reference: ?str
    status: ?str
    value: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], reference: ?str=None, status: ?str=None, value: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "enum"
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.value = value
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("value", self.value),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("value", self.value),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Enum(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Enum(self.name,
                   description=self.description,
                   if_feature=self.if_feature,
                   reference=self.reference,
                   status=self.status,
                   value=self.value,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Enum " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Enum (Ord):
    def __eq__(self, other: Enum):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status and self.value == other.value

    def __lt__(a, b):
        return a.name < b.name

class Extension(SchemaNodeOuter):
    """YANG extension

    https://tools.ietf.org/html/rfc7950#section-7.19.1
    """
    name: str
    argument: ?str
    description: ?str
    reference: ?str
    status: ?str

    def __init__(self, name: str, argument: ?str=None, description: ?str=None, reference: ?str=None, status: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "extension"
        self.name = name
        self.argument = argument
        self.description = description
        self.reference = reference
        self.status = status
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("argument", self.argument),
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("argument", self.argument),
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Extension(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Extension(self.name,
                        argument=self.argument,
                        description=self.description,
                        reference=self.reference,
                        status=self.status,
                        exts=self.exts,
                        ns=new_ns if new_ns is not None else self.ns,
                        pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Extension " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Extension (Ord):
    def __eq__(self, other: Extension):
        return self.name == other.name and self.argument == other.argument and self.description == other.description and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Feature(SchemaNodeOuter):
    """YANG feature

    https://tools.ietf.org/html/rfc7950#section-7.20.1.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], reference: ?str=None, status: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "feature"
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Feature(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Feature(self.name,
                      description=self.description,
                      if_feature=self.if_feature,
                      reference=self.reference,
                      status=self.status,
                      exts=self.exts,
                      ns=new_ns if new_ns is not None else self.ns,
                      pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Feature " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Feature (Ord):
    def __eq__(self, other: Feature):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Grouping(SchemaNodeInner):
    """YANG grouping

    https://tools.ietf.org/html/rfc7950#section-7.12.1
    """
    name: str
    description: ?str
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, reference: ?str=None, status: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "grouping"
        self.name = name
        self.description = description
        self.reference = reference
        self.status = status
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Grouping(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Grouping(self.name,
                       description=self.description,
                       reference=self.reference,
                       status=self.status,
                       exts=self.exts,
                       ns=new_ns if new_ns is not None else self.ns,
                       pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Grouping " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Grouping (Ord):
    def __eq__(self, other: Grouping):
        return self.name == other.name and self.description == other.description and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Identity(SchemaNodeOuter):
    """YANG identity

    https://tools.ietf.org/html/rfc7950#section-7.18.1
    """
    name: str
    base: list[str]
    description: ?str
    if_feature: list[str]
    reference: ?str
    status: ?str

    def __init__(self, name: str, base: list[str]=[], description: ?str=None, if_feature: list[str]=[], reference: ?str=None, status: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "identity"
        self.name = name
        self.base = base
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.status = status
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("base", self.base),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("base", self.base),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Identity(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Identity(self.name,
                       base=self.base,
                       description=self.description,
                       if_feature=self.if_feature,
                       reference=self.reference,
                       status=self.status,
                       exts=self.exts,
                       ns=new_ns if new_ns is not None else self.ns,
                       pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Identity " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Identity (Ord):
    def __eq__(self, other: Identity):
        return self.name == other.name and self.base == other.base and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Import(SchemaNodeOuter):
    """YANG import

    https://tools.ietf.org/html/rfc7950#section-7.1.5
    """
    module: str
    prefix: str
    description: ?str
    reference: ?str
    revision_date: ?str

    def __init__(self, module: str, prefix: str, description: ?str=None, reference: ?str=None, revision_date: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "import"
        self.module = module
        self.description = description
        self.prefix = prefix
        self.reference = reference
        self.revision_date = revision_date
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("prefix", self.prefix),
            ("description", self.description),
            ("reference", self.reference),
            ("revision-date", self.revision_date),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("prefix", self.prefix),
            ("description", self.description),
            ("reference", self.reference),
            ("revision-date", self.revision_date),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.module) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Import(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Import(self.module,
                     prefix=self.prefix,
                     description=self.description,
                     reference=self.reference,
                     revision_date=self.revision_date,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Import " + self.module

    def _get_argname(self) -> ?str:
        return 'module'

    def _get_arg(self) -> ?str:
        return self.module

extension Import (Ord):
    def __eq__(self, other: Import):
        return self.module == other.module and self.description == other.description and self.prefix == other.prefix and self.reference == other.reference and self.revision_date == other.revision_date

    def __lt__(a, b):
        return a.module < b.module

class Include(SchemaNodeOuter):
    """YANG include

    https://tools.ietf.org/html/rfc7950#section-7.1.6
    """
    module: str
    description: ?str
    reference: ?str
    revision_date: ?str

    def __init__(self, module: str, description: ?str=None, reference: ?str=None, revision_date: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "include"
        self.module = module
        self.description = description
        self.reference = reference
        self.revision_date = revision_date
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("reference", self.reference),
            ("revision-date", self.revision_date),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("reference", self.reference),
            ("revision-date", self.revision_date),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.module) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Include(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Include(self.module,
                      description=self.description,
                      reference=self.reference,
                      revision_date=self.revision_date,
                      exts=self.exts,
                      ns=new_ns if new_ns is not None else self.ns,
                      pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Include " + self.module

    def _get_argname(self) -> ?str:
        return 'module'

    def _get_arg(self) -> ?str:
        return self.module

extension Include (Ord):
    def __eq__(self, other: Include):
        return self.module == other.module and self.description == other.description and self.reference == other.reference and self.revision_date == other.revision_date

    def __lt__(a, b):
        return a.module < b.module

class Input(SchemaNodeInner):
    """YANG input

    https://tools.ietf.org/html/rfc7950#section-7.14.2.1
    """
    must: list[Must]

    def __init__(self, must: list[Must]=[], exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "input"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.must = must
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("must", self.must),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("must", self.must),
            ("exts", self.exts),
        ]
        args = []
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Input(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def to_dnode(self) -> DInput:
        new_dnode = DInput(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            must=self.must,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Input(must=self.must,
                    exts=self.exts,
                    ns=new_ns if new_ns is not None else self.ns,
                    pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Input"

    def _get_argname(self) -> ?str:
        return None

    def _get_arg(self) -> ?str:
        return None

extension Input (Ord):
    def __eq__(self, other: Input):
        return self.must == other.must

    def __lt__(a, b):
        return True

class Leaf(SchemaNodeOuter):
    """YANG leaf

    https://tools.ietf.org/html/rfc7950#section-7.6.2
    """
    name: str
    type_: Type
    config: ?bool
    default: ?str
    description: ?str
    if_feature: list[str]
    mandatory: ?bool
    must: list[Must]
    reference: ?str
    status: ?str
    units: ?str
    when: ?str

    def __init__(self, name: str, type_: Type, config: ?bool=None, default: ?str=None, description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, must: list[Must]=[], reference: ?str=None, status: ?str=None, units: ?str=None, when: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "leaf"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        type_.parent = self
        n_ns = type_.ns
        if n_ns is None:
            type_.ns = self.ns
        n_pfx = type_.pfx
        if n_pfx is None:
            type_.pfx = self.pfx
        self.name = name
        self.config = config
        self.default = default
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.must = must
        self.reference = reference
        self.status = status
        self.type_ = type_
        self.units = units
        self.when = when
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("type", self.type_),
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        if len(refine.default) == 1:
            self.default = refine.default[0]
        elif len(refine.default) > 1:
            raise ValueError("Attempting to refine default with multiple values")
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_mandatory = refine.mandatory
        if ref_mandatory != None:
            self.mandatory = ref_mandatory
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("type", self.type_),
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Leaf(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        base_typedef = self.type_.resolve_typedef(context)

        new_default = self.default
        if new_default is None:
            new_default = base_typedef.default

        new_units = self.units
        if new_units is None:
            new_units = base_typedef.units

        new = Leaf(self.name,
                   config=self.config,
                   default=new_default,
                   description=self.description,
                   if_feature=self.if_feature,
                   mandatory=self.mandatory,
                   must=self.must,
                   reference=self.reference,
                   status=self.status,
                   type_=base_typedef.type_,
                   units=new_units,
                   when=self.when,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)

        return new

    def to_dnode(self) -> DLeaf:
        return DLeaf(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            config=self.is_config(),
            default=self.default,
            description=self.description,
            if_feature=self.if_feature,
            mandatory=self.mandatory,
            must=self.must,
            reference=self.reference,
            status=self.status,
            type_=self.type_,
            units=self.units,
            when=self.when,
            exts=self.exts
        )

    def __str__(self):
        return "Leaf " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Leaf (Ord):
    def __eq__(self, other: Leaf):
        return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.must == other.must and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class LeafList(SchemaNodeOuter):
    """YANG leaf-list

    https://tools.ietf.org/html/rfc7950#section-7.7.3
    """
    name: str
    type_: Type
    config: ?bool
    default: list[str]
    description: ?str
    if_feature: list[str]
    max_elements: ?str
    min_elements: ?str
    must: list[Must]
    ordered_by: ?str
    reference: ?str
    status: ?str
    units: ?str
    when: ?str

    def __init__(self, name: str, type_: Type, config: ?bool=None, default: list[str]=[], description: ?str=None, if_feature: list[str]=[], max_elements: ?str=None, min_elements: ?str=None, must: list[Must]=[], ordered_by: ?str=None, reference: ?str=None, status: ?str=None, units: ?str=None, when: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "leaf-list"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        type_.parent = self
        n_ns = type_.ns
        if n_ns is None:
            type_.ns = self.ns
        n_pfx = type_.pfx
        if n_pfx is None:
            type_.pfx = self.pfx
        self.name = name
        self.config = config
        self.default = default
        self.description = description
        self.if_feature = if_feature
        self.max_elements = max_elements
        self.min_elements = min_elements
        self.must = must
        self.ordered_by = ordered_by
        self.reference = reference
        self.status = status
        self.type_ = type_
        self.units = units
        self.when = when
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("type", self.type_),
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("ordered-by", self.ordered_by),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_default in refine.default:
            if ref_default not in self.default:
                self.default.append(ref_default)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_max_elements = refine.max_elements
        if ref_max_elements != None:
            self.max_elements = ref_max_elements
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_min_elements = refine.min_elements
        if ref_min_elements != None:
            self.min_elements = ref_min_elements
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("type", self.type_),
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("ordered-by", self.ordered_by),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "LeafList(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        base_typedef = self.type_.resolve_typedef(context)

        new_units = self.units
        if new_units is None:
            new_units = base_typedef.units

        new = LeafList(self.name,
                       config=self.config,
                       default=self.default,
                       description=self.description,
                       if_feature=self.if_feature,
                       max_elements=self.max_elements,
                       min_elements=self.min_elements,
                       must=self.must,
                       ordered_by=self.ordered_by,
                       reference=self.reference,
                       status=self.status,
                       type_=base_typedef.type_,
                       units=new_units,
                       when=self.when,
                       exts=self.exts,
                       ns=new_ns if new_ns is not None else self.ns,
                       pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def get_max_elements(self) -> ?int:
        selfmax_elements = self.max_elements
        if selfmax_elements is not None and selfmax_elements != "unbounded":
            return int(selfmax_elements)
        return None

    def get_min_elements(self) -> int:
        selfmin_elements = self.min_elements
        if selfmin_elements is not None:
            return int(selfmin_elements)
        return 0

    def to_dnode(self) -> DLeafList:
        return DLeafList(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            config=self.is_config(),
            default=self.default,
            description=self.description,
            if_feature=self.if_feature,
            max_elements=self.get_max_elements(),
            min_elements=self.get_min_elements(),
            must=self.must,
            reference=self.reference,
            status=self.status,
            type_=self.type_,
            units=self.units,
            when=self.when,
            exts=self.exts
        )

    def __str__(self):
        return "LeafList " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension LeafList (Ord):
    def __eq__(self, other: LeafList):
        return self.name == other.name and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.ordered_by == other.ordered_by and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Length(SchemaNodeOuter):
    """YANG length

    https://tools.ietf.org/html/rfc7950#section-9.4.4.1
    """
    value: str
    description: ?str
    error_app_tag: ?str
    error_message: ?str
    reference: ?str

    def __init__(self, value: str, description: ?str=None, error_app_tag: ?str=None, error_message: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "length"
        self.value = value
        self.description = description
        self.error_app_tag = error_app_tag
        self.error_message = error_message
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.value) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Length(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Length(self.value,
                     description=self.description,
                     error_app_tag=self.error_app_tag,
                     error_message=self.error_message,
                     reference=self.reference,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Length " + self.value

    def _get_argname(self) -> ?str:
        return 'value'

    def _get_arg(self) -> ?str:
        return self.value

extension Length (Ord):
    def __eq__(self, other: Length):
        return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference

    def __lt__(a, b):
        return a.value < b.value

class List(SchemaNodeInner):
    """YANG list

    https://tools.ietf.org/html/rfc7950#section-7.8.1
    """
    name: str
    config: ?bool
    description: ?str
    if_feature: list[str]
    key: ?str
    max_elements: ?str
    min_elements: ?str
    must: list[Must]
    ordered_by: ?str
    reference: ?str
    status: ?str
    unique: list[str]
    when: ?str

    def __init__(self, name: str, config: ?bool=None, description: ?str=None, if_feature: list[str]=[], key: ?str=None, max_elements: ?str=None, min_elements: ?str=None, must: list[Must]=[], ordered_by: ?str=None, reference: ?str=None, status: ?str=None, unique: list[str]=[], when: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "list"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.config = config
        self.description = description
        self.if_feature = if_feature
        self.key = key
        self.max_elements = max_elements
        self.min_elements = min_elements
        self.must = must
        self.ordered_by = ordered_by
        self.reference = reference
        self.status = status
        self.unique = unique
        self.when = when
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("key", self.key),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("ordered-by", self.ordered_by),
            ("reference", self.reference),
            ("status", self.status),
            ("unique", self.unique),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_max_elements = refine.max_elements
        if ref_max_elements != None:
            self.max_elements = ref_max_elements
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_min_elements = refine.min_elements
        if ref_min_elements != None:
            self.min_elements = ref_min_elements
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("key", self.key),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("ordered-by", self.ordered_by),
            ("reference", self.reference),
            ("status", self.status),
            ("unique", self.unique),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "List(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def keys(self) -> list[str]:
        selfkey = self.key
        if selfkey is not None:
            return selfkey.split(" ")
        return []

    def get_max_elements(self) -> ?int:
        selfmax_elements = self.max_elements
        if selfmax_elements is not None and selfmax_elements != "unbounded":
            return int(selfmax_elements)
        return None

    def get_min_elements(self) -> int:
        selfmin_elements = self.min_elements
        if selfmin_elements is not None:
            return int(selfmin_elements)
        return 0

    def to_dnode(self) -> DList:
        new_dnode = DList(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            key=self.keys(),
            config=self.is_config(),
            description=self.description,
            if_feature=self.if_feature,
            max_elements=self.get_max_elements(),
            min_elements=self.get_min_elements(),
            must=self.must,
            reference=self.reference,
            status=self.status,
            when=self.when,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = List(self.name,
                   config=self.config,
                   description=self.description,
                   if_feature=self.if_feature,
                   key=self.key,
                   max_elements=self.max_elements,
                   min_elements=self.min_elements,
                   must=self.must,
                   ordered_by=self.ordered_by,
                   reference=self.reference,
                   status=self.status,
                   unique=self.unique,
                   when=self.when,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "List " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension List (Ord):
    def __eq__(self, other: List):
        return self.name == other.name and self.config == other.config and self.description == other.description and self.if_feature == other.if_feature and self.key == other.key and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.ordered_by == other.ordered_by and self.reference == other.reference and self.status == other.status and self.unique == other.unique and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

class Module(SchemaNodeInner):
    """YANG module

    https://tools.ietf.org/html/rfc7950#section-7.1.1
    """
    name: str
    yang_version: float
    namespace: str
    prefix: str
    import_: list[Import]
    include: list[Include]
    organization: ?str
    contact: ?str
    description: ?str
    reference: ?str
    revision: list[Revision]
    augment: list[Augment]
    deviation: list[str]
    extension_: list[Extension]
    feature: list[Feature]

    def __init__(self, name: str, namespace: str, prefix: str, yang_version: float=1.1, augment: list[Augment]=[], contact: ?str=None, description: ?str=None, deviation: list[str]=[], extension_: list[Extension]=[], feature: list[Feature]=[], import_: list[Import]=[], include: list[Include]=[], organization: ?str=None, reference: ?str=None, revision: list[Revision]=[], exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None:
            new_ns = namespace
        if new_pfx is None:
            new_pfx = prefix
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "module"
        for n in augment:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in extension_:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in feature:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in import_:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in include:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in revision:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.augment = augment
        self.contact = contact
        self.description = description
        self.deviation = deviation
        self.extension_ = extension_
        self.feature = feature
        self.import_ = import_
        self.include = include
        self.namespace = namespace
        self.organization = organization
        self.prefix = prefix
        self.reference = reference
        self.revision = revision
        self.yang_version = yang_version
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("yang-version", self.yang_version),
            ("namespace", self.namespace),
            ("prefix", self.prefix),
            ("import", self.import_),
            ("include", self.include),
            ("organization", self.organization),
            ("contact", self.contact),
            ("description", self.description),
            ("reference", self.reference),
            ("revision", self.revision),
            ("augment", self.augment),
            ("deviation", self.deviation),
            ("extension", self.extension_),
            ("feature", self.feature),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("yang-version", self.yang_version),
            ("namespace", self.namespace),
            ("prefix", self.prefix),
            ("import", self.import_),
            ("include", self.include),
            ("organization", self.organization),
            ("contact", self.contact),
            ("description", self.description),
            ("reference", self.reference),
            ("revision", self.revision),
            ("augment", self.augment),
            ("deviation", self.deviation),
            ("extension", self.extension_),
            ("feature", self.feature),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Module(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def get_import_by_prefix(self, prefix: str) -> Import:
        for imp in self.import_:
            if imp.prefix == prefix:
                return imp
        raise ValueError("No import with prefix %s in module %s" % (prefix, self.name))

    def get_modrev(self) -> ModRev:
        rev = self.get_revision()
        rev_date = rev.date if rev is not None else None
        return ModRev(self.name, rev_date)

    def get_namespace(self) -> str:
        self_ns = self.ns
        if self_ns is not None:
            return self_ns
        selfnamespace = self.namespace
        if selfnamespace is not None:
            return selfnamespace
        raise ValueError("Module %s has no namespace" % self.name)

    def get_prefix(self) -> str:
        self_pfx = self.pfx
        if self_pfx is not None:
            return self_pfx
        selfprefix = self.prefix
        if selfprefix is not None:
            return selfprefix
        raise ValueError("Module %s has no prefix" % self.name)

    def get_revision(self) -> ?Revision:
        latest = None
        for rev in self.revision:
            if latest is None or (latest is not None and rev.date > latest.date):
                latest = rev
        return latest

    def to_dnode(self) -> DModule:
        new_dnode = DModule(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            description=self.description,
            revision=self.revision,
            reference=self.reference,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def is_config(self) -> bool:
        return False

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Module(self.name,
                     yang_version=self.yang_version,
                     namespace=self.namespace,
                     prefix=self.prefix,
                     import_=self.import_,
                     include=self.include,
                     organization=self.organization,
                     contact=self.contact,
                     description=self.description,
                     reference=self.reference,
                     revision=self.revision,
                     augment=self.augment,
                     deviation=self.deviation,
                     extension_=self.extension_,
                     feature=self.feature,
                     exts=self.exts)
        self.expand_children(context, new, new_ns)
        new.expand_augments(context)
        return new

    def __str__(self):
        return "Module " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Module (Hashable):
    def __hash__(self):
        rev = self.get_revision()
        rev_str = rev.date if rev is not None else ""
        return hash(self.get_namespace() + rev_str)

    def __eq__(self, other: Module):
        return self.name == other.name and self.augment == other.augment and self.contact == other.contact and self.description == other.description and self.deviation == other.deviation and self.extension_ == other.extension_ and self.feature == other.feature and self.import_ == other.import_ and self.include == other.include and self.namespace == other.namespace and self.organization == other.organization and self.prefix == other.prefix and self.reference == other.reference and self.revision == other.revision and self.yang_version == other.yang_version

extension Module (Ord):
    def __lt__(a, b):
        return a.name < b.name

class Must(SchemaNodeOuter):
    """YANG must

    https://tools.ietf.org/html/rfc7950#section-7.5.4
    """
    condition: str
    description: ?str
    error_app_tag: ?str
    error_message: ?str
    reference: ?str

    def __init__(self, condition: str, description: ?str=None, error_app_tag: ?str=None, error_message: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "must"
        self.condition = condition
        self.description = description
        self.error_app_tag = error_app_tag
        self.error_message = error_message
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.condition) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Must(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Must(self.condition,
                   description=self.description,
                   error_app_tag=self.error_app_tag,
                   error_message=self.error_message,
                   reference=self.reference,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Must " + self.condition

    def _get_argname(self) -> ?str:
        return 'condition'

    def _get_arg(self) -> ?str:
        return self.condition

extension Must (Ord):
    def __eq__(self, other: Must):
        return self.condition == other.condition and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference

    def __lt__(a, b):
        return a.condition < b.condition

class Notification(SchemaNodeInner):
    """YANG notification

    https://tools.ietf.org/html/rfc7950#section-7.16.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    must: list[Must]
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], must: list[Must]=[], reference: ?str=None, status: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "notification"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.must = must
        self.reference = reference
        self.status = status
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("must", self.must),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Notification(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def to_dnode(self) -> DNotification:
        new_dnode = DNotification(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            description=self.description,
            if_feature=self.if_feature,
            reference=self.reference,
            status=self.status,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def is_config(self) -> bool:
        return False

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Notification(self.name,
                           description=self.description,
                           if_feature=self.if_feature,
                           must=self.must,
                           reference=self.reference,
                           status=self.status,
                           exts=self.exts,
                           ns=new_ns if new_ns is not None else self.ns,
                           pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Notification " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Notification (Ord):
    def __eq__(self, other: Notification):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.must == other.must and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Output(SchemaNodeInner):
    """YANG output

    https://tools.ietf.org/html/rfc7950#section-7.14.3.1
    """
    must: list[Must]

    def __init__(self, must: list[Must]=[], exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "output"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.must = must
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("must", self.must),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("must", self.must),
            ("exts", self.exts),
        ]
        args = []
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Output(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def to_dnode(self) -> DOutput:
        new_dnode = DOutput(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            must=self.must,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def is_config(self) -> bool:
        return False

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Output(must=self.must,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns)
        return new

    def __str__(self):
        return "Output"

    def _get_argname(self) -> ?str:
        return None

    def _get_arg(self) -> ?str:
        return None

extension Output (Ord):
    def __eq__(self, other: Output):
        return self.must == other.must

    def __lt__(a, b):
        return True

class Pattern(SchemaNodeOuter):
    """YANG pattern

    https://tools.ietf.org/html/rfc7950#section-9.4.5.1
    """
    value: str
    description: ?str
    error_app_tag: ?str
    error_message: ?str
    modifier: ?str
    reference: ?str

    def __init__(self, value: str, description: ?str=None, error_app_tag: ?str=None, error_message: ?str=None, modifier: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "pattern"
        self.value = value
        self.description = description
        self.error_app_tag = error_app_tag
        self.error_message = error_message
        self.modifier = modifier
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("modifier", self.modifier),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("modifier", self.modifier),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.value) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Pattern(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Pattern(self.value,
                      description=self.description,
                      error_app_tag=self.error_app_tag,
                      error_message=self.error_message,
                      modifier=self.modifier,
                      reference=self.reference,
                      exts=self.exts,
                      ns=new_ns if new_ns is not None else self.ns,
                      pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Pattern " + self.value

    def _get_argname(self) -> ?str:
        return 'value'

    def _get_arg(self) -> ?str:
        return self.value

extension Pattern (Ord):
    def __eq__(self, other: Pattern):
        return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.modifier == other.modifier and self.reference == other.reference

    def __lt__(a, b):
        return a.value < b.value

class Range(SchemaNodeOuter):
    """YANG range

    https://tools.ietf.org/html/rfc7950#section-9.2.4.1
    """
    value: str
    description: ?str
    error_app_tag: ?str
    error_message: ?str
    reference: ?str

    def __init__(self, value: str, description: ?str=None, error_app_tag: ?str=None, error_message: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "range"
        self.value = value
        self.description = description
        self.error_app_tag = error_app_tag
        self.error_message = error_message
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("error-app-tag", self.error_app_tag),
            ("error-message", self.error_message),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.value) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Range(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Range(self.value,
                    description=self.description,
                    error_app_tag=self.error_app_tag,
                    error_message=self.error_message,
                    reference=self.reference,
                    exts=self.exts,
                    ns=new_ns if new_ns is not None else self.ns,
                    pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Range " + self.value

    def _get_argname(self) -> ?str:
        return 'value'

    def _get_arg(self) -> ?str:
        return self.value

extension Range (Ord):
    def __eq__(self, other: Range):
        return self.value == other.value and self.description == other.description and self.error_app_tag == other.error_app_tag and self.error_message == other.error_message and self.reference == other.reference

    def __lt__(a, b):
        return a.value < b.value

class Refine(SchemaNodeOuter):
    """YANG refine

    https://tools.ietf.org/html/rfc7950#section-7.13.999
    """
    target_node: str
    config: ?bool
    default: list[str]
    description: ?str
    if_feature: list[str]
    mandatory: ?bool
    max_elements: ?str
    min_elements: ?str
    must: list[Must]
    presence: ?str
    reference: ?str

    def __init__(self, target_node: str, config: ?bool=None, default: list[str]=[], description: ?str=None, if_feature: list[str]=[], mandatory: ?bool=None, max_elements: ?str=None, min_elements: ?str=None, must: list[Must]=[], presence: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "refine"
        for n in must:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.target_node = target_node
        self.config = config
        self.default = default
        self.description = description
        self.if_feature = if_feature
        self.mandatory = mandatory
        self.max_elements = max_elements
        self.min_elements = min_elements
        self.must = must
        self.presence = presence
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("presence", self.presence),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        ref_presence = refine.presence
        if ref_presence != None:
            self.presence = ref_presence
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        for ref_default in refine.default:
            if ref_default not in self.default:
                self.default.append(ref_default)
        for ref_must in refine.must:
            if ref_must not in self.must:
                self.must.append(ref_must)
        ref_mandatory = refine.mandatory
        if ref_mandatory != None:
            self.mandatory = ref_mandatory
        ref_max_elements = refine.max_elements
        if ref_max_elements != None:
            self.max_elements = ref_max_elements
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_min_elements = refine.min_elements
        if ref_min_elements != None:
            self.min_elements = ref_min_elements
        ref_config = refine.config
        if ref_config != None:
            self.config = ref_config
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("config", self.config),
            ("default", self.default),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("mandatory", self.mandatory),
            ("max-elements", self.max_elements),
            ("min-elements", self.min_elements),
            ("must", self.must),
            ("presence", self.presence),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.target_node) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Refine(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Refine(self.target_node,
                     config=self.config,
                     default=self.default,
                     description=self.description,
                     if_feature=self.if_feature,
                     mandatory=self.mandatory,
                     max_elements=self.max_elements,
                     min_elements=self.min_elements,
                     must=self.must,
                     presence=self.presence,
                     reference=self.reference,
                     exts=self.exts,
                     ns=new_ns if new_ns is not None else self.ns,
                     pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Refine " + self.target_node

    def _get_argname(self) -> ?str:
        return 'target_node'

    def _get_arg(self) -> ?str:
        return self.target_node

extension Refine (Ord):
    def __eq__(self, other: Refine):
        return self.target_node == other.target_node and self.config == other.config and self.default == other.default and self.description == other.description and self.if_feature == other.if_feature and self.mandatory == other.mandatory and self.max_elements == other.max_elements and self.min_elements == other.min_elements and self.must == other.must and self.presence == other.presence and self.reference == other.reference

    def __lt__(a, b):
        return a.target_node < b.target_node

class Revision(SchemaNodeOuter):
    """YANG revision

    https://tools.ietf.org/html/rfc7950#section-7.1.9.1
    """
    date: str
    description: ?str
    reference: ?str

    def __init__(self, date: str, description: ?str=None, reference: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "revision"
        self.date = date
        self.description = description
        self.reference = reference
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("reference", self.reference),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("reference", self.reference),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.date) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Revision(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Revision(self.date,
                       description=self.description,
                       reference=self.reference,
                       exts=self.exts,
                       ns=new_ns if new_ns is not None else self.ns,
                       pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Revision " + self.date

    def _get_argname(self) -> ?str:
        return 'date'

    def _get_arg(self) -> ?str:
        return self.date

extension Revision (Ord):
    def __eq__(self, other: Revision):
        return self.date == other.date and self.description == other.description and self.reference == other.reference

    def __lt__(a, b):
        return a.date < b.date

class Rpc(SchemaNodeInner):
    """YANG rpc

    https://tools.ietf.org/html/rfc7950#section-7.14.1
    """
    name: str
    description: ?str
    if_feature: list[str]
    input: ?Input
    output: ?Output
    reference: ?str
    status: ?str

    def __init__(self, name: str, description: ?str=None, if_feature: list[str]=[], input: ?Input=None, output: ?Output=None, reference: ?str=None, status: ?str=None, exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "rpc"
        if input is not None:
            input.parent = self
            n_ns = input.ns
            if n_ns is None:
                input.ns = self.ns
            n_pfx = input.pfx
            if n_pfx is None:
                input.pfx = self.pfx
        if output is not None:
            output.parent = self
            n_ns = output.ns
            if n_ns is None:
                output.ns = self.ns
            n_pfx = output.pfx
            if n_pfx is None:
                output.pfx = self.pfx
        self.name = name
        self.description = description
        self.if_feature = if_feature
        self.input = input
        self.output = output
        self.reference = reference
        self.status = status
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("input", self.input),
            ("output", self.output),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("input", self.input),
            ("output", self.output),
            ("reference", self.reference),
            ("status", self.status),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Rpc(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def get(self, name: str, ns: ?str=None) -> SchemaNode:
        # TODO: support looking up qualified by namespace
        #tns = ns if ns is not None else self.get_namespace()
        if name == 'input':
            _input = self.input
            if _input is not None:
                return _input
        if name == 'output':
            _output = self.output
            if _output is not None:
                return _output
        return SchemaNode.get(self, name, ns)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        self_input = self.input
        self_output = self.output
        # new_input = self_input.compile(context) if self_input is not None else None # actonc codegen pre-evaluates before None-check
        new_input = None
        if self_input is not None:
            new_input = self_input.compile(context)
        # new_output = self_output.compile(context) if self_output is not None else None # actonc codegen pre-evaluates before None-check
        new_output = None
        if self_output is not None:
            new_output = self_output.compile(context)
        new = Rpc(self.name,
                  description=self.description,
                  if_feature=self.if_feature,
                  input=new_input if new_input is not None and isinstance(new_input, Input) else Input(),
                  output=new_output if new_output is not None and isinstance(new_output, Output) else Output(),
                  reference=self.reference,
                  status=self.status,
                  exts=self.exts,
                  ns=new_ns if new_ns is not None else self.ns,
                  pfx=new_pfx if new_pfx is not None else self.pfx)
        self.expand_children(context, new, new_ns, new_pfx)
        return new

    def to_dnode(self) -> DRpc:
        new_dnode = DRpc(
            namespace=self.get_namespace(),
            prefix=self.get_prefix(),
            name=self.name,
            description=self.description,
            if_feature=self.if_feature,
            reference=self.reference,
            status=self.status,
            exts=self.exts,
            children=self.get_dnode_children()
        )
        for child in new_dnode.children:
            child.parent = new_dnode
        return new_dnode

    def is_config(self) -> bool:
        return False

    def __str__(self):
        return "Rpc " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Rpc (Ord):
    def __eq__(self, other: Rpc):
        return self.name == other.name and self.description == other.description and self.if_feature == other.if_feature and self.input == other.input and self.output == other.output and self.reference == other.reference and self.status == other.status

    def __lt__(a, b):
        return a.name < b.name

class Submodule(SchemaNodeInner):
    """YANG submodule

    https://tools.ietf.org/html/rfc7950#section-7.2.1
    """
    name: str
    yang_version: float
    import_: list[Import]
    include: list[Include]
    organization: ?str
    contact: ?str
    description: ?str
    reference: ?str
    revision: list[Revision]
    belongs_to: BelongsTo
    augment: list[Augment]
    deviation: list[str]
    extension_: list[Extension]
    feature: list[Feature]

    def __init__(self, name: str, belongs_to: BelongsTo, yang_version: float=1.1, augment: list[Augment]=[], contact: ?str=None, description: ?str=None, deviation: list[str]=[], extension_: list[Extension]=[], feature: list[Feature]=[], import_: list[Import]=[], include: list[Include]=[], organization: ?str=None, reference: ?str=None, revision: list[Revision]=[], exts=[], children=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "submodule"
        for n in augment:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        belongs_to.parent = self
        n_ns = belongs_to.ns
        if n_ns is None:
            belongs_to.ns = self.ns
        n_pfx = belongs_to.pfx
        if n_pfx is None:
            belongs_to.pfx = self.pfx
        for n in extension_:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in feature:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in import_:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in include:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in revision:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.augment = augment
        self.belongs_to = belongs_to
        self.contact = contact
        self.description = description
        self.deviation = deviation
        self.extension_ = extension_
        self.feature = feature
        self.import_ = import_
        self.include = include
        self.organization = organization
        self.reference = reference
        self.revision = revision
        self.yang_version = yang_version
        self.exts = exts
        for n in children:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.children = children

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("yang-version", self.yang_version),
            ("import", self.import_),
            ("include", self.include),
            ("organization", self.organization),
            ("contact", self.contact),
            ("description", self.description),
            ("reference", self.reference),
            ("revision", self.revision),
            ("belongs-to", self.belongs_to),
            ("augment", self.augment),
            ("deviation", self.deviation),
            ("extension", self.extension_),
            ("feature", self.feature),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("yang-version", self.yang_version),
            ("import", self.import_),
            ("include", self.include),
            ("organization", self.organization),
            ("contact", self.contact),
            ("description", self.description),
            ("reference", self.reference),
            ("revision", self.revision),
            ("belongs-to", self.belongs_to),
            ("augment", self.augment),
            ("deviation", self.deviation),
            ("extension", self.extension_),
            ("feature", self.feature),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        if len(self.children) > 0:
            args.append("children=[")
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Submodule(" + args_text
        if len(self.children) == 0:
            text_line += ')'
        res.append(text_line)
        if len(self.children) > 0:
            child_res = []
            for child in self.children:
                child_res.append(child.prsrc(indent+1))
            res.append(",\n".join(child_res))
            res.append(_ind(indent) + "])")
        return "\n".join(res)

    def get_modrev(self) -> ModRev:
        rev = self.get_revision()
        rev_date = rev.date if rev is not None else None
        return ModRev(self.name, rev_date)

    def get_revision(self) -> ?Revision:
        latest = None
        for rev in self.revision:
            if latest is None or (latest is not None and rev.date > latest.date):
                latest = rev
        return latest

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Submodule(self.name,
                        yang_version=self.yang_version,
                        import_=self.import_,
                        include=self.include,
                        organization=self.organization,
                        contact=self.contact,
                        description=self.description,
                        reference=self.reference,
                        revision=self.revision,
                        belongs_to=self.belongs_to,
                        augment=self.augment,
                        deviation=self.deviation,
                        extension_=self.extension_,
                        feature=self.feature,
                        exts=self.exts)
        self.expand_children(context, new, new_ns)
        new.expand_augments(context)
        return new

    def __str__(self):
        return "Submodule " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Submodule (Ord):
    def __eq__(self, other: Submodule):
        return self.name == other.name and self.augment == other.augment and self.belongs_to == other.belongs_to and self.contact == other.contact and self.description == other.description and self.deviation == other.deviation and self.extension_ == other.extension_ and self.feature == other.feature and self.import_ == other.import_ and self.include == other.include and self.organization == other.organization and self.reference == other.reference and self.revision == other.revision and self.yang_version == other.yang_version

    def __lt__(a, b):
        return a.name < b.name

class Type(SchemaNodeOuter):
    """YANG type

    https://tools.ietf.org/html/rfc7950#section-7.4.1
    """
    name: str
    base: list[str]
    bit: list[Bit]
    enum: list[Enum]
    fraction_digits: ?int
    length: ?Length
    path: ?str
    pattern: list[Pattern]
    range_: ?Range
    require_instance: ?bool
    type_: list[Type]

    def __init__(self, name: str, base: list[str]=[], bit: list[Bit]=[], enum: list[Enum]=[], fraction_digits: ?int=None, length: ?Length=None, path: ?str=None, pattern: list[Pattern]=[], range_: ?Range=None, require_instance: ?bool=None, type_: list[Type]=[], exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "type"
        for n in bit:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in enum:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        if length is not None:
            length.parent = self
            n_ns = length.ns
            if n_ns is None:
                length.ns = self.ns
            n_pfx = length.pfx
            if n_pfx is None:
                length.pfx = self.pfx
        for n in pattern:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        if range_ is not None:
            range_.parent = self
            n_ns = range_.ns
            if n_ns is None:
                range_.ns = self.ns
            n_pfx = range_.pfx
            if n_pfx is None:
                range_.pfx = self.pfx
        for n in type_:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.base = base
        self.bit = bit
        self.enum = enum
        self.fraction_digits = fraction_digits
        self.length = length
        self.path = path
        self.pattern = pattern
        self.range_ = range_
        self.require_instance = require_instance
        self.type_ = type_
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("base", self.base),
            ("bit", self.bit),
            ("enum", self.enum),
            ("fraction-digits", self.fraction_digits),
            ("length", self.length),
            ("path", self.path),
            ("pattern", self.pattern),
            ("range", self.range_),
            ("require-instance", self.require_instance),
            ("type", self.type_),
            ("exts", self.exts),
        ]

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("base", self.base),
            ("bit", self.bit),
            ("enum", self.enum),
            ("fraction-digits", self.fraction_digits),
            ("length", self.length),
            ("path", self.path),
            ("pattern", self.pattern),
            ("range", self.range_),
            ("require-instance", self.require_instance),
            ("type", self.type_),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Type(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def resolve_union_types(self, context: Context) -> Type:
        if self.name == "union":
            resolved_union_types = []
            # Resolve union types
            for ut in self.type_:
                resolved_ut = ut.resolve_typedef(context).type_
                resolved_union_types.append(resolved_ut)
            new = Type(self.name,
                       base=self.base,
                       bit=self.bit,
                       enum=self.enum,
                       fraction_digits=self.fraction_digits,
                       length=self.length,
                       path=self.path,
                       pattern=self.pattern,
                       range_=self.range_,
                       require_instance=self.require_instance,
                       type_=resolved_union_types)
            return new
        else:
            return self

    def resolve_typedef(self, context: Context) -> Typedef:
        if self.name in _builtin_types:
            return Typedef(self.name, type_=self.resolve_union_types(context))
        td = self.get_typedef(self.name, context)
        for i in range(RECURSION_LIMIT+1):
            if td.type_.name in _builtin_types:
                new_t = td.type_.resolve_union_types(context)
                td.type_ = new_t
                return td
            td = td.type_.resolve_typedef(context)
            if i == RECURSION_LIMIT:
                raise ValueError("Recursion limit reached for typedef %s" % self.name)
        raise ValueError("Unable to resolve typedef %s" % self.name)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        new = Type(self.name,
                   base=self.base,
                   bit=self.bit,
                   enum=self.enum,
                   fraction_digits=self.fraction_digits,
                   length=self.length,
                   path=self.path,
                   pattern=self.pattern,
                   range_=self.range_,
                   require_instance=self.require_instance,
                   type_=self.type_,
                   exts=self.exts,
                   ns=new_ns if new_ns is not None else self.ns,
                   pfx=new_pfx if new_pfx is not None else self.pfx)
        return new

    def __str__(self):
        return "Type " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Type (Ord):
    def __eq__(self, other: Type):
        return self.name == other.name and self.base == other.base and self.bit == other.bit and self.enum == other.enum and self.fraction_digits == other.fraction_digits and self.length == other.length and self.path == other.path and self.pattern == other.pattern and self.range_ == other.range_ and self.require_instance == other.require_instance and self.type_ == other.type_

    def __lt__(a, b):
        return a.name < b.name

class Typedef(SchemaNodeOuter):
    """YANG typedef

    https://tools.ietf.org/html/rfc7950#section-7.3.1
    """
    name: str
    type_: Type
    default: ?str
    description: ?str
    reference: ?str
    status: ?str
    units: ?str

    def __init__(self, name: str, type_: Type, default: ?str=None, description: ?str=None, reference: ?str=None, status: ?str=None, units: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "typedef"
        type_.parent = self
        n_ns = type_.ns
        if n_ns is None:
            type_.ns = self.ns
        n_pfx = type_.pfx
        if n_pfx is None:
            type_.pfx = self.pfx
        self.name = name
        self.default = default
        self.description = description
        self.reference = reference
        self.status = status
        self.type_ = type_
        self.units = units
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("type", self.type_),
            ("default", self.default),
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        if len(refine.default) == 1:
            self.default = refine.default[0]
        elif len(refine.default) > 1:
            raise ValueError("Attempting to refine default with multiple values")
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("type", self.type_),
            ("default", self.default),
            ("description", self.description),
            ("reference", self.reference),
            ("status", self.status),
            ("units", self.units),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Typedef(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        base_typedef = self.type_.resolve_typedef(context)

        new_default = self.default
        if new_default is None:
            new_default = base_typedef.default

        new_units = self.units
        if new_units is None:
            new_units = base_typedef.units

        new = Typedef(self.name,
                      default=new_default,
                      description=self.description,
                      reference=self.reference,
                      status=self.status,
                      type_=base_typedef.type_,
                      units=new_units,
                      exts=self.exts)
        return new

    def __str__(self):
        return "Typedef " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Typedef (Ord):
    def __eq__(self, other: Typedef):
        return self.name == other.name and self.default == other.default and self.description == other.description and self.reference == other.reference and self.status == other.status and self.type_ == other.type_ and self.units == other.units

    def __lt__(a, b):
        return a.name < b.name

class Uses(SchemaNodeOuter):
    """YANG uses

    https://tools.ietf.org/html/rfc7950#section-7.13.1
    """
    name: str
    augment: list[Augment]
    description: ?str
    if_feature: list[str]
    reference: ?str
    refine: list[Refine]
    status: ?str
    when: ?str

    def __init__(self, name: str, augment: list[Augment]=[], description: ?str=None, if_feature: list[str]=[], reference: ?str=None, refine: list[Refine]=[], status: ?str=None, when: ?str=None, exts=[], parent=None, ns=None, pfx=None):
        self.parent = parent
        new_ns = ns
        new_pfx = pfx
        if new_ns is None and parent is not None:
            new_ns = parent.ns
        if new_pfx is None and parent is not None:
            new_pfx = parent.pfx
        self.ns = new_ns
        self.pfx = new_pfx
        self._yname = "uses"
        for n in augment:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        for n in refine:
            n.parent = self
            n_ns = n.ns
            if n_ns is None:
                n.ns = self.ns
            n_pfx = n.pfx
            if n_pfx is None:
                n.pfx = self.pfx
        self.name = name
        self.augment = augment
        self.description = description
        self.if_feature = if_feature
        self.reference = reference
        self.refine = refine
        self.status = status
        self.when = when
        self.exts = exts

    def get_attrs(self) -> list[(str, ?value)]:
        return [
            ("augment", self.augment),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("refine", self.refine),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]

    mut def apply_refine(self, refine: Refine):
        ref_reference = refine.reference
        if ref_reference != None:
            self.reference = ref_reference
        for ref_if_feature in refine.if_feature:
            if ref_if_feature not in self.if_feature:
                self.if_feature.append(ref_if_feature)
        ref_description = refine.description
        if ref_description != None:
            self.description = ref_description
        self.exts.extend(refine.exts)

    def prsrc(self, indent=0):
        """Print Acton source of this node"""
        res = []
        attrs: list[(str, ?value)] = [
            ("augment", self.augment),
            ("description", self.description),
            ("if-feature", self.if_feature),
            ("reference", self.reference),
            ("refine", self.refine),
            ("status", self.status),
            ("when", self.when),
            ("exts", self.exts),
        ]
        args = ["'" + str(self.name) + "'"]
        attrs_text = _prsrc_attrs(indent, self.get_attrs())
        if len(attrs_text) > 0:
            args.append(_prsrc_attrs(indent, self.get_attrs()))
        args_text = ", ".join(args)
        text_line = _ind(indent) + "Uses(" + args_text + ")"
        res.append(text_line)
        return "\n".join(res)

    def compile(self, context: Context, new_ns: ?str=None, new_pfx: ?str=None):
        raise ValueError("Cannot compile 'uses'")

    mut def expand_refines(self, target_base: SchemaNode):
        """Expand refinements in the uses statement to the target nodes

        target_base is the SchemaNode where this uses statement is located
        """
        def get_target(target_base, target: str):
            parts = target.lstrip("/").split("/")
            current_node = target_base
            for part in parts:
                prefix, name = split_prefix_name(part)
                if prefix is not None:
                    # TODO: or is prefix OK when it is the local prefix?
                    raise ValueError("Relative path in refine under uses cannot have prefixes")
                current_node = current_node.get(name)
            return current_node

        for refine in self.refine:
            target = get_target(target_base, refine.target_node)
            target.apply_refine(refine)

    def __str__(self):
        return "Uses " + self.name

    def _get_argname(self) -> ?str:
        return 'name'

    def _get_arg(self) -> ?str:
        return self.name

extension Uses (Ord):
    def __eq__(self, other: Uses):
        return self.name == other.name and self.augment == other.augment and self.description == other.description and self.if_feature == other.if_feature and self.reference == other.reference and self.refine == other.refine and self.status == other.status and self.when == other.when

    def __lt__(a, b):
        return a.name < b.name

def take_opt_action(stmts: list[Statement]) -> ?Action:
    for node in take_nodes(stmts, ["action"]):
        if isinstance(node, Action):
            return node

def take_action(stmts: list[Statement]) -> Action:
    for node in take_nodes(stmts, ["action"]):
        if isinstance(node, Action):
            return node
    raise ValueError("No action in stmts")

def take_actions(stmts: list[Statement]) -> list[Action]:
    res = []
    for node in take_nodes(stmts, ["action"]):
        if isinstance(node, Action):
            res.append(node)
    return res

def take_opt_anydata(stmts: list[Statement]) -> ?Anydata:
    for node in take_nodes(stmts, ["anydata"]):
        if isinstance(node, Anydata):
            return node

def take_anydata(stmts: list[Statement]) -> Anydata:
    for node in take_nodes(stmts, ["anydata"]):
        if isinstance(node, Anydata):
            return node
    raise ValueError("No anydata in stmts")

def take_anydatas(stmts: list[Statement]) -> list[Anydata]:
    res = []
    for node in take_nodes(stmts, ["anydata"]):
        if isinstance(node, Anydata):
            res.append(node)
    return res

def take_opt_anyxml(stmts: list[Statement]) -> ?Anyxml:
    for node in take_nodes(stmts, ["anyxml"]):
        if isinstance(node, Anyxml):
            return node

def take_anyxml(stmts: list[Statement]) -> Anyxml:
    for node in take_nodes(stmts, ["anyxml"]):
        if isinstance(node, Anyxml):
            return node
    raise ValueError("No anyxml in stmts")

def take_anyxmls(stmts: list[Statement]) -> list[Anyxml]:
    res = []
    for node in take_nodes(stmts, ["anyxml"]):
        if isinstance(node, Anyxml):
            res.append(node)
    return res

def take_opt_augment(stmts: list[Statement]) -> ?Augment:
    for node in take_nodes(stmts, ["augment"]):
        if isinstance(node, Augment):
            return node

def take_augment(stmts: list[Statement]) -> Augment:
    for node in take_nodes(stmts, ["augment"]):
        if isinstance(node, Augment):
            return node
    raise ValueError("No augment in stmts")

def take_augments(stmts: list[Statement]) -> list[Augment]:
    res = []
    for node in take_nodes(stmts, ["augment"]):
        if isinstance(node, Augment):
            res.append(node)
    return res

def take_opt_belongs_to(stmts: list[Statement]) -> ?BelongsTo:
    for node in take_nodes(stmts, ["belongs-to"]):
        if isinstance(node, BelongsTo):
            return node

def take_belongs_to(stmts: list[Statement]) -> BelongsTo:
    for node in take_nodes(stmts, ["belongs-to"]):
        if isinstance(node, BelongsTo):
            return node
    raise ValueError("No belongs-to in stmts")

def take_belongs_tos(stmts: list[Statement]) -> list[BelongsTo]:
    res = []
    for node in take_nodes(stmts, ["belongs-to"]):
        if isinstance(node, BelongsTo):
            res.append(node)
    return res

def take_opt_bit(stmts: list[Statement]) -> ?Bit:
    for node in take_nodes(stmts, ["bit"]):
        if isinstance(node, Bit):
            return node

def take_bit(stmts: list[Statement]) -> Bit:
    for node in take_nodes(stmts, ["bit"]):
        if isinstance(node, Bit):
            return node
    raise ValueError("No bit in stmts")

def take_bits(stmts: list[Statement]) -> list[Bit]:
    res = []
    for node in take_nodes(stmts, ["bit"]):
        if isinstance(node, Bit):
            res.append(node)
    return res

def take_opt_case(stmts: list[Statement]) -> ?Case:
    for node in take_nodes(stmts, ["case"]):
        if isinstance(node, Case):
            return node

def take_case(stmts: list[Statement]) -> Case:
    for node in take_nodes(stmts, ["case"]):
        if isinstance(node, Case):
            return node
    raise ValueError("No case in stmts")

def take_cases(stmts: list[Statement]) -> list[Case]:
    res = []
    for node in take_nodes(stmts, ["case"]):
        if isinstance(node, Case):
            res.append(node)
    return res

def take_opt_choice(stmts: list[Statement]) -> ?Choice:
    for node in take_nodes(stmts, ["choice"]):
        if isinstance(node, Choice):
            return node

def take_choice(stmts: list[Statement]) -> Choice:
    for node in take_nodes(stmts, ["choice"]):
        if isinstance(node, Choice):
            return node
    raise ValueError("No choice in stmts")

def take_choices(stmts: list[Statement]) -> list[Choice]:
    res = []
    for node in take_nodes(stmts, ["choice"]):
        if isinstance(node, Choice):
            res.append(node)
    return res

def take_opt_container(stmts: list[Statement]) -> ?Container:
    for node in take_nodes(stmts, ["container"]):
        if isinstance(node, Container):
            return node

def take_container(stmts: list[Statement]) -> Container:
    for node in take_nodes(stmts, ["container"]):
        if isinstance(node, Container):
            return node
    raise ValueError("No container in stmts")

def take_containers(stmts: list[Statement]) -> list[Container]:
    res = []
    for node in take_nodes(stmts, ["container"]):
        if isinstance(node, Container):
            res.append(node)
    return res

def take_opt_enum(stmts: list[Statement]) -> ?Enum:
    for node in take_nodes(stmts, ["enum"]):
        if isinstance(node, Enum):
            return node

def take_enum(stmts: list[Statement]) -> Enum:
    for node in take_nodes(stmts, ["enum"]):
        if isinstance(node, Enum):
            return node
    raise ValueError("No enum in stmts")

def take_enums(stmts: list[Statement]) -> list[Enum]:
    res = []
    for node in take_nodes(stmts, ["enum"]):
        if isinstance(node, Enum):
            res.append(node)
    return res

def take_opt_extension(stmts: list[Statement]) -> ?Extension:
    for node in take_nodes(stmts, ["extension"]):
        if isinstance(node, Extension):
            return node

def take_extension(stmts: list[Statement]) -> Extension:
    for node in take_nodes(stmts, ["extension"]):
        if isinstance(node, Extension):
            return node
    raise ValueError("No extension in stmts")

def take_extensions(stmts: list[Statement]) -> list[Extension]:
    res = []
    for node in take_nodes(stmts, ["extension"]):
        if isinstance(node, Extension):
            res.append(node)
    return res

def take_opt_feature(stmts: list[Statement]) -> ?Feature:
    for node in take_nodes(stmts, ["feature"]):
        if isinstance(node, Feature):
            return node

def take_feature(stmts: list[Statement]) -> Feature:
    for node in take_nodes(stmts, ["feature"]):
        if isinstance(node, Feature):
            return node
    raise ValueError("No feature in stmts")

def take_features(stmts: list[Statement]) -> list[Feature]:
    res = []
    for node in take_nodes(stmts, ["feature"]):
        if isinstance(node, Feature):
            res.append(node)
    return res

def take_opt_grouping(stmts: list[Statement]) -> ?Grouping:
    for node in take_nodes(stmts, ["grouping"]):
        if isinstance(node, Grouping):
            return node

def take_grouping(stmts: list[Statement]) -> Grouping:
    for node in take_nodes(stmts, ["grouping"]):
        if isinstance(node, Grouping):
            return node
    raise ValueError("No grouping in stmts")

def take_groupings(stmts: list[Statement]) -> list[Grouping]:
    res = []
    for node in take_nodes(stmts, ["grouping"]):
        if isinstance(node, Grouping):
            res.append(node)
    return res

def take_opt_identity(stmts: list[Statement]) -> ?Identity:
    for node in take_nodes(stmts, ["identity"]):
        if isinstance(node, Identity):
            return node

def take_identity(stmts: list[Statement]) -> Identity:
    for node in take_nodes(stmts, ["identity"]):
        if isinstance(node, Identity):
            return node
    raise ValueError("No identity in stmts")

def take_identitys(stmts: list[Statement]) -> list[Identity]:
    res = []
    for node in take_nodes(stmts, ["identity"]):
        if isinstance(node, Identity):
            res.append(node)
    return res

def take_opt_import(stmts: list[Statement]) -> ?Import:
    for node in take_nodes(stmts, ["import"]):
        if isinstance(node, Import):
            return node

def take_import(stmts: list[Statement]) -> Import:
    for node in take_nodes(stmts, ["import"]):
        if isinstance(node, Import):
            return node
    raise ValueError("No import in stmts")

def take_imports(stmts: list[Statement]) -> list[Import]:
    res = []
    for node in take_nodes(stmts, ["import"]):
        if isinstance(node, Import):
            res.append(node)
    return res

def take_opt_include(stmts: list[Statement]) -> ?Include:
    for node in take_nodes(stmts, ["include"]):
        if isinstance(node, Include):
            return node

def take_include(stmts: list[Statement]) -> Include:
    for node in take_nodes(stmts, ["include"]):
        if isinstance(node, Include):
            return node
    raise ValueError("No include in stmts")

def take_includes(stmts: list[Statement]) -> list[Include]:
    res = []
    for node in take_nodes(stmts, ["include"]):
        if isinstance(node, Include):
            res.append(node)
    return res

def take_opt_input(stmts: list[Statement]) -> ?Input:
    for node in take_nodes(stmts, ["input"]):
        if isinstance(node, Input):
            return node

def take_input(stmts: list[Statement]) -> Input:
    for node in take_nodes(stmts, ["input"]):
        if isinstance(node, Input):
            return node
    raise ValueError("No input in stmts")

def take_inputs(stmts: list[Statement]) -> list[Input]:
    res = []
    for node in take_nodes(stmts, ["input"]):
        if isinstance(node, Input):
            res.append(node)
    return res

def take_opt_leaf(stmts: list[Statement]) -> ?Leaf:
    for node in take_nodes(stmts, ["leaf"]):
        if isinstance(node, Leaf):
            return node

def take_leaf(stmts: list[Statement]) -> Leaf:
    for node in take_nodes(stmts, ["leaf"]):
        if isinstance(node, Leaf):
            return node
    raise ValueError("No leaf in stmts")

def take_leafs(stmts: list[Statement]) -> list[Leaf]:
    res = []
    for node in take_nodes(stmts, ["leaf"]):
        if isinstance(node, Leaf):
            res.append(node)
    return res

def take_opt_leaf_list(stmts: list[Statement]) -> ?LeafList:
    for node in take_nodes(stmts, ["leaf-list"]):
        if isinstance(node, LeafList):
            return node

def take_leaf_list(stmts: list[Statement]) -> LeafList:
    for node in take_nodes(stmts, ["leaf-list"]):
        if isinstance(node, LeafList):
            return node
    raise ValueError("No leaf-list in stmts")

def take_leaf_lists(stmts: list[Statement]) -> list[LeafList]:
    res = []
    for node in take_nodes(stmts, ["leaf-list"]):
        if isinstance(node, LeafList):
            res.append(node)
    return res

def take_opt_length(stmts: list[Statement]) -> ?Length:
    for node in take_nodes(stmts, ["length"]):
        if isinstance(node, Length):
            return node

def take_length(stmts: list[Statement]) -> Length:
    for node in take_nodes(stmts, ["length"]):
        if isinstance(node, Length):
            return node
    raise ValueError("No length in stmts")

def take_lengths(stmts: list[Statement]) -> list[Length]:
    res = []
    for node in take_nodes(stmts, ["length"]):
        if isinstance(node, Length):
            res.append(node)
    return res

def take_opt_list(stmts: list[Statement]) -> ?List:
    for node in take_nodes(stmts, ["list"]):
        if isinstance(node, List):
            return node

def take_list(stmts: list[Statement]) -> List:
    for node in take_nodes(stmts, ["list"]):
        if isinstance(node, List):
            return node
    raise ValueError("No list in stmts")

def take_lists(stmts: list[Statement]) -> list[List]:
    res = []
    for node in take_nodes(stmts, ["list"]):
        if isinstance(node, List):
            res.append(node)
    return res

def take_opt_module(stmts: list[Statement]) -> ?Module:
    for node in take_nodes(stmts, ["module"]):
        if isinstance(node, Module):
            return node

def take_module(stmts: list[Statement]) -> Module:
    for node in take_nodes(stmts, ["module"]):
        if isinstance(node, Module):
            return node
    raise ValueError("No module in stmts")

def take_modules(stmts: list[Statement]) -> list[Module]:
    res = []
    for node in take_nodes(stmts, ["module"]):
        if isinstance(node, Module):
            res.append(node)
    return res

def take_opt_must(stmts: list[Statement]) -> ?Must:
    for node in take_nodes(stmts, ["must"]):
        if isinstance(node, Must):
            return node

def take_must(stmts: list[Statement]) -> Must:
    for node in take_nodes(stmts, ["must"]):
        if isinstance(node, Must):
            return node
    raise ValueError("No must in stmts")

def take_musts(stmts: list[Statement]) -> list[Must]:
    res = []
    for node in take_nodes(stmts, ["must"]):
        if isinstance(node, Must):
            res.append(node)
    return res

def take_opt_notification(stmts: list[Statement]) -> ?Notification:
    for node in take_nodes(stmts, ["notification"]):
        if isinstance(node, Notification):
            return node

def take_notification(stmts: list[Statement]) -> Notification:
    for node in take_nodes(stmts, ["notification"]):
        if isinstance(node, Notification):
            return node
    raise ValueError("No notification in stmts")

def take_notifications(stmts: list[Statement]) -> list[Notification]:
    res = []
    for node in take_nodes(stmts, ["notification"]):
        if isinstance(node, Notification):
            res.append(node)
    return res

def take_opt_output(stmts: list[Statement]) -> ?Output:
    for node in take_nodes(stmts, ["output"]):
        if isinstance(node, Output):
            return node

def take_output(stmts: list[Statement]) -> Output:
    for node in take_nodes(stmts, ["output"]):
        if isinstance(node, Output):
            return node
    raise ValueError("No output in stmts")

def take_outputs(stmts: list[Statement]) -> list[Output]:
    res = []
    for node in take_nodes(stmts, ["output"]):
        if isinstance(node, Output):
            res.append(node)
    return res

def take_opt_pattern(stmts: list[Statement]) -> ?Pattern:
    for node in take_nodes(stmts, ["pattern"]):
        if isinstance(node, Pattern):
            return node

def take_pattern(stmts: list[Statement]) -> Pattern:
    for node in take_nodes(stmts, ["pattern"]):
        if isinstance(node, Pattern):
            return node
    raise ValueError("No pattern in stmts")

def take_patterns(stmts: list[Statement]) -> list[Pattern]:
    res = []
    for node in take_nodes(stmts, ["pattern"]):
        if isinstance(node, Pattern):
            res.append(node)
    return res

def take_opt_range(stmts: list[Statement]) -> ?Range:
    for node in take_nodes(stmts, ["range"]):
        if isinstance(node, Range):
            return node

def take_range(stmts: list[Statement]) -> Range:
    for node in take_nodes(stmts, ["range"]):
        if isinstance(node, Range):
            return node
    raise ValueError("No range in stmts")

def take_ranges(stmts: list[Statement]) -> list[Range]:
    res = []
    for node in take_nodes(stmts, ["range"]):
        if isinstance(node, Range):
            res.append(node)
    return res

def take_opt_refine(stmts: list[Statement]) -> ?Refine:
    for node in take_nodes(stmts, ["refine"]):
        if isinstance(node, Refine):
            return node

def take_refine(stmts: list[Statement]) -> Refine:
    for node in take_nodes(stmts, ["refine"]):
        if isinstance(node, Refine):
            return node
    raise ValueError("No refine in stmts")

def take_refines(stmts: list[Statement]) -> list[Refine]:
    res = []
    for node in take_nodes(stmts, ["refine"]):
        if isinstance(node, Refine):
            res.append(node)
    return res

def take_opt_revision(stmts: list[Statement]) -> ?Revision:
    for node in take_nodes(stmts, ["revision"]):
        if isinstance(node, Revision):
            return node

def take_revision(stmts: list[Statement]) -> Revision:
    for node in take_nodes(stmts, ["revision"]):
        if isinstance(node, Revision):
            return node
    raise ValueError("No revision in stmts")

def take_revisions(stmts: list[Statement]) -> list[Revision]:
    res = []
    for node in take_nodes(stmts, ["revision"]):
        if isinstance(node, Revision):
            res.append(node)
    return res

def take_opt_rpc(stmts: list[Statement]) -> ?Rpc:
    for node in take_nodes(stmts, ["rpc"]):
        if isinstance(node, Rpc):
            return node

def take_rpc(stmts: list[Statement]) -> Rpc:
    for node in take_nodes(stmts, ["rpc"]):
        if isinstance(node, Rpc):
            return node
    raise ValueError("No rpc in stmts")

def take_rpcs(stmts: list[Statement]) -> list[Rpc]:
    res = []
    for node in take_nodes(stmts, ["rpc"]):
        if isinstance(node, Rpc):
            res.append(node)
    return res

def take_opt_submodule(stmts: list[Statement]) -> ?Submodule:
    for node in take_nodes(stmts, ["submodule"]):
        if isinstance(node, Submodule):
            return node

def take_submodule(stmts: list[Statement]) -> Submodule:
    for node in take_nodes(stmts, ["submodule"]):
        if isinstance(node, Submodule):
            return node
    raise ValueError("No submodule in stmts")

def take_submodules(stmts: list[Statement]) -> list[Submodule]:
    res = []
    for node in take_nodes(stmts, ["submodule"]):
        if isinstance(node, Submodule):
            res.append(node)
    return res

def take_opt_type(stmts: list[Statement]) -> ?Type:
    for node in take_nodes(stmts, ["type"]):
        if isinstance(node, Type):
            return node

def take_type(stmts: list[Statement]) -> Type:
    for node in take_nodes(stmts, ["type"]):
        if isinstance(node, Type):
            return node
    raise ValueError("No type in stmts")

def take_types(stmts: list[Statement]) -> list[Type]:
    res = []
    for node in take_nodes(stmts, ["type"]):
        if isinstance(node, Type):
            res.append(node)
    return res

def take_opt_typedef(stmts: list[Statement]) -> ?Typedef:
    for node in take_nodes(stmts, ["typedef"]):
        if isinstance(node, Typedef):
            return node

def take_typedef(stmts: list[Statement]) -> Typedef:
    for node in take_nodes(stmts, ["typedef"]):
        if isinstance(node, Typedef):
            return node
    raise ValueError("No typedef in stmts")

def take_typedefs(stmts: list[Statement]) -> list[Typedef]:
    res = []
    for node in take_nodes(stmts, ["typedef"]):
        if isinstance(node, Typedef):
            res.append(node)
    return res

def take_opt_uses(stmts: list[Statement]) -> ?Uses:
    for node in take_nodes(stmts, ["uses"]):
        if isinstance(node, Uses):
            return node

def take_uses(stmts: list[Statement]) -> Uses:
    for node in take_nodes(stmts, ["uses"]):
        if isinstance(node, Uses):
            return node
    raise ValueError("No uses in stmts")

def take_usess(stmts: list[Statement]) -> list[Uses]:
    res = []
    for node in take_nodes(stmts, ["uses"]):
        if isinstance(node, Uses):
            res.append(node)
    return res

def stmt_to_snode(stmt: Statement, parent: ?SchemaNode=None) -> SchemaNode:
    arg = stmt.arg
    ss = stmt.substatements.copy()
    if stmt.kw == "action":
        if arg is not None:
            n = Action(arg,
                       description=take_opt_str(ss, "description"),
                       if_feature=take_strlist(ss, "if-feature"),
                       input=take_opt_input(ss),
                       output=take_opt_output(ss),
                       reference=take_opt_str(ss, "reference"),
                       status=take_opt_str(ss, "status"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            n.children=take_nodes(ss, ["grouping", "typedef"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under action: %s" % (name))
            return n
    if stmt.kw == "anydata":
        if arg is not None:
            n = Anydata(arg,
                        config=take_opt_bool(ss, "config"),
                        description=take_opt_str(ss, "description"),
                        if_feature=take_strlist(ss, "if-feature"),
                        mandatory=take_opt_bool(ss, "mandatory"),
                        must=take_musts(ss),
                        reference=take_opt_str(ss, "reference"),
                        status=take_opt_str(ss, "status"),
                        when=take_opt_str(ss, "when"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under anydata: %s" % (name))
            return n
    if stmt.kw == "anyxml":
        if arg is not None:
            n = Anyxml(arg,
                       config=take_opt_bool(ss, "config"),
                       description=take_opt_str(ss, "description"),
                       if_feature=take_strlist(ss, "if-feature"),
                       mandatory=take_opt_bool(ss, "mandatory"),
                       must=take_musts(ss),
                       reference=take_opt_str(ss, "reference"),
                       status=take_opt_str(ss, "status"),
                       when=take_opt_str(ss, "when"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under anyxml: %s" % (name))
            return n
    if stmt.kw == "augment":
        if arg is not None:
            n = Augment(arg,
                        description=take_opt_str(ss, "description"),
                        if_feature=take_strlist(ss, "if-feature"),
                        reference=take_opt_str(ss, "reference"),
                        status=take_opt_str(ss, "status"),
                        when=take_opt_str(ss, "when"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            n.children=take_nodes(ss, ["action", "anydata", "anyxml", "case", "choice", "container", "leaf", "leaf-list", "list", "notification", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under augment: %s" % (name))
            return n
    if stmt.kw == "belongs-to":
        if arg is not None:
            n = BelongsTo(arg,
                          prefix=take_str(ss, "prefix"),
                          exts=take_exts(ss),
                          parent=parent
                          )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under belongs-to: %s" % (name))
            return n
    if stmt.kw == "bit":
        if arg is not None:
            n = Bit(arg,
                    description=take_opt_str(ss, "description"),
                    if_feature=take_strlist(ss, "if-feature"),
                    position=take_opt_int(ss, "position"),
                    reference=take_opt_str(ss, "reference"),
                    status=take_opt_str(ss, "status"),
                    exts=take_exts(ss),
                    parent=parent
                    )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under bit: %s" % (name))
            return n
    if stmt.kw == "case":
        if arg is not None:
            n = Case(arg,
                     description=take_opt_str(ss, "description"),
                     if_feature=take_strlist(ss, "if-feature"),
                     reference=take_opt_str(ss, "reference"),
                     status=take_opt_str(ss, "status"),
                     when=take_opt_str(ss, "when"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "leaf", "leaf-list", "list", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under case: %s" % (name))
            return n
    if stmt.kw == "choice":
        if arg is not None:
            n = Choice(arg,
                       config=take_opt_bool(ss, "config"),
                       default=take_opt_str(ss, "default"),
                       description=take_opt_str(ss, "description"),
                       if_feature=take_strlist(ss, "if-feature"),
                       mandatory=take_opt_bool(ss, "mandatory"),
                       reference=take_opt_str(ss, "reference"),
                       status=take_opt_str(ss, "status"),
                       when=take_opt_str(ss, "when"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            n.children=take_nodes(ss, ["anydata", "anyxml", "case", "choice", "container", "leaf", "leaf-list", "list"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under choice: %s" % (name))
            return n
    if stmt.kw == "container":
        if arg is not None:
            n = Container(arg,
                          config=take_opt_bool(ss, "config"),
                          description=take_opt_str(ss, "description"),
                          if_feature=take_strlist(ss, "if-feature"),
                          must=take_musts(ss),
                          presence=take_opt_str(ss, "presence"),
                          reference=take_opt_str(ss, "reference"),
                          status=take_opt_str(ss, "status"),
                          when=take_opt_str(ss, "when"),
                          exts=take_exts(ss),
                          parent=parent
                          )
            n.children=take_nodes(ss, ["action", "anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "notification", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under container: %s" % (name))
            return n
    if stmt.kw == "enum":
        if arg is not None:
            n = Enum(arg,
                     description=take_opt_str(ss, "description"),
                     if_feature=take_strlist(ss, "if-feature"),
                     reference=take_opt_str(ss, "reference"),
                     status=take_opt_str(ss, "status"),
                     value=take_opt_str(ss, "value"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under enum: %s" % (name))
            return n
    if stmt.kw == "extension":
        if arg is not None:
            n = Extension(arg,
                          argument=take_opt_str(ss, "argument"),
                          description=take_opt_str(ss, "description"),
                          reference=take_opt_str(ss, "reference"),
                          status=take_opt_str(ss, "status"),
                          exts=take_exts(ss),
                          parent=parent
                          )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under extension: %s" % (name))
            return n
    if stmt.kw == "feature":
        if arg is not None:
            n = Feature(arg,
                        description=take_opt_str(ss, "description"),
                        if_feature=take_strlist(ss, "if-feature"),
                        reference=take_opt_str(ss, "reference"),
                        status=take_opt_str(ss, "status"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under feature: %s" % (name))
            return n
    if stmt.kw == "grouping":
        if arg is not None:
            n = Grouping(arg,
                         description=take_opt_str(ss, "description"),
                         reference=take_opt_str(ss, "reference"),
                         status=take_opt_str(ss, "status"),
                         exts=take_exts(ss),
                         parent=parent
                         )
            n.children=take_nodes(ss, ["action", "anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "notification", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under grouping: %s" % (name))
            return n
    if stmt.kw == "identity":
        if arg is not None:
            n = Identity(arg,
                         base=take_strlist(ss, "base"),
                         description=take_opt_str(ss, "description"),
                         if_feature=take_strlist(ss, "if-feature"),
                         reference=take_opt_str(ss, "reference"),
                         status=take_opt_str(ss, "status"),
                         exts=take_exts(ss),
                         parent=parent
                         )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under identity: %s" % (name))
            return n
    if stmt.kw == "import":
        if arg is not None:
            n = Import(arg,
                       description=take_opt_str(ss, "description"),
                       prefix=take_str(ss, "prefix"),
                       reference=take_opt_str(ss, "reference"),
                       revision_date=take_opt_str(ss, "revision-date"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under import: %s" % (name))
            return n
    if stmt.kw == "include":
        if arg is not None:
            n = Include(arg,
                        description=take_opt_str(ss, "description"),
                        reference=take_opt_str(ss, "reference"),
                        revision_date=take_opt_str(ss, "revision-date"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under include: %s" % (name))
            return n
    if stmt.kw == "input":
        if arg is None:
            n = Input(must=take_musts(ss),
                      exts=take_exts(ss),
                      parent=parent
                      )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under input: %s" % (name))
            return n
    if stmt.kw == "leaf":
        if arg is not None:
            n = Leaf(arg,
                     config=take_opt_bool(ss, "config"),
                     default=take_opt_str(ss, "default"),
                     description=take_opt_str(ss, "description"),
                     if_feature=take_strlist(ss, "if-feature"),
                     mandatory=take_opt_bool(ss, "mandatory"),
                     must=take_musts(ss),
                     reference=take_opt_str(ss, "reference"),
                     status=take_opt_str(ss, "status"),
                     type_=take_type(ss),
                     units=take_opt_str(ss, "units"),
                     when=take_opt_str(ss, "when"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under leaf: %s" % (name))
            return n
    if stmt.kw == "leaf-list":
        if arg is not None:
            n = LeafList(arg,
                         config=take_opt_bool(ss, "config"),
                         default=take_strlist(ss, "default"),
                         description=take_opt_str(ss, "description"),
                         if_feature=take_strlist(ss, "if-feature"),
                         max_elements=take_opt_str(ss, "max-elements"),
                         min_elements=take_opt_str(ss, "min-elements"),
                         must=take_musts(ss),
                         ordered_by=take_opt_str(ss, "ordered-by"),
                         reference=take_opt_str(ss, "reference"),
                         status=take_opt_str(ss, "status"),
                         type_=take_type(ss),
                         units=take_opt_str(ss, "units"),
                         when=take_opt_str(ss, "when"),
                         exts=take_exts(ss),
                         parent=parent
                         )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under leaf-list: %s" % (name))
            return n
    if stmt.kw == "length":
        if arg is not None:
            n = Length(arg,
                       description=take_opt_str(ss, "description"),
                       error_app_tag=take_opt_str(ss, "error-app-tag"),
                       error_message=take_opt_str(ss, "error-message"),
                       reference=take_opt_str(ss, "reference"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under length: %s" % (name))
            return n
    if stmt.kw == "list":
        if arg is not None:
            n = List(arg,
                     config=take_opt_bool(ss, "config"),
                     description=take_opt_str(ss, "description"),
                     if_feature=take_strlist(ss, "if-feature"),
                     key=take_opt_str(ss, "key"),
                     max_elements=take_opt_str(ss, "max-elements"),
                     min_elements=take_opt_str(ss, "min-elements"),
                     must=take_musts(ss),
                     ordered_by=take_opt_str(ss, "ordered-by"),
                     reference=take_opt_str(ss, "reference"),
                     status=take_opt_str(ss, "status"),
                     unique=take_strlist(ss, "unique"),
                     when=take_opt_str(ss, "when"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            n.children=take_nodes(ss, ["action", "anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "notification", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under list: %s" % (name))
            return n
    if stmt.kw == "module":
        if arg is not None:
            n = Module(arg,
                       augment=take_augments(ss),
                       contact=take_opt_str(ss, "contact"),
                       description=take_opt_str(ss, "description"),
                       deviation=take_strlist(ss, "deviation"),
                       extension_=take_extensions(ss),
                       feature=take_features(ss),
                       import_=take_imports(ss),
                       include=take_includes(ss),
                       namespace=take_str(ss, "namespace"),
                       organization=take_opt_str(ss, "organization"),
                       prefix=take_str(ss, "prefix"),
                       reference=take_opt_str(ss, "reference"),
                       revision=take_revisions(ss),
                       yang_version=take_yang_version(ss),
                       exts=take_exts(ss),
                       parent=parent
                       )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "grouping", "identity", "leaf", "leaf-list", "list", "notification", "rpc", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under module: %s" % (name))
            return n
    if stmt.kw == "must":
        if arg is not None:
            n = Must(arg,
                     description=take_opt_str(ss, "description"),
                     error_app_tag=take_opt_str(ss, "error-app-tag"),
                     error_message=take_opt_str(ss, "error-message"),
                     reference=take_opt_str(ss, "reference"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under must: %s" % (name))
            return n
    if stmt.kw == "notification":
        if arg is not None:
            n = Notification(arg,
                             description=take_opt_str(ss, "description"),
                             if_feature=take_strlist(ss, "if-feature"),
                             must=take_musts(ss),
                             reference=take_opt_str(ss, "reference"),
                             status=take_opt_str(ss, "status"),
                             exts=take_exts(ss),
                             parent=parent
                             )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under notification: %s" % (name))
            return n
    if stmt.kw == "output":
        if arg is None:
            n = Output(must=take_musts(ss),
                       exts=take_exts(ss),
                       parent=parent
                       )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "grouping", "leaf", "leaf-list", "list", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under output: %s" % (name))
            return n
    if stmt.kw == "pattern":
        if arg is not None:
            n = Pattern(arg,
                        description=take_opt_str(ss, "description"),
                        error_app_tag=take_opt_str(ss, "error-app-tag"),
                        error_message=take_opt_str(ss, "error-message"),
                        modifier=take_opt_str(ss, "modifier"),
                        reference=take_opt_str(ss, "reference"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under pattern: %s" % (name))
            return n
    if stmt.kw == "range":
        if arg is not None:
            n = Range(arg,
                      description=take_opt_str(ss, "description"),
                      error_app_tag=take_opt_str(ss, "error-app-tag"),
                      error_message=take_opt_str(ss, "error-message"),
                      reference=take_opt_str(ss, "reference"),
                      exts=take_exts(ss),
                      parent=parent
                      )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under range: %s" % (name))
            return n
    if stmt.kw == "refine":
        if arg is not None:
            n = Refine(arg,
                       config=take_opt_bool(ss, "config"),
                       default=take_strlist(ss, "default"),
                       description=take_opt_str(ss, "description"),
                       if_feature=take_strlist(ss, "if-feature"),
                       mandatory=take_opt_bool(ss, "mandatory"),
                       max_elements=take_opt_str(ss, "max-elements"),
                       min_elements=take_opt_str(ss, "min-elements"),
                       must=take_musts(ss),
                       presence=take_opt_str(ss, "presence"),
                       reference=take_opt_str(ss, "reference"),
                       exts=take_exts(ss),
                       parent=parent
                       )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under refine: %s" % (name))
            return n
    if stmt.kw == "revision":
        if arg is not None:
            n = Revision(arg,
                         description=take_opt_str(ss, "description"),
                         reference=take_opt_str(ss, "reference"),
                         exts=take_exts(ss),
                         parent=parent
                         )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under revision: %s" % (name))
            return n
    if stmt.kw == "rpc":
        if arg is not None:
            n = Rpc(arg,
                    description=take_opt_str(ss, "description"),
                    if_feature=take_strlist(ss, "if-feature"),
                    input=take_opt_input(ss),
                    output=take_opt_output(ss),
                    reference=take_opt_str(ss, "reference"),
                    status=take_opt_str(ss, "status"),
                    exts=take_exts(ss),
                    parent=parent
                    )
            n.children=take_nodes(ss, ["grouping", "typedef"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under rpc: %s" % (name))
            return n
    if stmt.kw == "submodule":
        if arg is not None:
            n = Submodule(arg,
                          augment=take_augments(ss),
                          belongs_to=take_belongs_to(ss),
                          contact=take_opt_str(ss, "contact"),
                          description=take_opt_str(ss, "description"),
                          deviation=take_strlist(ss, "deviation"),
                          extension_=take_extensions(ss),
                          feature=take_features(ss),
                          import_=take_imports(ss),
                          include=take_includes(ss),
                          organization=take_opt_str(ss, "organization"),
                          reference=take_opt_str(ss, "reference"),
                          revision=take_revisions(ss),
                          yang_version=take_yang_version(ss),
                          exts=take_exts(ss),
                          parent=parent
                          )
            n.children=take_nodes(ss, ["anydata", "anyxml", "choice", "container", "grouping", "identity", "leaf", "leaf-list", "list", "notification", "rpc", "typedef", "uses"], n)
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under submodule: %s" % (name))
            return n
    if stmt.kw == "type":
        if arg is not None:
            n = Type(arg,
                     base=take_strlist(ss, "base"),
                     bit=take_bits(ss),
                     enum=take_enums(ss),
                     fraction_digits=take_opt_int(ss, "fraction-digits"),
                     length=take_opt_length(ss),
                     path=take_opt_str(ss, "path"),
                     pattern=take_patterns(ss),
                     range_=take_opt_range(ss),
                     require_instance=take_opt_bool(ss, "require-instance"),
                     type_=take_types(ss),
                     exts=take_exts(ss),
                     parent=parent
                     )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under type: %s" % (name))
            return n
    if stmt.kw == "typedef":
        if arg is not None:
            n = Typedef(arg,
                        default=take_opt_str(ss, "default"),
                        description=take_opt_str(ss, "description"),
                        reference=take_opt_str(ss, "reference"),
                        status=take_opt_str(ss, "status"),
                        type_=take_type(ss),
                        units=take_opt_str(ss, "units"),
                        exts=take_exts(ss),
                        parent=parent
                        )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under typedef: %s" % (name))
            return n
    if stmt.kw == "uses":
        if arg is not None:
            n = Uses(arg,
                     augment=take_augments(ss),
                     description=take_opt_str(ss, "description"),
                     if_feature=take_strlist(ss, "if-feature"),
                     reference=take_opt_str(ss, "reference"),
                     refine=take_refines(ss),
                     status=take_opt_str(ss, "status"),
                     when=take_opt_str(ss, "when"),
                     exts=take_exts(ss),
                     parent=parent
                     )
            if len(ss) > 0:
                name = ss[0].kw
                prefix = ss[0].prefix
                raise ValueError("Invalid statement under uses: %s" % (name))
            return n
    raise ValueError("Unknown statement:" + stmt.kw)


def stmt_to_smodule(stmt):
    m = stmt_to_snode(stmt)
    if isinstance(m, Module):
        return m
    raise ValueError("Expected a module, got " + type(m))

