import argparse
import file
import yang
import yang.parser
import yang.schema
import transform_unions
import testing


actor main(env):
    """ayangc: Acton YANG Compiler

    This is an experimental tool that exposes some functions from the acton-yang
    library in a command-line interface. The interface is likely to change in
    future as the needs evolve. Right now, it parses a YANG file into low-level
    Statement tree. Then it optionally applies transforms to the SchemaNode tree
    and prints out the resulting YANG after converting it back to Statement
    tree.

    As a side effect, the comments in YANG are removed entirely, some YANG
    statements may be reordered or have their arguments quoted. But from the
    modeling point of view, the resulting YANG should be equivalent to the input
    YANG (less the changes made by transform).
    """
    p = argparse.Parser()
    p.add_arg("infile", "input yang file")
    p.add_option("transform", "strlist", "+", [], "transforms to apply")
    args = p.parse(env.argv)
    file_cap = file.FileCap(env.cap)

    infile = file.ReadFile(
        file.ReadFileCap(file_cap),
        args.get_str("infile")).read().decode()

    y = yang.parser.parse(infile)
    transforms = args.get_strlist("transform")
    if len(transforms) > 0:
        n = yang.schema.stmt_to_snode(y)
        for transform in args.get_strlist("transform"):
            if transform == "unions":
                print("Applying transform: {transform}", err=True)
                transform_unions.rewrite_unions(n)
                print("Done", err=True)
            else:
                print("Unknown transform: {transform}", err=True)
                env.exit(1)
        y = n.to_statement()

    yang_out = y.pryang()
    print(yang_out)

    env.exit(0)


test_yang = r"""module test_ayangc {
  // This comment will be removed
  yang-version "1.1";
  namespace "http://example.com/test_ayangc";
  prefix "test_ayangc";
  description "test yang module";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }
  import ietf-inet-types {
    prefix "inet";
    revision-date 2013-07-15;
  }
  typedef t1 {
    type string;
  }
  extension ext1 {
    description "extension 1";
    argument "arg1";
  }
  container c1 {
    description "container 1";
    leaf l1 {
      type string;
      description "leaf 1";
      if-feature "fe1 or fe2";
    }
    leaf l2 {
      type union {
        /* rewrite this union */
        type string {
          pattern "<.*>|^.*$";
        }
        type uint32;
      }
      description "leaf 2";
    }
  }
}
"""

def _test_ayangc_transform_unions():
    n = yang.schema_from_src(test_yang)
    transform_unions.rewrite_unions(n)
    return n.to_statement().pryang()
